digraph "CallGraph" {
    node [style="rounded,bold,filled"];
    node [shape=box];
    "Root" [label="Root",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)" [label="MainActivity(onCreate)",];
    "Root"->"com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)" [label="SYMBOLIC",style=bold,color=black,];
    "com.google.android.gms.ads.AdView: void loadAd(com.google.android.gms.ads.AdRequest)" [label="AdView(loadAd)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"com.google.android.gms.ads.AdView: void loadAd(com.google.android.gms.ads.AdRequest)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.BaseAdView: void loadAd(com.google.android.gms.ads.AdRequest)" [label="BaseAdView(loadAd)",];
    "com.google.android.gms.ads.AdView: void loadAd(com.google.android.gms.ads.AdRequest)"->"com.google.android.gms.ads.BaseAdView: void loadAd(com.google.android.gms.ads.AdRequest)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)" [label="zzly(zza)",];
    "com.google.android.gms.ads.BaseAdView: void loadAd(com.google.android.gms.ads.AdRequest)"->"com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzks: void zza(com.google.android.gms.internal.ads.zzmu)" [label="zzks(zza)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzks: void zza(com.google.android.gms.internal.ads.zzmu)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjf: void <init>(com.google.android.gms.ads.AdListener)" [label="zzjf(<init>)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzjf: void <init>(com.google.android.gms.ads.AdListener)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzki: void <init>()" [label="zzki(<init>)",];
    "com.google.android.gms.internal.ads.zzjf: void <init>(com.google.android.gms.ads.AdListener)"->"com.google.android.gms.internal.ads.zzki: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzek: void <init>(java.lang.String)" [label="zzek(<init>)",];
    "com.google.android.gms.internal.ads.zzki: void <init>()"->"com.google.android.gms.internal.ads.zzek: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjp: void <init>(com.google.android.gms.ads.doubleclick.AppEventListener)" [label="zzjp(<init>)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzjp: void <init>(com.google.android.gms.ads.doubleclick.AppEventListener)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlb: void <init>()" [label="zzlb(<init>)",];
    "com.google.android.gms.internal.ads.zzjp: void <init>(com.google.android.gms.ads.doubleclick.AppEventListener)"->"com.google.android.gms.internal.ads.zzlb: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlb: void <init>()"->"com.google.android.gms.internal.ads.zzek: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzks: void zza(com.google.android.gms.internal.ads.zzlg)" [label="zzks(zza)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzks: void zza(com.google.android.gms.internal.ads.zzlg)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamic.ObjectWrapper: java.lang.Object unwrap(com.google.android.gms.dynamic.IObjectWrapper)" [label="ObjectWrapper(unwrap)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.dynamic.ObjectWrapper: java.lang.Object unwrap(com.google.android.gms.dynamic.IObjectWrapper)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzxm: void zzj(java.util.Map)" [label="zzxm(zzj)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzxm: void zzj(java.util.Map)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzly: com.google.android.gms.internal.ads.zzjn zza(android.content.Context,com.google.android.gms.ads.AdSize[],int)" [label="zzly(zza)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzly: com.google.android.gms.internal.ads.zzjn zza(android.content.Context,com.google.android.gms.ads.AdSize[],int)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzly: boolean zzu(int)" [label="zzly(zzu)",];
    "com.google.android.gms.internal.ads.zzly: com.google.android.gms.internal.ads.zzjn zza(android.content.Context,com.google.android.gms.ads.AdSize[],int)"->"com.google.android.gms.internal.ads.zzly: boolean zzu(int)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])" [label="zzjn(<init>)",];
    "com.google.android.gms.internal.ads.zzly: com.google.android.gms.internal.ads.zzjn zza(android.content.Context,com.google.android.gms.ads.AdSize[],int)"->"com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzamu zzif()" [label="zzkb(zzif)",];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzamu zzif()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzkb zzie()" [label="zzkb(zzie)",];
    "com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzamu zzif()"->"com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzkb zzie()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable: void <init>()" [label="AbstractSafeParcelable(<init>)",];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdSize: int getHeight()" [label="AdSize(getHeight)",];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.ads.AdSize: int getHeight()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzamu zzif()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdSize: java.lang.String toString()" [label="AdSize(toString)",];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.ads.AdSize: java.lang.String toString()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzamu: int zza(android.util.DisplayMetrics,int)" [label="zzamu(zza)",];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.ads.zzamu: int zza(android.util.DisplayMetrics,int)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjn: int zzd(android.util.DisplayMetrics)" [label="zzjn(zzd)",];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.ads.zzjn: int zzd(android.util.DisplayMetrics)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize)" [label="zzjn(<init>)",];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize)"->"com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdSize: int getWidth()" [label="AdSize(getWidth)",];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.ads.AdSize: int getWidth()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzamu: int zzbk(android.content.Context)" [label="zzamu(zzbk)",];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.ads.zzamu: int zzbk(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.ads.AdSize: int getHeight()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdSize: boolean isFluid()" [label="AdSize(isFluid)",];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.ads.AdSize: boolean isFluid()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.ads.zzamu: int zza(android.util.DisplayMetrics,int)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzamu zzif()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzamu zzif()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.ads.AdSize: int getWidth()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzamu zzif()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzamu: boolean zzbi(android.content.Context)" [label="zzamu(zzbi)",];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.ads.zzamu: boolean zzbi(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzamu: boolean zzbj(android.content.Context)" [label="zzamu(zzbj)",];
    "com.google.android.gms.internal.ads.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.ads.zzamu: boolean zzbj(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.common.util.PlatformVersion: boolean isAtLeastJellyBeanMR1()" [label="PlatformVersion(isAtLeastJellyBeanMR1)",];
    "com.google.android.gms.internal.ads.zzamu: boolean zzbj(android.content.Context)"->"com.google.android.gms.common.util.PlatformVersion: boolean isAtLeastJellyBeanMR1()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzjr zzig()" [label="zzkb(zzig)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzjr zzig()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzjr zzig()"->"com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzkb zzie()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.ads.zzjr$zza)" [label="zzjr(zza)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.ads.zzjr$zza)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr$zza: java.lang.Object zzic()" [label="zzjr$zza(zzic)",];
    "com.google.android.gms.internal.ads.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.ads.zzjr$zza)"->"com.google.android.gms.internal.ads.zzjr$zza: java.lang.Object zzic()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr: com.google.android.gms.internal.ads.zzld zza(com.google.android.gms.internal.ads.zzjr)" [label="zzjr(zza)",];
    "com.google.android.gms.internal.ads.zzjr$zza: java.lang.Object zzic()"->"com.google.android.gms.internal.ads.zzjr: com.google.android.gms.internal.ads.zzld zza(com.google.android.gms.internal.ads.zzjr)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr: com.google.android.gms.internal.ads.zzld zzia()" [label="zzjr(zzia)",];
    "com.google.android.gms.internal.ads.zzjr: com.google.android.gms.internal.ads.zzld zza(com.google.android.gms.internal.ads.zzjr)"->"com.google.android.gms.internal.ads.zzjr: com.google.android.gms.internal.ads.zzld zzia()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr: com.google.android.gms.internal.ads.zzld zzhz()" [label="zzjr(zzhz)",];
    "com.google.android.gms.internal.ads.zzjr: com.google.android.gms.internal.ads.zzld zzia()"->"com.google.android.gms.internal.ads.zzjr: com.google.android.gms.internal.ads.zzld zzhz()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzane: void zzdk(java.lang.String)" [label="zzane(zzdk)",];
    "com.google.android.gms.internal.ads.zzjr: com.google.android.gms.internal.ads.zzld zzhz()"->"com.google.android.gms.internal.ads.zzane: void zzdk(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzle: com.google.android.gms.internal.ads.zzld asInterface(android.os.IBinder)" [label="zzle(asInterface)",];
    "com.google.android.gms.internal.ads.zzjr: com.google.android.gms.internal.ads.zzld zzhz()"->"com.google.android.gms.internal.ads.zzle: com.google.android.gms.internal.ads.zzld asInterface(android.os.IBinder)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlf: void <init>(android.os.IBinder)" [label="zzlf(<init>)",];
    "com.google.android.gms.internal.ads.zzle: com.google.android.gms.internal.ads.zzld asInterface(android.os.IBinder)"->"com.google.android.gms.internal.ads.zzlf: void <init>(android.os.IBinder)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzej: void <init>(android.os.IBinder,java.lang.String)" [label="zzej(<init>)",];
    "com.google.android.gms.internal.ads.zzlf: void <init>(android.os.IBinder)"->"com.google.android.gms.internal.ads.zzej: void <init>(android.os.IBinder,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzane: void zzc(java.lang.String,java.lang.Throwable)" [label="zzane(zzc)",];
    "com.google.android.gms.internal.ads.zzjr: com.google.android.gms.internal.ads.zzld zzhz()"->"com.google.android.gms.internal.ads.zzane: void zzc(java.lang.String,java.lang.Throwable)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr$zza: java.lang.Object zzic()"->"com.google.android.gms.internal.ads.zzane: void zzc(java.lang.String,java.lang.Throwable)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr$zza: java.lang.Object zzic()"->"com.google.android.gms.internal.ads.zzane: void zzdk(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr$zza: java.lang.Object zza(com.google.android.gms.internal.ads.zzld)" [label="zzjr$zza(zza)",];
    "com.google.android.gms.internal.ads.zzjr$zza: java.lang.Object zzic()"->"com.google.android.gms.internal.ads.zzjr$zza: java.lang.Object zza(com.google.android.gms.internal.ads.zzld)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzni: java.lang.Object zzd(com.google.android.gms.internal.ads.zzna)" [label="zzni(zzd)",];
    "com.google.android.gms.internal.ads.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.ads.zzjr$zza)"->"com.google.android.gms.internal.ads.zzni: java.lang.Object zzd(com.google.android.gms.internal.ads.zzna)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzna: java.lang.Object zzja()" [label="zzna(zzja)",];
    "com.google.android.gms.internal.ads.zzni: java.lang.Object zzd(com.google.android.gms.internal.ads.zzna)"->"com.google.android.gms.internal.ads.zzna: java.lang.Object zzja()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zznj: void <init>(com.google.android.gms.internal.ads.zzni,com.google.android.gms.internal.ads.zzna)" [label="zznj(<init>)",];
    "com.google.android.gms.internal.ads.zzni: java.lang.Object zzd(com.google.android.gms.internal.ads.zzna)"->"com.google.android.gms.internal.ads.zznj: void <init>(com.google.android.gms.internal.ads.zzni,com.google.android.gms.internal.ads.zzna)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzaml: java.lang.Object zza(android.content.Context,java.util.concurrent.Callable)" [label="zzaml(zza)",];
    "com.google.android.gms.internal.ads.zzni: java.lang.Object zzd(com.google.android.gms.internal.ads.zzna)"->"com.google.android.gms.internal.ads.zzaml: java.lang.Object zza(android.content.Context,java.util.concurrent.Callable)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzadf: void zza(java.lang.Throwable,java.lang.String)" [label="zzadf(zza)",];
    "com.google.android.gms.internal.ads.zzaml: java.lang.Object zza(android.content.Context,java.util.concurrent.Callable)"->"com.google.android.gms.internal.ads.zzadf: void zza(java.lang.Throwable,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzadb: com.google.android.gms.internal.ads.zzadf zzl(android.content.Context)" [label="zzadb(zzl)",];
    "com.google.android.gms.internal.ads.zzaml: java.lang.Object zza(android.content.Context,java.util.concurrent.Callable)"->"com.google.android.gms.internal.ads.zzadb: com.google.android.gms.internal.ads.zzadf zzl(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzni zzik()" [label="zzkb(zzik)",];
    "com.google.android.gms.internal.ads.zzadb: com.google.android.gms.internal.ads.zzadf zzl(android.content.Context)"->"com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzni zzik()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzadb: com.google.android.gms.internal.ads.zzadf zzl(android.content.Context)"->"com.google.android.gms.internal.ads.zzni: java.lang.Object zzd(com.google.android.gms.internal.ads.zzna)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzadg: void <init>()" [label="zzadg(<init>)",];
    "com.google.android.gms.internal.ads.zzadb: com.google.android.gms.internal.ads.zzadf zzl(android.content.Context)"->"com.google.android.gms.internal.ads.zzadg: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzadb: void <init>(android.content.Context)" [label="zzadb(<init>)",];
    "com.google.android.gms.internal.ads.zzadb: com.google.android.gms.internal.ads.zzadf zzl(android.content.Context)"->"com.google.android.gms.internal.ads.zzadb: void <init>(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzadb: void <init>(android.content.Context,com.google.android.gms.internal.ads.zzang)" [label="zzadb(<init>)",];
    "com.google.android.gms.internal.ads.zzadb: void <init>(android.content.Context)"->"com.google.android.gms.internal.ads.zzadb: void <init>(android.content.Context,com.google.android.gms.internal.ads.zzang)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzang: com.google.android.gms.internal.ads.zzang zzsl()" [label="zzang(zzsl)",];
    "com.google.android.gms.internal.ads.zzadb: void <init>(android.content.Context)"->"com.google.android.gms.internal.ads.zzang: com.google.android.gms.internal.ads.zzang zzsl()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzang: void <init>(int,int,boolean)" [label="zzang(<init>)",];
    "com.google.android.gms.internal.ads.zzang: com.google.android.gms.internal.ads.zzang zzsl()"->"com.google.android.gms.internal.ads.zzang: void <init>(int,int,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzang: void <init>(int,int,boolean,boolean,boolean)" [label="zzang(<init>)",];
    "com.google.android.gms.internal.ads.zzang: void <init>(int,int,boolean)"->"com.google.android.gms.internal.ads.zzang: void <init>(int,int,boolean,boolean,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzang: void <init>(java.lang.String,int,int,boolean,boolean)" [label="zzang(<init>)",];
    "com.google.android.gms.internal.ads.zzang: void <init>(int,int,boolean,boolean,boolean)"->"com.google.android.gms.internal.ads.zzang: void <init>(java.lang.String,int,int,boolean,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzang: void <init>(java.lang.String,int,int,boolean,boolean)"->"com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzane: void zzb(java.lang.String,java.lang.Throwable)" [label="zzane(zzb)",];
    "com.google.android.gms.internal.ads.zzaml: java.lang.Object zza(android.content.Context,java.util.concurrent.Callable)"->"com.google.android.gms.internal.ads.zzane: void zzb(java.lang.String,java.lang.Throwable)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzane: boolean isLoggable(int)" [label="zzane(isLoggable)",];
    "com.google.android.gms.internal.ads.zzane: void zzb(java.lang.String,java.lang.Throwable)"->"com.google.android.gms.internal.ads.zzane: boolean isLoggable(int)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzamu: int zzbg(android.content.Context)" [label="zzamu(zzbg)",];
    "com.google.android.gms.internal.ads.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.ads.zzjr$zza)"->"com.google.android.gms.internal.ads.zzamu: int zzbg(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: int getLocalVersion(android.content.Context,java.lang.String)" [label="DynamiteModule(getLocalVersion)",];
    "com.google.android.gms.internal.ads.zzamu: int zzbg(android.content.Context)"->"com.google.android.gms.dynamite.DynamiteModule: int getLocalVersion(android.content.Context,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.ads.zzjr$zza)"->"com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzamu zzif()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzamu: int zzbf(android.content.Context)" [label="zzamu(zzbf)",];
    "com.google.android.gms.internal.ads.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.ads.zzjr$zza)"->"com.google.android.gms.internal.ads.zzamu: int zzbf(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: int getRemoteVersion(android.content.Context,java.lang.String)" [label="DynamiteModule(getRemoteVersion)",];
    "com.google.android.gms.internal.ads.zzamu: int zzbf(android.content.Context)"->"com.google.android.gms.dynamite.DynamiteModule: int getRemoteVersion(android.content.Context,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: int getRemoteVersion(android.content.Context,java.lang.String,boolean)" [label="DynamiteModule(getRemoteVersion)",];
    "com.google.android.gms.dynamite.DynamiteModule: int getRemoteVersion(android.content.Context,java.lang.String)"->"com.google.android.gms.dynamite.DynamiteModule: int getRemoteVersion(android.content.Context,java.lang.String,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: void zza(java.lang.ClassLoader)" [label="DynamiteModule(zza)",];
    "com.google.android.gms.dynamite.DynamiteModule: int getRemoteVersion(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule: void zza(java.lang.ClassLoader)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.IDynamiteLoaderV2$Stub: com.google.android.gms.dynamite.IDynamiteLoaderV2 asInterface(android.os.IBinder)" [label="IDynamiteLoaderV2$Stub(asInterface)",];
    "com.google.android.gms.dynamite.DynamiteModule: void zza(java.lang.ClassLoader)"->"com.google.android.gms.dynamite.IDynamiteLoaderV2$Stub: com.google.android.gms.dynamite.IDynamiteLoaderV2 asInterface(android.os.IBinder)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.IDynamiteLoaderV2$Stub$Proxy: void <init>(android.os.IBinder)" [label="IDynamiteLoaderV2$Stub$Proxy(<init>)",];
    "com.google.android.gms.dynamite.IDynamiteLoaderV2$Stub: com.google.android.gms.dynamite.IDynamiteLoaderV2 asInterface(android.os.IBinder)"->"com.google.android.gms.dynamite.IDynamiteLoaderV2$Stub$Proxy: void <init>(android.os.IBinder)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.stable.zza: void <init>(android.os.IBinder,java.lang.String)" [label="zza(<init>)",];
    "com.google.android.gms.dynamite.IDynamiteLoaderV2$Stub$Proxy: void <init>(android.os.IBinder)"->"com.google.android.gms.internal.stable.zza: void <init>(android.os.IBinder,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule$LoadingException: void <init>(java.lang.String,java.lang.Throwable,com.google.android.gms.dynamite.zza)" [label="DynamiteModule$LoadingException(<init>)",];
    "com.google.android.gms.dynamite.DynamiteModule: void zza(java.lang.ClassLoader)"->"com.google.android.gms.dynamite.DynamiteModule$LoadingException: void <init>(java.lang.String,java.lang.Throwable,com.google.android.gms.dynamite.zza)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule$LoadingException: void <init>(java.lang.String,java.lang.Throwable)" [label="DynamiteModule$LoadingException(<init>)",];
    "com.google.android.gms.dynamite.DynamiteModule$LoadingException: void <init>(java.lang.String,java.lang.Throwable,com.google.android.gms.dynamite.zza)"->"com.google.android.gms.dynamite.DynamiteModule$LoadingException: void <init>(java.lang.String,java.lang.Throwable)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: int zzb(android.content.Context,java.lang.String,boolean)" [label="DynamiteModule(zzb)",];
    "com.google.android.gms.dynamite.DynamiteModule: int getRemoteVersion(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule: int zzb(android.content.Context,java.lang.String,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule$LoadingException: void <init>(java.lang.String,com.google.android.gms.dynamite.zza)" [label="DynamiteModule$LoadingException(<init>)",];
    "com.google.android.gms.dynamite.DynamiteModule: int zzb(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule$LoadingException: void <init>(java.lang.String,com.google.android.gms.dynamite.zza)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule$LoadingException: void <init>(java.lang.String)" [label="DynamiteModule$LoadingException(<init>)",];
    "com.google.android.gms.dynamite.DynamiteModule$LoadingException: void <init>(java.lang.String,com.google.android.gms.dynamite.zza)"->"com.google.android.gms.dynamite.DynamiteModule$LoadingException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: int zzb(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule$LoadingException: void <init>(java.lang.String,java.lang.Throwable,com.google.android.gms.dynamite.zza)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: android.database.Cursor queryForDynamiteModule(android.content.Context,java.lang.String,boolean)" [label="DynamiteModule(queryForDynamiteModule)",];
    "com.google.android.gms.dynamite.DynamiteModule: int zzb(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule: android.database.Cursor queryForDynamiteModule(android.content.Context,java.lang.String,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: android.net.Uri getQueryUri(java.lang.String,boolean)" [label="DynamiteModule(getQueryUri)",];
    "com.google.android.gms.dynamite.DynamiteModule: android.database.Cursor queryForDynamiteModule(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule: android.net.Uri getQueryUri(java.lang.String,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: int zza(android.content.Context,java.lang.String,boolean)" [label="DynamiteModule(zza)",];
    "com.google.android.gms.dynamite.DynamiteModule: int getRemoteVersion(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule: int zza(android.content.Context,java.lang.String,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.IDynamiteLoader zzg(android.content.Context)" [label="DynamiteModule(zzg)",];
    "com.google.android.gms.dynamite.DynamiteModule: int zza(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.IDynamiteLoader zzg(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.common.GoogleApiAvailabilityLight: com.google.android.gms.common.GoogleApiAvailabilityLight getInstance()" [label="GoogleApiAvailabilityLight(getInstance)",];
    "com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.IDynamiteLoader zzg(android.content.Context)"->"com.google.android.gms.common.GoogleApiAvailabilityLight: com.google.android.gms.common.GoogleApiAvailabilityLight getInstance()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.common.GoogleApiAvailabilityLight: int isGooglePlayServicesAvailable(android.content.Context)" [label="GoogleApiAvailabilityLight(isGooglePlayServicesAvailable)",];
    "com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.IDynamiteLoader zzg(android.content.Context)"->"com.google.android.gms.common.GoogleApiAvailabilityLight: int isGooglePlayServicesAvailable(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.common.GoogleApiAvailabilityLight: int isGooglePlayServicesAvailable(android.content.Context,int)" [label="GoogleApiAvailabilityLight(isGooglePlayServicesAvailable)",];
    "com.google.android.gms.common.GoogleApiAvailabilityLight: int isGooglePlayServicesAvailable(android.content.Context)"->"com.google.android.gms.common.GoogleApiAvailabilityLight: int isGooglePlayServicesAvailable(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.IDynamiteLoader$Stub: com.google.android.gms.dynamite.IDynamiteLoader asInterface(android.os.IBinder)" [label="IDynamiteLoader$Stub(asInterface)",];
    "com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.IDynamiteLoader zzg(android.content.Context)"->"com.google.android.gms.dynamite.IDynamiteLoader$Stub: com.google.android.gms.dynamite.IDynamiteLoader asInterface(android.os.IBinder)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.IDynamiteLoader$Stub$Proxy: void <init>(android.os.IBinder)" [label="IDynamiteLoader$Stub$Proxy(<init>)",];
    "com.google.android.gms.dynamite.IDynamiteLoader$Stub: com.google.android.gms.dynamite.IDynamiteLoader asInterface(android.os.IBinder)"->"com.google.android.gms.dynamite.IDynamiteLoader$Stub$Proxy: void <init>(android.os.IBinder)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.IDynamiteLoader$Stub$Proxy: void <init>(android.os.IBinder)"->"com.google.android.gms.internal.stable.zza: void <init>(android.os.IBinder,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.IDynamiteLoader: int getModuleVersion2(com.google.android.gms.dynamic.IObjectWrapper,java.lang.String,boolean)" [label="IDynamiteLoader(getModuleVersion2)",];
    "com.google.android.gms.dynamite.DynamiteModule: int zza(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.IDynamiteLoader: int getModuleVersion2(com.google.android.gms.dynamic.IObjectWrapper,java.lang.String,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamic.ObjectWrapper: com.google.android.gms.dynamic.IObjectWrapper wrap(java.lang.Object)" [label="ObjectWrapper(wrap)",];
    "com.google.android.gms.dynamite.DynamiteModule: int zza(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamic.ObjectWrapper: com.google.android.gms.dynamic.IObjectWrapper wrap(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamic.ObjectWrapper: void <init>(java.lang.Object)" [label="ObjectWrapper(<init>)",];
    "com.google.android.gms.dynamic.ObjectWrapper: com.google.android.gms.dynamic.IObjectWrapper wrap(java.lang.Object)"->"com.google.android.gms.dynamic.ObjectWrapper: void <init>(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamic.IObjectWrapper$Stub: void <init>()" [label="IObjectWrapper$Stub(<init>)",];
    "com.google.android.gms.dynamic.ObjectWrapper: void <init>(java.lang.Object)"->"com.google.android.gms.dynamic.IObjectWrapper$Stub: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.stable.zzb: void <init>(java.lang.String)" [label="zzb(<init>)",];
    "com.google.android.gms.dynamic.IObjectWrapper$Stub: void <init>()"->"com.google.android.gms.internal.stable.zzb: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: int getRemoteVersion(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule: void zza(java.lang.ClassLoader)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: int getRemoteVersion(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule: int zzb(android.content.Context,java.lang.String,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.zzh: void <init>(java.lang.String,java.lang.ClassLoader)" [label="zzh(<init>)",];
    "com.google.android.gms.dynamite.DynamiteModule: int getRemoteVersion(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.zzh: void <init>(java.lang.String,java.lang.ClassLoader)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.ads.zzjr$zza)"->"com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzamu zzif()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.ads.zzjr$zza)"->"com.google.android.gms.internal.ads.zzjr$zza: java.lang.Object zzic()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.ads.zzjr$zza)"->"com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzni zzik()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzamu: boolean zzbe(android.content.Context)" [label="zzamu(zzbe)",];
    "com.google.android.gms.internal.ads.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.ads.zzjr$zza)"->"com.google.android.gms.internal.ads.zzamu: boolean zzbe(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzamu: boolean zzbe(android.content.Context)"->"com.google.android.gms.common.GoogleApiAvailabilityLight: com.google.android.gms.common.GoogleApiAvailabilityLight getInstance()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzamu: boolean zzbe(android.content.Context)"->"com.google.android.gms.common.GoogleApiAvailabilityLight: int isGooglePlayServicesAvailable(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zznk: void initialize(android.content.Context)" [label="zznk(initialize)",];
    "com.google.android.gms.internal.ads.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.ads.zzjr$zza)"->"com.google.android.gms.internal.ads.zznk: void initialize(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zznl: void <init>(android.content.Context)" [label="zznl(<init>)",];
    "com.google.android.gms.internal.ads.zznk: void initialize(android.content.Context)"->"com.google.android.gms.internal.ads.zznl: void <init>(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zznk: void initialize(android.content.Context)"->"com.google.android.gms.internal.ads.zzaml: java.lang.Object zza(android.content.Context,java.util.concurrent.Callable)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zznk: void initialize(android.content.Context)"->"com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzni zzik()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zznk: void initialize(android.content.Context)"->"com.google.android.gms.internal.ads.zzni: java.lang.Object zzd(com.google.android.gms.internal.ads.zzna)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr$zza: java.lang.Object zzid()" [label="zzjr$zza(zzid)",];
    "com.google.android.gms.internal.ads.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.ads.zzjr$zza)"->"com.google.android.gms.internal.ads.zzjr$zza: java.lang.Object zzid()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr$zza: java.lang.Object zzid()"->"com.google.android.gms.internal.ads.zzane: void zzc(java.lang.String,java.lang.Throwable)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr$zza: java.lang.Object zzib()" [label="zzjr$zza(zzib)",];
    "com.google.android.gms.internal.ads.zzjr$zza: java.lang.Object zzid()"->"com.google.android.gms.internal.ads.zzjr$zza: java.lang.Object zzib()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.ads.zzjr$zza)"->"com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzamu zzif()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.ads.zzjr$zza)"->"com.google.android.gms.internal.ads.zzjr$zza: java.lang.Object zzid()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzane: void zzck(java.lang.String)" [label="zzane(zzck)",];
    "com.google.android.gms.internal.ads.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.ads.zzjr$zza)"->"com.google.android.gms.internal.ads.zzane: void zzck(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzane: void zzck(java.lang.String)"->"com.google.android.gms.internal.ads.zzane: boolean isLoggable(int)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: java.util.Map zzir()" [label="zzlw(zzir)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzlw: java.util.Map zzir()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzks: void setManualImpressionsEnabled(boolean)" [label="zzks(setManualImpressionsEnabled)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzks: void setManualImpressionsEnabled(boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzje: void <init>(com.google.android.gms.internal.ads.zzjd)" [label="zzje(<init>)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzje: void <init>(com.google.android.gms.internal.ads.zzjd)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzkf: void <init>()" [label="zzkf(<init>)",];
    "com.google.android.gms.internal.ads.zzje: void <init>(com.google.android.gms.internal.ads.zzjd)"->"com.google.android.gms.internal.ads.zzkf: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzkf: void <init>()"->"com.google.android.gms.internal.ads.zzek: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzmu: void <init>(com.google.android.gms.ads.VideoOptions)" [label="zzmu(<init>)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzmu: void <init>(com.google.android.gms.ads.VideoOptions)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.VideoOptions: boolean getClickToExpandRequested()" [label="VideoOptions(getClickToExpandRequested)",];
    "com.google.android.gms.internal.ads.zzmu: void <init>(com.google.android.gms.ads.VideoOptions)"->"com.google.android.gms.ads.VideoOptions: boolean getClickToExpandRequested()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzmu: void <init>(boolean,boolean,boolean)" [label="zzmu(<init>)",];
    "com.google.android.gms.internal.ads.zzmu: void <init>(com.google.android.gms.ads.VideoOptions)"->"com.google.android.gms.internal.ads.zzmu: void <init>(boolean,boolean,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzmu: void <init>(boolean,boolean,boolean)"->"com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.VideoOptions: boolean getStartMuted()" [label="VideoOptions(getStartMuted)",];
    "com.google.android.gms.internal.ads.zzmu: void <init>(com.google.android.gms.ads.VideoOptions)"->"com.google.android.gms.ads.VideoOptions: boolean getStartMuted()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.VideoOptions: boolean getCustomControlsRequested()" [label="VideoOptions(getCustomControlsRequested)",];
    "com.google.android.gms.internal.ads.zzmu: void <init>(com.google.android.gms.ads.VideoOptions)"->"com.google.android.gms.ads.VideoOptions: boolean getCustomControlsRequested()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzog: void <init>(com.google.android.gms.ads.doubleclick.OnCustomRenderedAdLoadedListener)" [label="zzog(<init>)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzog: void <init>(com.google.android.gms.ads.doubleclick.OnCustomRenderedAdLoadedListener)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzoe: void <init>()" [label="zzoe(<init>)",];
    "com.google.android.gms.internal.ads.zzog: void <init>(com.google.android.gms.ads.doubleclick.OnCustomRenderedAdLoadedListener)"->"com.google.android.gms.internal.ads.zzoe: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzoe: void <init>()"->"com.google.android.gms.internal.ads.zzek: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzks: com.google.android.gms.dynamic.IObjectWrapper zzbj()" [label="zzks(zzbj)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzks: com.google.android.gms.dynamic.IObjectWrapper zzbj()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjt: void <init>(com.google.android.gms.internal.ads.zzjr,android.content.Context,com.google.android.gms.internal.ads.zzjn,java.lang.String)" [label="zzjt(<init>)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzjt: void <init>(com.google.android.gms.internal.ads.zzjr,android.content.Context,com.google.android.gms.internal.ads.zzjn,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjr$zza: void <init>(com.google.android.gms.internal.ads.zzjr)" [label="zzjr$zza(<init>)",];
    "com.google.android.gms.internal.ads.zzjt: void <init>(com.google.android.gms.internal.ads.zzjr,android.content.Context,com.google.android.gms.internal.ads.zzjn,java.lang.String)"->"com.google.android.gms.internal.ads.zzjr$zza: void <init>(com.google.android.gms.internal.ads.zzjr)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzks: void zza(com.google.android.gms.internal.ads.zzke)" [label="zzks(zza)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzks: void zza(com.google.android.gms.internal.ads.zzke)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzks: void zza(com.google.android.gms.internal.ads.zzod)" [label="zzks(zza)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzks: void zza(com.google.android.gms.internal.ads.zzod)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzks: void zza(com.google.android.gms.internal.ads.zzla)" [label="zzks(zza)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzks: void zza(com.google.android.gms.internal.ads.zzla)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzks: boolean zzb(com.google.android.gms.internal.ads.zzjj)" [label="zzks(zzb)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzks: boolean zzb(com.google.android.gms.internal.ads.zzjj)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.ads.zzjr$zza)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjs: void <init>(com.google.android.gms.internal.ads.zzjr,android.content.Context,com.google.android.gms.internal.ads.zzjn,java.lang.String,com.google.android.gms.internal.ads.zzxn)" [label="zzjs(<init>)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzjs: void <init>(com.google.android.gms.internal.ads.zzjr,android.content.Context,com.google.android.gms.internal.ads.zzjn,java.lang.String,com.google.android.gms.internal.ads.zzxn)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjs: void <init>(com.google.android.gms.internal.ads.zzjr,android.content.Context,com.google.android.gms.internal.ads.zzjn,java.lang.String,com.google.android.gms.internal.ads.zzxn)"->"com.google.android.gms.internal.ads.zzjr$zza: void <init>(com.google.android.gms.internal.ads.zzjr)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzks: void zza(com.google.android.gms.internal.ads.zzkh)" [label="zzks(zza)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzks: void zza(com.google.android.gms.internal.ads.zzkh)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzane: void zzd(java.lang.String,java.lang.Throwable)" [label="zzane(zzd)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzane: void zzd(java.lang.String,java.lang.Throwable)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzane: java.lang.String zzdl(java.lang.String)" [label="zzane(zzdl)",];
    "com.google.android.gms.internal.ads.zzane: void zzd(java.lang.String,java.lang.Throwable)"->"com.google.android.gms.internal.ads.zzane: java.lang.String zzdl(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzane: void zzd(java.lang.String,java.lang.Throwable)"->"com.google.android.gms.internal.ads.zzane: void zzc(java.lang.String,java.lang.Throwable)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzane: void zzd(java.lang.String,java.lang.Throwable)"->"com.google.android.gms.internal.ads.zzane: boolean isLoggable(int)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzane: void zzd(java.lang.String,java.lang.Throwable)"->"com.google.android.gms.internal.ads.zzane: java.lang.String zzdl(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzane: void zzd(java.lang.String,java.lang.Throwable)"->"com.google.android.gms.internal.ads.zzane: void zzdk(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzane: void zzd(java.lang.String,java.lang.Throwable)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzjr zzig()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)" [label="zzjm(zza)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzamu zzif()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: boolean isDesignedForFamilies()" [label="zzlw(isDesignedForFamilies)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzlw: boolean isDesignedForFamilies()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: android.os.Bundle getNetworkExtrasBundle(java.lang.Class)" [label="zzlw(getNetworkExtrasBundle)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzlw: android.os.Bundle getNetworkExtrasBundle(java.lang.Class)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: android.location.Location getLocation()" [label="zzlw(getLocation)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzlw: android.location.Location getLocation()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: boolean getManualImpressionsEnabled()" [label="zzlw(getManualImpressionsEnabled)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzlw: boolean getManualImpressionsEnabled()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzamu: java.lang.String zza(java.lang.StackTraceElement[],java.lang.String)" [label="zzamu(zza)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzamu: java.lang.String zza(java.lang.StackTraceElement[],java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjj: void <init>(int,long,android.os.Bundle,int,java.util.List,boolean,int,boolean,java.lang.String,com.google.android.gms.internal.ads.zzmq,android.location.Location,java.lang.String,android.os.Bundle,android.os.Bundle,java.util.List,java.lang.String,java.lang.String,boolean)" [label="zzjj(<init>)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzjj: void <init>(int,long,android.os.Bundle,int,java.util.List,boolean,int,boolean,java.lang.String,com.google.android.gms.internal.ads.zzmq,android.location.Location,java.lang.String,android.os.Bundle,android.os.Bundle,java.util.List,java.lang.String,java.lang.String,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzjj: void <init>(int,long,android.os.Bundle,int,java.util.List,boolean,int,boolean,java.lang.String,com.google.android.gms.internal.ads.zzmq,android.location.Location,java.lang.String,android.os.Bundle,android.os.Bundle,java.util.List,java.lang.String,java.lang.String,boolean)"->"com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: java.util.Date getBirthday()" [label="zzlw(getBirthday)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzlw: java.util.Date getBirthday()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: int getGender()" [label="zzlw(getGender)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzlw: int getGender()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: int zzit()" [label="zzlw(zzit)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzlw: int zzit()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: java.lang.String zzip()" [label="zzlw(zzip)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzlw: java.lang.String zzip()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzmq: void <init>(com.google.android.gms.ads.search.SearchAdRequest)" [label="zzmq(<init>)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzmq: void <init>(com.google.android.gms.ads.search.SearchAdRequest)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.search.SearchAdRequest: java.lang.String getQuery()" [label="SearchAdRequest(getQuery)",];
    "com.google.android.gms.internal.ads.zzmq: void <init>(com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.ads.search.SearchAdRequest: java.lang.String getQuery()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzmq: void <init>(com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: android.os.Bundle getCustomTargeting()" [label="zzlw(getCustomTargeting)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzlw: android.os.Bundle getCustomTargeting()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: com.google.android.gms.ads.search.SearchAdRequest zziq()" [label="zzlw(zziq)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzlw: com.google.android.gms.ads.search.SearchAdRequest zziq()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: java.util.Set getKeywords()" [label="zzlw(getKeywords)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzlw: java.util.Set getKeywords()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: java.util.Set zziu()" [label="zzlw(zziu)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzlw: java.util.Set zziu()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: android.os.Bundle zzis()" [label="zzlw(zzis)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzlw: android.os.Bundle zzis()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: java.lang.String getPublisherProvidedId()" [label="zzlw(getPublisherProvidedId)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzlw: java.lang.String getPublisherProvidedId()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: boolean isTestDevice(android.content.Context)" [label="zzlw(isTestDevice)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzlw: boolean isTestDevice(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzamu: java.lang.String zzbc(android.content.Context)" [label="zzamu(zzbc)",];
    "com.google.android.gms.internal.ads.zzlw: boolean isTestDevice(android.content.Context)"->"com.google.android.gms.internal.ads.zzamu: java.lang.String zzbc(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzamu: java.lang.String zzde(java.lang.String)" [label="zzamu(zzde)",];
    "com.google.android.gms.internal.ads.zzamu: java.lang.String zzbc(android.content.Context)"->"com.google.android.gms.internal.ads.zzamu: java.lang.String zzde(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzamu: boolean zzsg()" [label="zzamu(zzsg)",];
    "com.google.android.gms.internal.ads.zzamu: java.lang.String zzbc(android.content.Context)"->"com.google.android.gms.internal.ads.zzamu: boolean zzsg()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: boolean isTestDevice(android.content.Context)"->"com.google.android.gms.internal.ads.zzkb: com.google.android.gms.internal.ads.zzamu zzif()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: java.lang.String getContentUrl()" [label="zzlw(getContentUrl)",];
    "com.google.android.gms.internal.ads.zzjm: com.google.android.gms.internal.ads.zzjj zza(android.content.Context,com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.internal.ads.zzlw: java.lang.String getContentUrl()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.Correlator: com.google.android.gms.internal.ads.zzkc zzaz()" [label="Correlator(zzaz)",];
    "com.google.android.gms.internal.ads.zzly: void zza(com.google.android.gms.internal.ads.zzlw)"->"com.google.android.gms.ads.Correlator: com.google.android.gms.internal.ads.zzkc zzaz()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdRequest: com.google.android.gms.internal.ads.zzlw zzay()" [label="AdRequest(zzay)",];
    "com.google.android.gms.ads.BaseAdView: void loadAd(com.google.android.gms.ads.AdRequest)"->"com.google.android.gms.ads.AdRequest: com.google.android.gms.internal.ads.zzlw zzay()" [label="SIMPLE",style=bold,color=black,];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: void <init>()" [label="CalligraphyConfig$Builder(<init>)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdRequest$Builder: com.google.android.gms.ads.AdRequest$Builder addNetworkExtrasBundle(java.lang.Class,android.os.Bundle)" [label="AdRequest$Builder(addNetworkExtrasBundle)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"com.google.android.gms.ads.AdRequest$Builder: com.google.android.gms.ads.AdRequest$Builder addNetworkExtrasBundle(java.lang.Class,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: void zza(java.lang.Class,android.os.Bundle)" [label="zzlx(zza)",];
    "com.google.android.gms.ads.AdRequest$Builder: com.google.android.gms.ads.AdRequest$Builder addNetworkExtrasBundle(java.lang.Class,android.os.Bundle)"->"com.google.android.gms.internal.ads.zzlx: void zza(java.lang.Class,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: void zzae(java.lang.String)" [label="zzlx(zzae)",];
    "com.google.android.gms.ads.AdRequest$Builder: com.google.android.gms.ads.AdRequest$Builder addNetworkExtrasBundle(java.lang.Class,android.os.Bundle)"->"com.google.android.gms.internal.ads.zzlx: void zzae(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "kotlin.jvm.internal.Intrinsics: void throwNpe()" [label="Intrinsics(throwNpe)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"kotlin.jvm.internal.Intrinsics: void throwNpe()" [label="SIMPLE",style=bold,color=black,];
    "kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)" [label="Intrinsics(sanitizeStackTrace)",];
    "kotlin.jvm.internal.Intrinsics: void throwNpe()"->"kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)" [label="SIMPLE",style=bold,color=black,];
    "kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable,java.lang.String)" [label="Intrinsics(sanitizeStackTrace)",];
    "kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)"->"kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "kotlin.KotlinNullPointerException: void <init>()" [label="KotlinNullPointerException(<init>)",];
    "kotlin.jvm.internal.Intrinsics: void throwNpe()"->"kotlin.KotlinNullPointerException: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdRequest$Builder: void <init>()" [label="AdRequest$Builder(<init>)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"com.google.android.gms.ads.AdRequest$Builder: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: void zzad(java.lang.String)" [label="zzlx(zzad)",];
    "com.google.android.gms.ads.AdRequest$Builder: void <init>()"->"com.google.android.gms.internal.ads.zzlx: void zzad(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: void <init>()" [label="zzlx(<init>)",];
    "com.google.android.gms.ads.AdRequest$Builder: void <init>()"->"com.google.android.gms.internal.ads.zzlx: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder setDefaultFontPath(java.lang.String)" [label="CalligraphyConfig$Builder(setDefaultFontPath)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder setDefaultFontPath(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: void onCreate(android.os.Bundle)" [label="AppCompatActivity(onCreate)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatActivity: void onCreate(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: void installViewFactory()" [label="AppCompatDelegate(installViewFactory)",];
    "android.support.v7.app.AppCompatActivity: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatDelegate: void installViewFactory()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: android.support.v7.app.AppCompatDelegate getDelegate()" [label="AppCompatActivity(getDelegate)",];
    "android.support.v7.app.AppCompatActivity: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatActivity: android.support.v7.app.AppCompatDelegate getDelegate()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.app.Activity,android.support.v7.app.AppCompatCallback)" [label="AppCompatDelegate(create)",];
    "android.support.v7.app.AppCompatActivity: android.support.v7.app.AppCompatDelegate getDelegate()"->"android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.app.Activity,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="AppCompatDelegate(create)",];
    "android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.app.Activity,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplV9: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="AppCompatDelegateImplV9(<init>)",];
    "android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplV9: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplBase: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="AppCompatDelegateImplBase(<init>)",];
    "android.support.v7.app.AppCompatDelegateImplV9: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplBase: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawableIfKnown(int)" [label="TintTypedArray(getDrawableIfKnown)",];
    "android.support.v7.app.AppCompatDelegateImplBase: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawableIfKnown(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)" [label="AppCompatDrawableManager(getDrawable)",];
    "android.support.v7.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawableIfKnown(int)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: void checkVectorDrawableSetup(android.content.Context)" [label="AppCompatDrawableManager(checkVectorDrawableSetup)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)"->"android.support.v7.widget.AppCompatDrawableManager: void checkVectorDrawableSetup(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)" [label="AppCompatDrawableManager(getDrawable)",];
    "android.support.v7.widget.AppCompatDrawableManager: void checkVectorDrawableSetup(android.content.Context)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: boolean isVectorDrawable(android.graphics.drawable.Drawable)" [label="AppCompatDrawableManager(isVectorDrawable)",];
    "android.support.v7.widget.AppCompatDrawableManager: void checkVectorDrawableSetup(android.content.Context)"->"android.support.v7.widget.AppCompatDrawableManager: boolean isVectorDrawable(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.ContextCompat: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)" [label="ContextCompat(getDrawable)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)"->"android.support.v4.content.ContextCompat: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)" [label="AppCompatDrawableManager(loadDrawableFromDelegates)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object get(java.lang.Object)" [label="SimpleArrayMap(get)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v4.util.SimpleArrayMap: java.lang.Object get(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)" [label="AppCompatDrawableManager(addDrawableToCache)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: void <init>()" [label="LongSparseArray(<init>)",];
    "android.support.v7.widget.AppCompatDrawableManager: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)"->"android.support.v4.util.LongSparseArray: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: void <init>(int)" [label="LongSparseArray(<init>)",];
    "android.support.v4.util.LongSparseArray: void <init>()"->"android.support.v4.util.LongSparseArray: void <init>(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.ContainerHelpers: int idealLongArraySize(int)" [label="ContainerHelpers(idealLongArraySize)",];
    "android.support.v4.util.LongSparseArray: void <init>(int)"->"android.support.v4.util.ContainerHelpers: int idealLongArraySize(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.ContainerHelpers: int idealByteArraySize(int)" [label="ContainerHelpers(idealByteArraySize)",];
    "android.support.v4.util.ContainerHelpers: int idealLongArraySize(int)"->"android.support.v4.util.ContainerHelpers: int idealByteArraySize(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: void put(long,java.lang.Object)" [label="LongSparseArray(put)",];
    "android.support.v7.widget.AppCompatDrawableManager: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)"->"android.support.v4.util.LongSparseArray: void put(long,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: void put(long,java.lang.Object)"->"android.support.v4.util.ContainerHelpers: int idealLongArraySize(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: void gc()" [label="LongSparseArray(gc)",];
    "android.support.v4.util.LongSparseArray: void put(long,java.lang.Object)"->"android.support.v4.util.LongSparseArray: void gc()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.ContainerHelpers: int binarySearch(long[],int,long)" [label="ContainerHelpers(binarySearch)",];
    "android.support.v4.util.LongSparseArray: void put(long,java.lang.Object)"->"android.support.v4.util.ContainerHelpers: int binarySearch(long[],int,long)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: void put(long,java.lang.Object)"->"android.support.v4.util.ContainerHelpers: int binarySearch(long[],int,long)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: boolean isEmpty()" [label="SimpleArrayMap(isEmpty)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v4.util.SimpleArrayMap: boolean isEmpty()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager$InflateDelegate: android.graphics.drawable.Drawable createFromXmlInner(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)" [label="AppCompatDrawableManager$InflateDelegate(createFromXmlInner)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager$InflateDelegate: android.graphics.drawable.Drawable createFromXmlInner(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: void append(int,java.lang.Object)" [label="SparseArrayCompat(append)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v4.util.SparseArrayCompat: void append(int,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: void put(int,java.lang.Object)" [label="SparseArrayCompat(put)",];
    "android.support.v4.util.SparseArrayCompat: void append(int,java.lang.Object)"->"android.support.v4.util.SparseArrayCompat: void put(int,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.ContainerHelpers: int idealIntArraySize(int)" [label="ContainerHelpers(idealIntArraySize)",];
    "android.support.v4.util.SparseArrayCompat: void append(int,java.lang.Object)"->"android.support.v4.util.ContainerHelpers: int idealIntArraySize(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: void gc()" [label="SparseArrayCompat(gc)",];
    "android.support.v4.util.SparseArrayCompat: void append(int,java.lang.Object)"->"android.support.v4.util.SparseArrayCompat: void gc()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)" [label="AppCompatDrawableManager(getCachedDrawable)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: void delete(long)" [label="LongSparseArray(delete)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)"->"android.support.v4.util.LongSparseArray: void delete(long)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: void delete(long)"->"android.support.v4.util.ContainerHelpers: int binarySearch(long[],int,long)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: java.lang.Object get(long)" [label="LongSparseArray(get)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)"->"android.support.v4.util.LongSparseArray: java.lang.Object get(long)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: java.lang.Object get(long,java.lang.Object)" [label="LongSparseArray(get)",];
    "android.support.v4.util.LongSparseArray: java.lang.Object get(long)"->"android.support.v4.util.LongSparseArray: java.lang.Object get(long,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: java.lang.Object get(long,java.lang.Object)"->"android.support.v4.util.ContainerHelpers: int binarySearch(long[],int,long)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: java.lang.Object get(int)" [label="SparseArrayCompat(get)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v4.util.SparseArrayCompat: java.lang.Object get(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: java.lang.Object get(int,java.lang.Object)" [label="SparseArrayCompat(get)",];
    "android.support.v4.util.SparseArrayCompat: java.lang.Object get(int)"->"android.support.v4.util.SparseArrayCompat: java.lang.Object get(int,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.ContainerHelpers: int binarySearch(int[],int,int)" [label="ContainerHelpers(binarySearch)",];
    "android.support.v4.util.SparseArrayCompat: java.lang.Object get(int,java.lang.Object)"->"android.support.v4.util.ContainerHelpers: int binarySearch(int[],int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v4.util.SparseArrayCompat: void append(int,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: void <init>()" [label="SparseArrayCompat(<init>)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v4.util.SparseArrayCompat: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v4.util.SimpleArrayMap: java.lang.Object get(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: long createCacheKey(android.util.TypedValue)" [label="AppCompatDrawableManager(createCacheKey)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: long createCacheKey(android.util.TypedValue)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)" [label="AppCompatDrawableManager(tintDrawable)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)" [label="AppCompatDrawableManager(setPorterDuffColorFilter)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)" [label="AppCompatDrawableManager(getPorterDuffColorFilter)",];
    "android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)" [label="AppCompatDrawableManager$ColorFilterLruCache(put)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)"->"android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: int generateCacheKey(int,android.graphics.PorterDuff$Mode)" [label="AppCompatDrawableManager$ColorFilterLruCache(generateCacheKey)",];
    "android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)"->"android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: int generateCacheKey(int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)" [label="LruCache(put)",];
    "android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)"->"android.support.v4.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)" [label="LruCache(safeSizeOf)",];
    "android.support.v4.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)"->"android.support.v4.util.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: int sizeOf(java.lang.Object,java.lang.Object)" [label="LruCache(sizeOf)",];
    "android.support.v4.util.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)"->"android.support.v4.util.LruCache: int sizeOf(java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)"->"android.support.v4.util.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)" [label="LruCache(entryRemoved)",];
    "android.support.v4.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)"->"android.support.v4.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: void trimToSize(int)" [label="LruCache(trimToSize)",];
    "android.support.v4.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)"->"android.support.v4.util.LruCache: void trimToSize(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: void trimToSize(int)"->"android.support.v4.util.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: void trimToSize(int)"->"android.support.v4.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)" [label="AppCompatDrawableManager$ColorFilterLruCache(get)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)"->"android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: java.lang.Object get(java.lang.Object)" [label="LruCache(get)",];
    "android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)"->"android.support.v4.util.LruCache: java.lang.Object get(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: java.lang.Object get(java.lang.Object)"->"android.support.v4.util.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: java.lang.Object get(java.lang.Object)"->"android.support.v4.util.LruCache: void trimToSize(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: java.lang.Object get(java.lang.Object)"->"android.support.v4.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: java.lang.Object create(java.lang.Object)" [label="LruCache(create)",];
    "android.support.v4.util.LruCache: java.lang.Object get(java.lang.Object)"->"android.support.v4.util.LruCache: java.lang.Object create(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)"->"android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: int generateCacheKey(int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)" [label="DrawableUtils(canSafelyMutateDrawable)",];
    "android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)"->"android.support.v7.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)" [label="DrawableCompat(setTintMode)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableCompat$DrawableCompatBaseImpl: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)" [label="DrawableCompat$DrawableCompatBaseImpl(setTintMode)",];
    "android.support.v4.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)"->"android.support.v4.graphics.drawable.DrawableCompat$DrawableCompatBaseImpl: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.TintAwareDrawable: void setTintMode(android.graphics.PorterDuff$Mode)" [label="TintAwareDrawable(setTintMode)",];
    "android.support.v4.graphics.drawable.DrawableCompat$DrawableCompatBaseImpl: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)"->"android.support.v4.graphics.drawable.TintAwareDrawable: void setTintMode(android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)" [label="AppCompatDrawableManager(tintDrawableUsingColorFilter)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: boolean arrayContains(int[],int)" [label="AppCompatDrawableManager(arrayContains)",];
    "android.support.v7.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: boolean arrayContains(int[],int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: boolean arrayContains(int[],int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)"->"android.support.v7.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: boolean arrayContains(int[],int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="ThemeUtils(getThemeAttrColor)",];
    "android.support.v7.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)" [label="DrawableCompat(setTintList)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableCompat$DrawableCompatBaseImpl: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)" [label="DrawableCompat$DrawableCompatBaseImpl(setTintList)",];
    "android.support.v4.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)"->"android.support.v4.graphics.drawable.DrawableCompat$DrawableCompatBaseImpl: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.TintAwareDrawable: void setTintList(android.content.res.ColorStateList)" [label="TintAwareDrawable(setTintList)",];
    "android.support.v4.graphics.drawable.DrawableCompat$DrawableCompatBaseImpl: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)"->"android.support.v4.graphics.drawable.TintAwareDrawable: void setTintList(android.content.res.ColorStateList)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableCompat: android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable)" [label="DrawableCompat(wrap)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableCompat: android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableCompat$DrawableCompatBaseImpl: android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable)" [label="DrawableCompat$DrawableCompatBaseImpl(wrap)",];
    "android.support.v4.graphics.drawable.DrawableCompat: android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableCompat$DrawableCompatBaseImpl: android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14: void <init>(android.graphics.drawable.Drawable)" [label="DrawableWrapperApi14(<init>)",];
    "android.support.v4.graphics.drawable.DrawableCompat$DrawableCompatBaseImpl: android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableWrapperApi14: void <init>(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14: void setWrappedDrawable(android.graphics.drawable.Drawable)" [label="DrawableWrapperApi14(setWrappedDrawable)",];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14: void <init>(android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableWrapperApi14: void setWrappedDrawable(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14: boolean setVisible(boolean,boolean)" [label="DrawableWrapperApi14(setVisible)",];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14: void setWrappedDrawable(android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableWrapperApi14: boolean setVisible(boolean,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14: boolean setState(int[])" [label="DrawableWrapperApi14(setState)",];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14: void setWrappedDrawable(android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableWrapperApi14: boolean setState(int[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14: boolean updateTint(int[])" [label="DrawableWrapperApi14(updateTint)",];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14: boolean setState(int[])"->"android.support.v4.graphics.drawable.DrawableWrapperApi14: boolean updateTint(int[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14: boolean isCompatTintEnabled()" [label="DrawableWrapperApi14(isCompatTintEnabled)",];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14: boolean updateTint(int[])"->"android.support.v4.graphics.drawable.DrawableWrapperApi14: boolean isCompatTintEnabled()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14: android.support.v4.graphics.drawable.DrawableWrapperApi14$DrawableWrapperState mutateConstantState()" [label="DrawableWrapperApi14(mutateConstantState)",];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14: void <init>(android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableWrapperApi14: android.support.v4.graphics.drawable.DrawableWrapperApi14$DrawableWrapperState mutateConstantState()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14$DrawableWrapperStateBase: void <init>(android.support.v4.graphics.drawable.DrawableWrapperApi14$DrawableWrapperState,android.content.res.Resources)" [label="DrawableWrapperApi14$DrawableWrapperStateBase(<init>)",];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14: android.support.v4.graphics.drawable.DrawableWrapperApi14$DrawableWrapperState mutateConstantState()"->"android.support.v4.graphics.drawable.DrawableWrapperApi14$DrawableWrapperStateBase: void <init>(android.support.v4.graphics.drawable.DrawableWrapperApi14$DrawableWrapperState,android.content.res.Resources)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14$DrawableWrapperState: void <init>(android.support.v4.graphics.drawable.DrawableWrapperApi14$DrawableWrapperState,android.content.res.Resources)" [label="DrawableWrapperApi14$DrawableWrapperState(<init>)",];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14$DrawableWrapperStateBase: void <init>(android.support.v4.graphics.drawable.DrawableWrapperApi14$DrawableWrapperState,android.content.res.Resources)"->"android.support.v4.graphics.drawable.DrawableWrapperApi14$DrawableWrapperState: void <init>(android.support.v4.graphics.drawable.DrawableWrapperApi14$DrawableWrapperState,android.content.res.Resources)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)" [label="AppCompatDrawableManager(getTintList)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)" [label="AppCompatResources(getColorStateList)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)"->"android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatResources: void addColorStateListToCache(android.content.Context,int,android.content.res.ColorStateList)" [label="AppCompatResources(addColorStateListToCache)",];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)"->"android.support.v7.content.res.AppCompatResources: void addColorStateListToCache(android.content.Context,int,android.content.res.ColorStateList)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatResources$ColorStateListCacheEntry: void <init>(android.content.res.ColorStateList,android.content.res.Configuration)" [label="AppCompatResources$ColorStateListCacheEntry(<init>)",];
    "android.support.v7.content.res.AppCompatResources: void addColorStateListToCache(android.content.Context,int,android.content.res.ColorStateList)"->"android.support.v7.content.res.AppCompatResources$ColorStateListCacheEntry: void <init>(android.content.res.ColorStateList,android.content.res.Configuration)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList inflateColorStateList(android.content.Context,int)" [label="AppCompatResources(inflateColorStateList)",];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)"->"android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList inflateColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)" [label="AppCompatColorStateListInflater(createFromXml)",];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList inflateColorStateList(android.content.Context,int)"->"android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)" [label="AppCompatColorStateListInflater(createFromXmlInner)",];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)"->"android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)" [label="AppCompatColorStateListInflater(inflate)",];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)"->"android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])" [label="AppCompatColorStateListInflater(obtainAttributes)",];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)"->"android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatColorStateListInflater: int modulateColorAlpha(int,float)" [label="AppCompatColorStateListInflater(modulateColorAlpha)",];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)"->"android.support.v7.content.res.AppCompatColorStateListInflater: int modulateColorAlpha(int,float)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.ColorUtils: int setAlphaComponent(int,int)" [label="ColorUtils(setAlphaComponent)",];
    "android.support.v7.content.res.AppCompatColorStateListInflater: int modulateColorAlpha(int,float)"->"android.support.v4.graphics.ColorUtils: int setAlphaComponent(int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.GrowingArrayUtils: int[] append(int[],int,int)" [label="GrowingArrayUtils(append)",];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)"->"android.support.v7.content.res.GrowingArrayUtils: int[] append(int[],int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.GrowingArrayUtils: int growSize(int)" [label="GrowingArrayUtils(growSize)",];
    "android.support.v7.content.res.GrowingArrayUtils: int[] append(int[],int,int)"->"android.support.v7.content.res.GrowingArrayUtils: int growSize(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.GrowingArrayUtils: java.lang.Object[] append(java.lang.Object[],int,java.lang.Object)" [label="GrowingArrayUtils(append)",];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)"->"android.support.v7.content.res.GrowingArrayUtils: java.lang.Object[] append(java.lang.Object[],int,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.GrowingArrayUtils: java.lang.Object[] append(java.lang.Object[],int,java.lang.Object)"->"android.support.v7.content.res.GrowingArrayUtils: int growSize(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatResources: boolean isColorInt(android.content.Context,int)" [label="AppCompatResources(isColorInt)",];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList inflateColorStateList(android.content.Context,int)"->"android.support.v7.content.res.AppCompatResources: boolean isColorInt(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatResources: android.util.TypedValue getTypedValue()" [label="AppCompatResources(getTypedValue)",];
    "android.support.v7.content.res.AppCompatResources: boolean isColorInt(android.content.Context,int)"->"android.support.v7.content.res.AppCompatResources: android.util.TypedValue getTypedValue()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.ContextCompat: android.content.res.ColorStateList getColorStateList(android.content.Context,int)" [label="ContextCompat(getColorStateList)",];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)"->"android.support.v4.content.ContextCompat: android.content.res.ColorStateList getColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getCachedColorStateList(android.content.Context,int)" [label="AppCompatResources(getCachedColorStateList)",];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)"->"android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getCachedColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: void addTintListToCache(android.content.Context,int,android.content.res.ColorStateList)" [label="AppCompatDrawableManager(addTintListToCache)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: void addTintListToCache(android.content.Context,int,android.content.res.ColorStateList)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: void addTintListToCache(android.content.Context,int,android.content.res.ColorStateList)"->"android.support.v4.util.SparseArrayCompat: void append(int,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: void addTintListToCache(android.content.Context,int,android.content.res.ColorStateList)"->"android.support.v4.util.SparseArrayCompat: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)"->"android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createBorderlessButtonColorStateList(android.content.Context)" [label="AppCompatDrawableManager(createBorderlessButtonColorStateList)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createBorderlessButtonColorStateList(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)" [label="AppCompatDrawableManager(createButtonColorStateList)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createBorderlessButtonColorStateList(android.content.Context)"->"android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.ColorUtils: int compositeColors(int,int)" [label="ColorUtils(compositeColors)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)"->"android.support.v4.graphics.ColorUtils: int compositeColors(int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.ColorUtils: int compositeComponent(int,int,int,int,int)" [label="ColorUtils(compositeComponent)",];
    "android.support.v4.graphics.ColorUtils: int compositeColors(int,int)"->"android.support.v4.graphics.ColorUtils: int compositeComponent(int,int,int,int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.ColorUtils: int compositeColors(int,int)"->"android.support.v4.graphics.ColorUtils: int compositeComponent(int,int,int,int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.ColorUtils: int compositeColors(int,int)"->"android.support.v4.graphics.ColorUtils: int compositeComponent(int,int,int,int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.ColorUtils: int compositeAlpha(int,int)" [label="ColorUtils(compositeAlpha)",];
    "android.support.v4.graphics.ColorUtils: int compositeColors(int,int)"->"android.support.v4.graphics.ColorUtils: int compositeAlpha(int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)" [label="ThemeUtils(getDisabledThemeAttrColor)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)"->"android.support.v7.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)"->"android.support.v4.graphics.ColorUtils: int compositeColors(int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)" [label="ThemeUtils(getThemeAttrColorStateList)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)"->"android.support.v7.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintTypedArray: android.support.v7.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])" [label="TintTypedArray(obtainStyledAttributes)",];
    "android.support.v7.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)"->"android.support.v7.widget.TintTypedArray: android.support.v7.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintTypedArray: android.content.res.ColorStateList getColorStateList(int)" [label="TintTypedArray(getColorStateList)",];
    "android.support.v7.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)"->"android.support.v7.widget.TintTypedArray: android.content.res.ColorStateList getColorStateList(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintTypedArray: android.content.res.ColorStateList getColorStateList(int)"->"android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintTypedArray: void recycle()" [label="TintTypedArray(recycle)",];
    "android.support.v7.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)"->"android.support.v7.widget.TintTypedArray: void recycle()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)"->"android.support.v7.widget.TintTypedArray: void recycle()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createDefaultButtonColorStateList(android.content.Context)" [label="AppCompatDrawableManager(createDefaultButtonColorStateList)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createDefaultButtonColorStateList(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createDefaultButtonColorStateList(android.content.Context)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createDefaultButtonColorStateList(android.content.Context)"->"android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createColoredButtonColorStateList(android.content.Context)" [label="AppCompatDrawableManager(createColoredButtonColorStateList)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createColoredButtonColorStateList(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createColoredButtonColorStateList(android.content.Context)"->"android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createColoredButtonColorStateList(android.content.Context)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: boolean arrayContains(int[],int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)"->"android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: boolean arrayContains(int[],int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)"->"android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)"->"android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintListFromCache(android.content.Context,int)" [label="AppCompatDrawableManager(getTintListFromCache)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintListFromCache(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintListFromCache(android.content.Context,int)"->"android.support.v4.util.SparseArrayCompat: java.lang.Object get(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: boolean arrayContains(int[],int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)"->"android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context)" [label="AppCompatDrawableManager(createSwitchThumbColorStateList)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context)"->"android.support.v7.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context)"->"android.support.v7.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode getTintMode(int)" [label="AppCompatDrawableManager(getTintMode)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode getTintMode(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)" [label="AppCompatDrawableManager(createDrawableIfNeeded)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: long createCacheKey(android.util.TypedValue)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)" [label="DrawableUtils(fixDrawable)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)"->"android.support.v7.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.DrawableUtils: void fixVectorDrawableTinting(android.graphics.drawable.Drawable)" [label="DrawableUtils(fixVectorDrawableTinting)",];
    "android.support.v7.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)"->"android.support.v7.widget.DrawableUtils: void fixVectorDrawableTinting(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.support.v7.widget.AppCompatDrawableManager get()" [label="AppCompatDrawableManager(get)",];
    "android.support.v7.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawableIfKnown(int)"->"android.support.v7.widget.AppCompatDrawableManager: android.support.v7.widget.AppCompatDrawableManager get()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: void installDefaultInflateDelegates(android.support.v7.widget.AppCompatDrawableManager)" [label="AppCompatDrawableManager(installDefaultInflateDelegates)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.support.v7.widget.AppCompatDrawableManager get()"->"android.support.v7.widget.AppCompatDrawableManager: void installDefaultInflateDelegates(android.support.v7.widget.AppCompatDrawableManager)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager$AvdcInflateDelegate: void <init>()" [label="AppCompatDrawableManager$AvdcInflateDelegate(<init>)",];
    "android.support.v7.widget.AppCompatDrawableManager: void installDefaultInflateDelegates(android.support.v7.widget.AppCompatDrawableManager)"->"android.support.v7.widget.AppCompatDrawableManager$AvdcInflateDelegate: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager$VdcInflateDelegate: void <init>()" [label="AppCompatDrawableManager$VdcInflateDelegate(<init>)",];
    "android.support.v7.widget.AppCompatDrawableManager: void installDefaultInflateDelegates(android.support.v7.widget.AppCompatDrawableManager)"->"android.support.v7.widget.AppCompatDrawableManager$VdcInflateDelegate: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: void addDelegate(java.lang.String,android.support.v7.widget.AppCompatDrawableManager$InflateDelegate)" [label="AppCompatDrawableManager(addDelegate)",];
    "android.support.v7.widget.AppCompatDrawableManager: void installDefaultInflateDelegates(android.support.v7.widget.AppCompatDrawableManager)"->"android.support.v7.widget.AppCompatDrawableManager: void addDelegate(java.lang.String,android.support.v7.widget.AppCompatDrawableManager$InflateDelegate)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.ArrayMap: void <init>()" [label="ArrayMap(<init>)",];
    "android.support.v7.widget.AppCompatDrawableManager: void addDelegate(java.lang.String,android.support.v7.widget.AppCompatDrawableManager$InflateDelegate)"->"android.support.v4.util.ArrayMap: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: void <init>()" [label="SimpleArrayMap(<init>)",];
    "android.support.v4.util.ArrayMap: void <init>()"->"android.support.v4.util.SimpleArrayMap: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)" [label="SimpleArrayMap(put)",];
    "android.support.v7.widget.AppCompatDrawableManager: void addDelegate(java.lang.String,android.support.v7.widget.AppCompatDrawableManager$InflateDelegate)"->"android.support.v4.util.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: void installDefaultInflateDelegates(android.support.v7.widget.AppCompatDrawableManager)"->"android.support.v7.widget.AppCompatDrawableManager: void addDelegate(java.lang.String,android.support.v7.widget.AppCompatDrawableManager$InflateDelegate)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: void <init>()" [label="AppCompatDrawableManager(<init>)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.support.v7.widget.AppCompatDrawableManager get()"->"android.support.v7.widget.AppCompatDrawableManager: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplBase: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.widget.TintTypedArray: android.support.v7.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: void <init>()" [label="AppCompatDelegate(<init>)",];
    "android.support.v7.app.AppCompatDelegateImplBase: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegate: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplBase: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.widget.TintTypedArray: void recycle()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplBase: android.view.Window$Callback wrapWindowCallback(android.view.Window$Callback)" [label="AppCompatDelegateImplBase(wrapWindowCallback)",];
    "android.support.v7.app.AppCompatDelegateImplBase: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplBase: android.view.Window$Callback wrapWindowCallback(android.view.Window$Callback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplBase$AppCompatWindowCallbackBase: void <init>(android.support.v7.app.AppCompatDelegateImplBase,android.view.Window$Callback)" [label="AppCompatDelegateImplBase$AppCompatWindowCallbackBase(<init>)",];
    "android.support.v7.app.AppCompatDelegateImplBase: android.view.Window$Callback wrapWindowCallback(android.view.Window$Callback)"->"android.support.v7.app.AppCompatDelegateImplBase$AppCompatWindowCallbackBase: void <init>(android.support.v7.app.AppCompatDelegateImplBase,android.view.Window$Callback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.view.WindowCallbackWrapper: void <init>(android.view.Window$Callback)" [label="WindowCallbackWrapper(<init>)",];
    "android.support.v7.app.AppCompatDelegateImplBase$AppCompatWindowCallbackBase: void <init>(android.support.v7.app.AppCompatDelegateImplBase,android.view.Window$Callback)"->"android.support.v7.view.WindowCallbackWrapper: void <init>(android.view.Window$Callback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplV9$1: void <init>(android.support.v7.app.AppCompatDelegateImplV9)" [label="AppCompatDelegateImplV9$1(<init>)",];
    "android.support.v7.app.AppCompatDelegateImplV9: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplV9$1: void <init>(android.support.v7.app.AppCompatDelegateImplV9)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplV11: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="AppCompatDelegateImplV11(<init>)",];
    "android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplV11: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplV11: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplV9: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplV23: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="AppCompatDelegateImplV23(<init>)",];
    "android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplV23: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplV14: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="AppCompatDelegateImplV14(<init>)",];
    "android.support.v7.app.AppCompatDelegateImplV23: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplV14: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplV14: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplV11: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplV14: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplN: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="AppCompatDelegateImplN(<init>)",];
    "android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplN: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplN: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplV23: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: void onCreate(android.os.Bundle)" [label="AppCompatDelegate(onCreate)",];
    "android.support.v7.app.AppCompatActivity: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatDelegate: void onCreate(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)" [label="FragmentActivity(onCreate)",];
    "android.support.v7.app.AppCompatActivity: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.SupportActivity: void onCreate(android.os.Bundle)" [label="SupportActivity(onCreate)",];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)"->"android.support.v4.app.SupportActivity: void onCreate(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)" [label="ReportFragment(injectIfNeededIn)",];
    "android.support.v4.app.SupportActivity: void onCreate(android.os.Bundle)"->"android.arch.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.ReportFragment: void <init>()" [label="ReportFragment(<init>)",];
    "android.arch.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)"->"android.arch.lifecycle.ReportFragment: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentController: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)" [label="FragmentController(restoreLoaderNonConfig)",];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentController: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)" [label="FragmentHostCallback(restoreLoaderNonConfig)",];
    "android.support.v4.app.FragmentController: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)"->"android.support.v4.app.FragmentHostCallback: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object valueAt(int)" [label="SimpleArrayMap(valueAt)",];
    "android.support.v4.app.FragmentHostCallback: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)"->"android.support.v4.util.SimpleArrayMap: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void updateHostController(android.support.v4.app.FragmentHostCallback)" [label="LoaderManagerImpl(updateHostController)",];
    "android.support.v4.app.FragmentHostCallback: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)"->"android.support.v4.app.LoaderManagerImpl: void updateHostController(android.support.v4.app.FragmentHostCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: int size()" [label="SimpleArrayMap(size)",];
    "android.support.v4.app.FragmentHostCallback: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)"->"android.support.v4.util.SimpleArrayMap: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentController: void dispatchCreate()" [label="FragmentController(dispatchCreate)",];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentController: void dispatchCreate()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchCreate()" [label="FragmentManagerImpl(dispatchCreate)",];
    "android.support.v4.app.FragmentController: void dispatchCreate()"->"android.support.v4.app.FragmentManagerImpl: void dispatchCreate()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)" [label="FragmentManagerImpl(dispatchStateChange)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchCreate()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(int,boolean)" [label="FragmentManagerImpl(moveToState)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)"->"android.support.v4.app.FragmentManagerImpl: void moveToState(int,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)" [label="FragmentManagerImpl(moveFragmentToExpectedState)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)" [label="FragmentManagerImpl(loadAnimation)",];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)" [label="Fragment(onCreateAnimator)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="FragmentHostCallback(getContext)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(android.content.Context,float,float,float,float)" [label="FragmentManagerImpl(makeOpenCloseAnimation)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(android.content.Context,float,float,float,float)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.view.animation.Animation,android.support.v4.app.FragmentManagerImpl$1)" [label="FragmentManagerImpl$AnimationOrAnimator(<init>)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(android.content.Context,float,float,float,float)"->"android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.view.animation.Animation,android.support.v4.app.FragmentManagerImpl$1)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeFadeAnimation(android.content.Context,float,float)" [label="FragmentManagerImpl(makeFadeAnimation)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeFadeAnimation(android.content.Context,float,float)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeFadeAnimation(android.content.Context,float,float)"->"android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.view.animation.Animation,android.support.v4.app.FragmentManagerImpl$1)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(android.content.Context,float,float,float,float)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.view.animation.Animation,android.support.v4.app.FragmentManagerImpl$1)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeFadeAnimation(android.content.Context,float,float)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(android.content.Context,float,float,float,float)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.view.animation.Animation,android.support.v4.app.FragmentManagerImpl$1)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.animation.Animator,android.support.v4.app.FragmentManagerImpl$1)" [label="FragmentManagerImpl$AnimationOrAnimator(<init>)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.animation.Animator,android.support.v4.app.FragmentManagerImpl$1)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.animation.Animator)" [label="FragmentManagerImpl$AnimationOrAnimator(<init>)",];
    "android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.animation.Animator,android.support.v4.app.FragmentManagerImpl$1)"->"android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.animation.Animator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.view.animation.Animation,android.support.v4.app.FragmentManagerImpl$1)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: int transitToStyleIndex(int,boolean)" [label="FragmentManagerImpl(transitToStyleIndex)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl: int transitToStyleIndex(int,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.view.animation.Animation onCreateAnimation(int,boolean,int)" [label="Fragment(onCreateAnimation)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.Fragment: android.view.animation.Animation onCreateAnimation(int,boolean,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: boolean onHasWindowAnimations()" [label="FragmentHostCallback(onHasWindowAnimations)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: boolean onHasWindowAnimations()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.animation.Animator,android.support.v4.app.FragmentManagerImpl$1)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(android.content.Context,float,float,float,float)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: int getNextAnim()" [label="Fragment(getNextAnim)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.Fragment: int getNextAnim()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: int onGetWindowAnimations()" [label="FragmentHostCallback(onGetWindowAnimations)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: int onGetWindowAnimations()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: int getNextTransition()" [label="Fragment(getNextTransition)",];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: int getNextTransition()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: int getNextTransition()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: int getNextTransitionStyle()" [label="Fragment(getNextTransitionStyle)",];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: int getNextTransitionStyle()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.Fragment findFragmentUnder(android.support.v4.app.Fragment)" [label="FragmentManagerImpl(findFragmentUnder)",];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.Fragment findFragmentUnder(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: boolean isInBackStack()" [label="Fragment(isInBackStack)",];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: boolean isInBackStack()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)" [label="FragmentManagerImpl(moveToState)",];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: boolean isInBackStack()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performStop()" [label="Fragment(performStop)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performStop()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchStop()" [label="FragmentManagerImpl(dispatchStop)",];
    "android.support.v4.app.Fragment: void performStop()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStop()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchStop()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)" [label="LifecycleRegistry(handleLifecycleEvent)",];
    "android.support.v4.app.Fragment: void performStop()"->"android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State getStateAfter(android.arch.lifecycle.Lifecycle$Event)" [label="LifecycleRegistry(getStateAfter)",];
    "android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)"->"android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State getStateAfter(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void sync()" [label="LifecycleRegistry(sync)",];
    "android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)"->"android.arch.lifecycle.LifecycleRegistry: void sync()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void forwardPass()" [label="LifecycleRegistry(forwardPass)",];
    "android.arch.lifecycle.LifecycleRegistry: void sync()"->"android.arch.lifecycle.LifecycleRegistry: void forwardPass()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void popParentState()" [label="LifecycleRegistry(popParentState)",];
    "android.arch.lifecycle.LifecycleRegistry: void forwardPass()"->"android.arch.lifecycle.LifecycleRegistry: void popParentState()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)" [label="LifecycleRegistry$ObserverWithState(dispatchEvent)",];
    "android.arch.lifecycle.LifecycleRegistry: void forwardPass()"->"android.arch.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)"->"android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State getStateAfter(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State min(android.arch.lifecycle.Lifecycle$State,android.arch.lifecycle.Lifecycle$State)" [label="LifecycleRegistry(min)",];
    "android.arch.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)"->"android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State min(android.arch.lifecycle.Lifecycle$State,android.arch.lifecycle.Lifecycle$State)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.GenericLifecycleObserver: void onStateChanged(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)" [label="GenericLifecycleObserver(onStateChanged)",];
    "android.arch.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)"->"android.arch.lifecycle.GenericLifecycleObserver: void onStateChanged(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void pushParentState(android.arch.lifecycle.Lifecycle$State)" [label="LifecycleRegistry(pushParentState)",];
    "android.arch.lifecycle.LifecycleRegistry: void forwardPass()"->"android.arch.lifecycle.LifecycleRegistry: void pushParentState(android.arch.lifecycle.Lifecycle$State)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$Event upEvent(android.arch.lifecycle.Lifecycle$State)" [label="LifecycleRegistry(upEvent)",];
    "android.arch.lifecycle.LifecycleRegistry: void forwardPass()"->"android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$Event upEvent(android.arch.lifecycle.Lifecycle$State)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)" [label="FastSafeIterableMap(contains)",];
    "android.arch.lifecycle.LifecycleRegistry: void forwardPass()"->"android.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap: android.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()" [label="SafeIterableMap(iteratorWithAdditions)",];
    "android.arch.lifecycle.LifecycleRegistry: void forwardPass()"->"android.arch.core.internal.SafeIterableMap: android.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap$IteratorWithAdditions: void <init>(android.arch.core.internal.SafeIterableMap,android.arch.core.internal.SafeIterableMap$1)" [label="SafeIterableMap$IteratorWithAdditions(<init>)",];
    "android.arch.core.internal.SafeIterableMap: android.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()"->"android.arch.core.internal.SafeIterableMap$IteratorWithAdditions: void <init>(android.arch.core.internal.SafeIterableMap,android.arch.core.internal.SafeIterableMap$1)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap$IteratorWithAdditions: void <init>(android.arch.core.internal.SafeIterableMap)" [label="SafeIterableMap$IteratorWithAdditions(<init>)",];
    "android.arch.core.internal.SafeIterableMap$IteratorWithAdditions: void <init>(android.arch.core.internal.SafeIterableMap,android.arch.core.internal.SafeIterableMap$1)"->"android.arch.core.internal.SafeIterableMap$IteratorWithAdditions: void <init>(android.arch.core.internal.SafeIterableMap)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: boolean isSynced()" [label="LifecycleRegistry(isSynced)",];
    "android.arch.lifecycle.LifecycleRegistry: void sync()"->"android.arch.lifecycle.LifecycleRegistry: boolean isSynced()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap: java.util.Map$Entry newest()" [label="SafeIterableMap(newest)",];
    "android.arch.lifecycle.LifecycleRegistry: boolean isSynced()"->"android.arch.core.internal.SafeIterableMap: java.util.Map$Entry newest()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap: java.util.Map$Entry eldest()" [label="SafeIterableMap(eldest)",];
    "android.arch.lifecycle.LifecycleRegistry: boolean isSynced()"->"android.arch.core.internal.SafeIterableMap: java.util.Map$Entry eldest()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap: int size()" [label="SafeIterableMap(size)",];
    "android.arch.lifecycle.LifecycleRegistry: boolean isSynced()"->"android.arch.core.internal.SafeIterableMap: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void sync()"->"android.arch.core.internal.SafeIterableMap: java.util.Map$Entry newest()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void backwardPass()" [label="LifecycleRegistry(backwardPass)",];
    "android.arch.lifecycle.LifecycleRegistry: void sync()"->"android.arch.lifecycle.LifecycleRegistry: void backwardPass()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void backwardPass()"->"android.arch.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$Event downEvent(android.arch.lifecycle.Lifecycle$State)" [label="LifecycleRegistry(downEvent)",];
    "android.arch.lifecycle.LifecycleRegistry: void backwardPass()"->"android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$Event downEvent(android.arch.lifecycle.Lifecycle$State)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void backwardPass()"->"android.arch.lifecycle.LifecycleRegistry: void popParentState()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void backwardPass()"->"android.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void backwardPass()"->"android.arch.lifecycle.LifecycleRegistry: void pushParentState(android.arch.lifecycle.Lifecycle$State)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void backwardPass()"->"android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State getStateAfter(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap: java.util.Iterator descendingIterator()" [label="SafeIterableMap(descendingIterator)",];
    "android.arch.lifecycle.LifecycleRegistry: void backwardPass()"->"android.arch.core.internal.SafeIterableMap: java.util.Iterator descendingIterator()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap$DescendingIterator: void <init>(android.arch.core.internal.SafeIterableMap$Entry,android.arch.core.internal.SafeIterableMap$Entry)" [label="SafeIterableMap$DescendingIterator(<init>)",];
    "android.arch.core.internal.SafeIterableMap: java.util.Iterator descendingIterator()"->"android.arch.core.internal.SafeIterableMap$DescendingIterator: void <init>(android.arch.core.internal.SafeIterableMap$Entry,android.arch.core.internal.SafeIterableMap$Entry)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap$ListIterator: void <init>(android.arch.core.internal.SafeIterableMap$Entry,android.arch.core.internal.SafeIterableMap$Entry)" [label="SafeIterableMap$ListIterator(<init>)",];
    "android.arch.core.internal.SafeIterableMap$DescendingIterator: void <init>(android.arch.core.internal.SafeIterableMap$Entry,android.arch.core.internal.SafeIterableMap$Entry)"->"android.arch.core.internal.SafeIterableMap$ListIterator: void <init>(android.arch.core.internal.SafeIterableMap$Entry,android.arch.core.internal.SafeIterableMap$Entry)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void sync()"->"android.arch.core.internal.SafeIterableMap: java.util.Map$Entry eldest()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onStop()" [label="Fragment(onStop)",];
    "android.support.v4.app.Fragment: void performStop()"->"android.support.v4.app.Fragment: void onStop()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SuperNotCalledException(<init>)",];
    "android.support.v4.app.Fragment: void performStop()"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle)" [label="Fragment(performGetLayoutInflater)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)" [label="Fragment(onGetLayoutInflater)",];
    "android.support.v4.app.Fragment: android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle)"->"android.support.v4.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)" [label="Fragment(getLayoutInflater)",];
    "android.support.v4.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)"->"android.support.v4.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getChildFragmentManager()" [label="Fragment(getChildFragmentManager)",];
    "android.support.v4.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getChildFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchResume()" [label="FragmentManagerImpl(dispatchResume)",];
    "android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getChildFragmentManager()"->"android.support.v4.app.FragmentManagerImpl: void dispatchResume()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchActivityCreated()" [label="FragmentManagerImpl(dispatchActivityCreated)",];
    "android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getChildFragmentManager()"->"android.support.v4.app.FragmentManagerImpl: void dispatchActivityCreated()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getChildFragmentManager()"->"android.support.v4.app.FragmentManagerImpl: void dispatchCreate()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void instantiateChildFragmentManager()" [label="Fragment(instantiateChildFragmentManager)",];
    "android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getChildFragmentManager()"->"android.support.v4.app.Fragment: void instantiateChildFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchStart()" [label="FragmentManagerImpl(dispatchStart)",];
    "android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getChildFragmentManager()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStart()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.LayoutInflaterCompat: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)" [label="LayoutInflaterCompat(setFactory2)",];
    "android.support.v4.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)"->"android.support.v4.view.LayoutInflaterCompat: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatBaseImpl: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)" [label="LayoutInflaterCompat$LayoutInflaterCompatBaseImpl(setFactory2)",];
    "android.support.v4.view.LayoutInflaterCompat: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)"->"android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatBaseImpl: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.LayoutInflaterCompat: void forceSetFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)" [label="LayoutInflaterCompat(forceSetFactory2)",];
    "android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatBaseImpl: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)"->"android.support.v4.view.LayoutInflaterCompat: void forceSetFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatBaseImpl: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)"->"android.support.v4.view.LayoutInflaterCompat: void forceSetFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: android.view.LayoutInflater onGetLayoutInflater()" [label="FragmentHostCallback(onGetLayoutInflater)",];
    "android.support.v4.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)"->"android.support.v4.app.FragmentHostCallback: android.view.LayoutInflater onGetLayoutInflater()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.view.LayoutInflater$Factory2 getLayoutInflaterFactory()" [label="FragmentManagerImpl(getLayoutInflaterFactory)",];
    "android.support.v4.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)"->"android.support.v4.app.FragmentManagerImpl: android.view.LayoutInflater$Factory2 getLayoutInflaterFactory()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: void onAttachFragment(android.support.v4.app.Fragment)" [label="FragmentHostCallback(onAttachFragment)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentHostCallback: void onAttachFragment(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentPreCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="Fragment(getFragmentManager)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreCreated(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.os.Bundle)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentPreCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreCreated(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStopped(android.support.v4.app.Fragment,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentStopped)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStopped(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStopped(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStopped(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStopped(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStopped(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentStopped)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStopped(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStopped(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performDetach()" [label="Fragment(performDetach)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performDetach()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onDetach()" [label="Fragment(onDetach)",];
    "android.support.v4.app.Fragment: void performDetach()"->"android.support.v4.app.Fragment: void onDetach()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchDestroy()" [label="FragmentManagerImpl(dispatchDestroy)",];
    "android.support.v4.app.Fragment: void performDetach()"->"android.support.v4.app.FragmentManagerImpl: void dispatchDestroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchDestroy()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: boolean execPendingActions()" [label="FragmentManagerImpl(execPendingActions)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchDestroy()"->"android.support.v4.app.FragmentManagerImpl: boolean execPendingActions()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performDetach()"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.content.res.Resources getResources()" [label="Fragment(getResources)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.content.res.Resources getResources()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.content.res.Resources getResources()"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDestroyed(android.support.v4.app.Fragment,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentDestroyed)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDestroyed(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDestroyed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDestroyed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDestroyed(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDestroyed(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentDestroyed)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDestroyed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDestroyed(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void restoreViewState(android.os.Bundle)" [label="Fragment(restoreViewState)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void restoreViewState(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void restoreViewState(android.os.Bundle)"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onViewStateRestored(android.os.Bundle)" [label="Fragment(onViewStateRestored)",];
    "android.support.v4.app.Fragment: void restoreViewState(android.os.Bundle)"->"android.support.v4.app.Fragment: void onViewStateRestored(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: android.support.v4.app.FragmentManagerImpl getFragmentManagerImpl()" [label="FragmentHostCallback(getFragmentManagerImpl)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentHostCallback: android.support.v4.app.FragmentManagerImpl getFragmentManagerImpl()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewDestroyed(android.support.v4.app.Fragment,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentViewDestroyed)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewDestroyed(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewDestroyed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewDestroyed(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewDestroyed(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentViewDestroyed)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewDestroyed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewDestroyed(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewDestroyed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performStart()" [label="Fragment(performStart)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performStart()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void noteStateNotSaved()" [label="FragmentManagerImpl(noteStateNotSaved)",];
    "android.support.v4.app.Fragment: void performStart()"->"android.support.v4.app.FragmentManagerImpl: void noteStateNotSaved()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void noteStateNotSaved()" [label="Fragment(noteStateNotSaved)",];
    "android.support.v4.app.FragmentManagerImpl: void noteStateNotSaved()"->"android.support.v4.app.Fragment: void noteStateNotSaved()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void noteStateNotSaved()"->"android.support.v4.app.FragmentManagerImpl: void noteStateNotSaved()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onStart()" [label="Fragment(onStart)",];
    "android.support.v4.app.Fragment: void performStart()"->"android.support.v4.app.Fragment: void onStart()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean)" [label="FragmentHostCallback(getLoaderManager)",];
    "android.support.v4.app.Fragment: void onStart()"->"android.support.v4.app.FragmentHostCallback: android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doStart()" [label="LoaderManagerImpl(doStart)",];
    "android.support.v4.app.Fragment: void onStart()"->"android.support.v4.app.LoaderManagerImpl: void doStart()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SparseArrayCompat(valueAt)",];
    "android.support.v4.app.LoaderManagerImpl: void doStart()"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void start()" [label="LoaderManagerImpl$LoaderInfo(start)",];
    "android.support.v4.app.LoaderManagerImpl: void doStart()"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void start()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void startLoading()" [label="Loader(startLoading)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void start()"->"android.support.v4.content.Loader: void startLoading()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void onStartLoading()" [label="Loader(onStartLoading)",];
    "android.support.v4.content.Loader: void startLoading()"->"android.support.v4.content.Loader: void onStartLoading()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener)" [label="Loader(registerListener)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void start()"->"android.support.v4.content.Loader: void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManager$LoaderCallbacks: android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle)" [label="LoaderManager$LoaderCallbacks(onCreateLoader)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void start()"->"android.support.v4.app.LoaderManager$LoaderCallbacks: android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void registerOnLoadCanceledListener(android.support.v4.content.Loader$OnLoadCanceledListener)" [label="Loader(registerOnLoadCanceledListener)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void start()"->"android.support.v4.content.Loader: void registerOnLoadCanceledListener(android.support.v4.content.Loader$OnLoadCanceledListener)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: int size()" [label="SparseArrayCompat(size)",];
    "android.support.v4.app.LoaderManagerImpl: void doStart()"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performStart()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStart()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performStart()"->"android.support.v4.app.FragmentManagerImpl: boolean execPendingActions()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doReportStart()" [label="LoaderManagerImpl(doReportStart)",];
    "android.support.v4.app.Fragment: void performStart()"->"android.support.v4.app.LoaderManagerImpl: void doReportStart()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doReportStart()"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void reportStart()" [label="LoaderManagerImpl$LoaderInfo(reportStart)",];
    "android.support.v4.app.LoaderManagerImpl: void doReportStart()"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void reportStart()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object)" [label="LoaderManagerImpl$LoaderInfo(callOnLoadFinished)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void reportStart()"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: java.lang.String dataToString(java.lang.Object)" [label="Loader(dataToString)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object)"->"android.support.v4.content.Loader: java.lang.String dataToString(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.DebugUtils: void buildShortClassTag(java.lang.Object,java.lang.StringBuilder)" [label="DebugUtils(buildShortClassTag)",];
    "android.support.v4.content.Loader: java.lang.String dataToString(java.lang.Object)"->"android.support.v4.util.DebugUtils: void buildShortClassTag(java.lang.Object,java.lang.StringBuilder)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManager$LoaderCallbacks: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)" [label="LoaderManager$LoaderCallbacks(onLoadFinished)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object)"->"android.support.v4.app.LoaderManager$LoaderCallbacks: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doReportStart()"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performStart()"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performStart()"->"android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String)" [label="FragmentManagerImpl(getFragment)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)" [label="FragmentManagerImpl(throwException)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String)"->"android.support.v4.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void saveFragmentViewState(android.support.v4.app.Fragment)" [label="FragmentManagerImpl(saveFragmentViewState)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void saveFragmentViewState(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performDestroy()" [label="Fragment(performDestroy)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performDestroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performDestroy()"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performDestroy()"->"android.support.v4.app.FragmentManagerImpl: void dispatchDestroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onDestroy()" [label="Fragment(onDestroy)",];
    "android.support.v4.app.Fragment: void performDestroy()"->"android.support.v4.app.Fragment: void onDestroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()" [label="LoaderManagerImpl(doDestroy)",];
    "android.support.v4.app.Fragment: void onDestroy()"->"android.support.v4.app.LoaderManagerImpl: void doDestroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()" [label="LoaderManagerImpl$LoaderInfo(destroy)",];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener)" [label="Loader(unregisterListener)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()"->"android.support.v4.content.Loader: void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManager$LoaderCallbacks: void onLoaderReset(android.support.v4.content.Loader)" [label="LoaderManager$LoaderCallbacks(onLoaderReset)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()"->"android.support.v4.app.LoaderManager$LoaderCallbacks: void onLoaderReset(android.support.v4.content.Loader)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void unregisterOnLoadCanceledListener(android.support.v4.content.Loader$OnLoadCanceledListener)" [label="Loader(unregisterOnLoadCanceledListener)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()"->"android.support.v4.content.Loader: void unregisterOnLoadCanceledListener(android.support.v4.content.Loader$OnLoadCanceledListener)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void reset()" [label="Loader(reset)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()"->"android.support.v4.content.Loader: void reset()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void onReset()" [label="Loader(onReset)",];
    "android.support.v4.content.Loader: void reset()"->"android.support.v4.content.Loader: void onReset()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: void clear()" [label="SparseArrayCompat(clear)",];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()"->"android.support.v4.util.SparseArrayCompat: void clear()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()"->"android.support.v4.util.SparseArrayCompat: void clear()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onDestroy()"->"android.support.v4.app.FragmentHostCallback: android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performDestroy()"->"android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)" [label="Fragment(onViewCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.animation.Animator getAnimator()" [label="Fragment(getAnimator)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.animation.Animator getAnimator()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performDestroyView()" [label="Fragment(performDestroyView)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performDestroyView()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doReportNextStart()" [label="LoaderManagerImpl(doReportNextStart)",];
    "android.support.v4.app.Fragment: void performDestroyView()"->"android.support.v4.app.LoaderManagerImpl: void doReportNextStart()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doReportNextStart()"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doReportNextStart()"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onDestroyView()" [label="Fragment(onDestroyView)",];
    "android.support.v4.app.Fragment: void performDestroyView()"->"android.support.v4.app.Fragment: void onDestroyView()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performDestroyView()"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchDestroyView()" [label="FragmentManagerImpl(dispatchDestroyView)",];
    "android.support.v4.app.Fragment: void performDestroyView()"->"android.support.v4.app.FragmentManagerImpl: void dispatchDestroyView()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchDestroyView()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStarted(android.support.v4.app.Fragment,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentStarted)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStarted(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStarted(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStarted(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStarted(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentStarted)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStarted(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStarted(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStarted(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onAttachFragment(android.support.v4.app.Fragment)" [label="Fragment(onAttachFragment)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void onAttachFragment(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)" [label="FragmentManagerImpl(animateRemoveFragment)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void setHWLayerAnimListenerIfAlpha(android.view.View,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator)" [label="FragmentManagerImpl(setHWLayerAnimListenerIfAlpha)",];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)"->"android.support.v4.app.FragmentManagerImpl: void setHWLayerAnimListenerIfAlpha(android.view.View,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void setStateAfterAnimating(int)" [label="Fragment(setStateAfterAnimating)",];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)"->"android.support.v4.app.Fragment: void setStateAfterAnimating(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void setAnimatingAway(android.view.View)" [label="Fragment(setAnimatingAway)",];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)"->"android.support.v4.app.Fragment: void setAnimatingAway(android.view.View)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl$2: void <init>(android.support.v4.app.FragmentManagerImpl,android.view.animation.Animation$AnimationListener,android.support.v4.app.Fragment)" [label="FragmentManagerImpl$2(<init>)",];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)"->"android.support.v4.app.FragmentManagerImpl$2: void <init>(android.support.v4.app.FragmentManagerImpl,android.view.animation.Animation$AnimationListener,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl$AnimationListenerWrapper: void <init>(android.view.animation.Animation$AnimationListener,android.support.v4.app.FragmentManagerImpl$1)" [label="FragmentManagerImpl$AnimationListenerWrapper(<init>)",];
    "android.support.v4.app.FragmentManagerImpl$2: void <init>(android.support.v4.app.FragmentManagerImpl,android.view.animation.Animation$AnimationListener,android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl$AnimationListenerWrapper: void <init>(android.view.animation.Animation$AnimationListener,android.support.v4.app.FragmentManagerImpl$1)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl$3: void <init>(android.support.v4.app.FragmentManagerImpl,android.view.ViewGroup,android.view.View,android.support.v4.app.Fragment)" [label="FragmentManagerImpl$3(<init>)",];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)"->"android.support.v4.app.FragmentManagerImpl$3: void <init>(android.support.v4.app.FragmentManagerImpl,android.view.ViewGroup,android.view.View,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.view.animation.Animation$AnimationListener getAnimationListener(android.view.animation.Animation)" [label="FragmentManagerImpl(getAnimationListener)",];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)"->"android.support.v4.app.FragmentManagerImpl: android.view.animation.Animation$AnimationListener getAnimationListener(android.view.animation.Animation)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)"->"android.support.v4.app.FragmentManagerImpl: void setHWLayerAnimListenerIfAlpha(android.view.View,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void setAnimator(android.animation.Animator)" [label="Fragment(setAnimator)",];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)"->"android.support.v4.app.Fragment: void setAnimator(android.animation.Animator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.animation.Animator getAnimator()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.view.View getAnimatingAway()" [label="Fragment(getAnimatingAway)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.view.View getAnimatingAway()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.animation.Animator getAnimator()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)" [label="Fragment(performCreateView)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)"->"android.support.v4.app.FragmentManagerImpl: void noteStateNotSaved()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)" [label="Fragment(onCreateView)",];
    "android.support.v4.app.Fragment: android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)"->"android.support.v4.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDetached(android.support.v4.app.Fragment,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentDetached)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDetached(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDetached(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentDetached)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDetached(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDetached(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDetached(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDetached(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDetached(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performResume()" [label="Fragment(performResume)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performResume()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onResume()" [label="Fragment(onResume)",];
    "android.support.v4.app.Fragment: void performResume()"->"android.support.v4.app.Fragment: void onResume()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performResume()"->"android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performResume()"->"android.support.v4.app.FragmentManagerImpl: void noteStateNotSaved()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performResume()"->"android.support.v4.app.FragmentManagerImpl: boolean execPendingActions()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performResume()"->"android.support.v4.app.FragmentManagerImpl: boolean execPendingActions()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performResume()"->"android.support.v4.app.FragmentManagerImpl: void dispatchResume()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performResume()"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performActivityCreated(android.os.Bundle)" [label="Fragment(performActivityCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performActivityCreated(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onActivityCreated(android.os.Bundle)" [label="Fragment(onActivityCreated)",];
    "android.support.v4.app.Fragment: void performActivityCreated(android.os.Bundle)"->"android.support.v4.app.Fragment: void onActivityCreated(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performActivityCreated(android.os.Bundle)"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performActivityCreated(android.os.Bundle)"->"android.support.v4.app.FragmentManagerImpl: void noteStateNotSaved()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performActivityCreated(android.os.Bundle)"->"android.support.v4.app.FragmentManagerImpl: void dispatchActivityCreated()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: int getStateAfterAnimating()" [label="Fragment(getStateAfterAnimating)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: int getStateAfterAnimating()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void setAnimatingAway(android.view.View)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(android.support.v4.app.Fragment,android.view.View,android.os.Bundle,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentViewCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(android.support.v4.app.Fragment,android.view.View,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(android.support.v4.app.Fragment,android.view.View,android.os.Bundle,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(android.support.v4.app.Fragment,android.view.View,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(android.support.v4.app.Fragment,android.view.View,android.os.Bundle,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewCreated(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.view.View,android.os.Bundle)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentViewCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(android.support.v4.app.Fragment,android.view.View,android.os.Bundle,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewCreated(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.view.View,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onAttach(android.content.Context)" [label="Fragment(onAttach)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void onAttach(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: android.app.Activity getActivity()" [label="FragmentHostCallback(getActivity)",];
    "android.support.v4.app.Fragment: void onAttach(android.content.Context)"->"android.support.v4.app.FragmentHostCallback: android.app.Activity getActivity()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onAttach(android.app.Activity)" [label="Fragment(onAttach)",];
    "android.support.v4.app.Fragment: void onAttach(android.content.Context)"->"android.support.v4.app.Fragment: void onAttach(android.app.Activity)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void restoreChildFragmentState(android.os.Bundle)" [label="Fragment(restoreChildFragmentState)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void restoreChildFragmentState(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)" [label="FragmentManagerImpl(restoreAllState)",];
    "android.support.v4.app.Fragment: void restoreChildFragmentState(android.os.Bundle)"->"android.support.v4.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void restoreChildFragmentState(android.os.Bundle)"->"android.support.v4.app.FragmentManagerImpl: void dispatchCreate()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void restoreChildFragmentState(android.os.Bundle)"->"android.support.v4.app.Fragment: void instantiateChildFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void setAnimator(android.animation.Animator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performReallyStop()" [label="Fragment(performReallyStop)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performReallyStop()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doStop()" [label="LoaderManagerImpl(doStop)",];
    "android.support.v4.app.Fragment: void performReallyStop()"->"android.support.v4.app.LoaderManagerImpl: void doStop()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doStop()"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doStop()"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void stop()" [label="LoaderManagerImpl$LoaderInfo(stop)",];
    "android.support.v4.app.LoaderManagerImpl: void doStop()"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void stop()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void stop()"->"android.support.v4.content.Loader: void unregisterOnLoadCanceledListener(android.support.v4.content.Loader$OnLoadCanceledListener)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void stopLoading()" [label="Loader(stopLoading)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void stop()"->"android.support.v4.content.Loader: void stopLoading()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void onStopLoading()" [label="Loader(onStopLoading)",];
    "android.support.v4.content.Loader: void stopLoading()"->"android.support.v4.content.Loader: void onStopLoading()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void stop()"->"android.support.v4.content.Loader: void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: boolean getRetainLoaders()" [label="FragmentHostCallback(getRetainLoaders)",];
    "android.support.v4.app.Fragment: void performReallyStop()"->"android.support.v4.app.FragmentHostCallback: boolean getRetainLoaders()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performReallyStop()"->"android.support.v4.app.FragmentHostCallback: android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doRetain()" [label="LoaderManagerImpl(doRetain)",];
    "android.support.v4.app.Fragment: void performReallyStop()"->"android.support.v4.app.LoaderManagerImpl: void doRetain()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void retain()" [label="LoaderManagerImpl$LoaderInfo(retain)",];
    "android.support.v4.app.LoaderManagerImpl: void doRetain()"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void retain()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doRetain()"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doRetain()"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchReallyStop()" [label="FragmentManagerImpl(dispatchReallyStop)",];
    "android.support.v4.app.Fragment: void performReallyStop()"->"android.support.v4.app.FragmentManagerImpl: void dispatchReallyStop()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchReallyStop()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentContainer: android.view.View onFindViewById(int)" [label="FragmentContainer(onFindViewById)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentContainer: android.view.View onFindViewById(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentResumed(android.support.v4.app.Fragment,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentResumed)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentResumed(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentResumed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentResumed(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentResumed)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentResumed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentResumed(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentResumed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentResumed(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void setAnimatingAway(android.view.View)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performPause()" [label="Fragment(performPause)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performPause()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performPause()"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchPause()" [label="FragmentManagerImpl(dispatchPause)",];
    "android.support.v4.app.Fragment: void performPause()"->"android.support.v4.app.FragmentManagerImpl: void dispatchPause()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchPause()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onPause()" [label="Fragment(onPause)",];
    "android.support.v4.app.Fragment: void performPause()"->"android.support.v4.app.Fragment: void onPause()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performPause()"->"android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.view.View getAnimatingAway()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentCreated(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.os.Bundle)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentCreated(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPaused(android.support.v4.app.Fragment,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentPaused)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPaused(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPaused(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPaused(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPaused(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentPaused)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPaused(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPaused(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPaused(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.animation.Animator getAnimator()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentActivityCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentActivityCreated(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.os.Bundle)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentActivityCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentActivityCreated(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.view.View getAnimatingAway()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void setAnimator(android.animation.Animator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(android.support.v4.app.Fragment,android.content.Context,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentPreAttached)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(android.support.v4.app.Fragment,android.content.Context,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreAttached(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.content.Context)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentPreAttached)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(android.support.v4.app.Fragment,android.content.Context,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreAttached(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(android.support.v4.app.Fragment,android.content.Context,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(android.support.v4.app.Fragment,android.content.Context,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(android.support.v4.app.Fragment,android.content.Context,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: boolean onShouldSaveFragmentState(android.support.v4.app.Fragment)" [label="FragmentHostCallback(onShouldSaveFragmentState)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentHostCallback: boolean onShouldSaveFragmentState(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.view.View getAnimatingAway()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void setStateAfterAnimating(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void ensureInflatedFragmentView(android.support.v4.app.Fragment)" [label="FragmentManagerImpl(ensureInflatedFragmentView)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void ensureInflatedFragmentView(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void ensureInflatedFragmentView(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(android.support.v4.app.Fragment,android.view.View,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void ensureInflatedFragmentView(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void ensureInflatedFragmentView(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void ensureInflatedFragmentView(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void makeInactive(android.support.v4.app.Fragment)" [label="FragmentManagerImpl(makeInactive)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void makeInactive(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void initState()" [label="Fragment(initState)",];
    "android.support.v4.app.FragmentManagerImpl: void makeInactive(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: void initState()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: void inactivateFragment(java.lang.String)" [label="FragmentHostCallback(inactivateFragment)",];
    "android.support.v4.app.FragmentManagerImpl: void makeInactive(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentHostCallback: void inactivateFragment(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object remove(java.lang.Object)" [label="SimpleArrayMap(remove)",];
    "android.support.v4.app.FragmentHostCallback: void inactivateFragment(java.lang.String)"->"android.support.v4.util.SimpleArrayMap: java.lang.Object remove(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object removeAt(int)" [label="SimpleArrayMap(removeAt)",];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object remove(java.lang.Object)"->"android.support.v4.util.SimpleArrayMap: java.lang.Object removeAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: void allocArrays(int)" [label="SimpleArrayMap(allocArrays)",];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object removeAt(int)"->"android.support.v4.util.SimpleArrayMap: void allocArrays(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: void freeArrays(int[],java.lang.Object[],int)" [label="SimpleArrayMap(freeArrays)",];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object removeAt(int)"->"android.support.v4.util.SimpleArrayMap: void freeArrays(int[],java.lang.Object[],int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: int indexOfKey(java.lang.Object)" [label="SimpleArrayMap(indexOfKey)",];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object remove(java.lang.Object)"->"android.support.v4.util.SimpleArrayMap: int indexOfKey(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: void inactivateFragment(java.lang.String)"->"android.support.v4.util.SimpleArrayMap: java.lang.Object get(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: void inactivateFragment(java.lang.String)"->"android.support.v4.app.LoaderManagerImpl: void doDestroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performCreate(android.os.Bundle)" [label="Fragment(performCreate)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performCreate(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performCreate(android.os.Bundle)"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performCreate(android.os.Bundle)"->"android.support.v4.app.FragmentManagerImpl: void noteStateNotSaved()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performCreate(android.os.Bundle)"->"android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onCreate(android.os.Bundle)" [label="Fragment(onCreate)",];
    "android.support.v4.app.Fragment: void performCreate(android.os.Bundle)"->"android.support.v4.app.Fragment: void onCreate(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onCreate(android.os.Bundle)"->"android.support.v4.app.Fragment: void restoreChildFragmentState(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentManagerImpl: void dispatchCreate()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: boolean isStateAtLeast(int)" [label="FragmentManagerImpl(isStateAtLeast)",];
    "android.support.v4.app.Fragment: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentManagerImpl: boolean isStateAtLeast(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentAttached(android.support.v4.app.Fragment,android.content.Context,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentAttached)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentAttached(android.support.v4.app.Fragment,android.content.Context,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentAttached(android.support.v4.app.Fragment,android.content.Context,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentAttached(android.support.v4.app.Fragment,android.content.Context,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentAttached(android.support.v4.app.Fragment,android.content.Context,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentAttached(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.content.Context)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentAttached)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentAttached(android.support.v4.app.Fragment,android.content.Context,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentAttached(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: int getNextTransitionStyle()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: void setHWLayerAnimListenerIfAlpha(android.view.View,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)" [label="FragmentManagerImpl(completeShowHideFragment)",];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: boolean isHideReplaced()" [label="Fragment(isHideReplaced)",];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: boolean isHideReplaced()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: boolean isHideReplaced()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void setHideReplaced(boolean)" [label="Fragment(setHideReplaced)",];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: void setHideReplaced(boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.support.v4.app.Fragment$AnimationInfo ensureAnimationInfo()" [label="Fragment(ensureAnimationInfo)",];
    "android.support.v4.app.Fragment: void setHideReplaced(boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.Fragment$AnimationInfo ensureAnimationInfo()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment$AnimationInfo: void <init>()" [label="Fragment$AnimationInfo(<init>)",];
    "android.support.v4.app.Fragment: android.support.v4.app.Fragment$AnimationInfo ensureAnimationInfo()"->"android.support.v4.app.Fragment$AnimationInfo: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: int getNextTransitionStyle()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: boolean isHideReplaced()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: void setHideReplaced(boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: int getNextTransition()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl$4: void <init>(android.support.v4.app.FragmentManagerImpl,android.view.ViewGroup,android.view.View,android.support.v4.app.Fragment)" [label="FragmentManagerImpl$4(<init>)",];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl$4: void <init>(android.support.v4.app.FragmentManagerImpl,android.view.ViewGroup,android.view.View,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: void setHWLayerAnimListenerIfAlpha(android.view.View,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onHiddenChanged(boolean)" [label="Fragment(onHiddenChanged)",];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: void onHiddenChanged(boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: void setHWLayerAnimListenerIfAlpha(android.view.View,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: void onSupportInvalidateOptionsMenu()" [label="FragmentHostCallback(onSupportInvalidateOptionsMenu)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(int,boolean)"->"android.support.v4.app.FragmentHostCallback: void onSupportInvalidateOptionsMenu()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void startPendingDeferredFragments()" [label="FragmentManagerImpl(startPendingDeferredFragments)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void startPendingDeferredFragments()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void performPendingDeferredStart(android.support.v4.app.Fragment)" [label="FragmentManagerImpl(performPendingDeferredStart)",];
    "android.support.v4.app.FragmentManagerImpl: void startPendingDeferredFragments()"->"android.support.v4.app.FragmentManagerImpl: void performPendingDeferredStart(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void performPendingDeferredStart(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: boolean hasRunningLoaders()" [label="LoaderManagerImpl(hasRunningLoaders)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(int,boolean)"->"android.support.v4.app.LoaderManagerImpl: boolean hasRunningLoaders()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: boolean hasRunningLoaders()"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: boolean hasRunningLoaders()"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(int,boolean)"->"android.support.v4.app.LoaderManagerImpl: boolean hasRunningLoaders()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)"->"android.support.v4.app.FragmentManagerImpl: boolean execPendingActions()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentController: void attachHost(android.support.v4.app.Fragment)" [label="FragmentController(attachHost)",];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentController: void attachHost(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void attachController(android.support.v4.app.FragmentHostCallback,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment)" [label="FragmentManagerImpl(attachController)",];
    "android.support.v4.app.FragmentController: void attachHost(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: void attachController(android.support.v4.app.FragmentHostCallback,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)"->"android.support.v4.util.SparseArrayCompat: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: void <init>(int)" [label="SparseArrayCompat(<init>)",];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)"->"android.support.v4.util.SparseArrayCompat: void <init>(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: void <init>(int)"->"android.support.v4.util.ContainerHelpers: int idealIntArraySize(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentController: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)" [label="FragmentController(restoreAllState)",];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentController: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentController: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)"->"android.support.v4.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)"->"android.support.v4.util.SparseArrayCompat: void put(int,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: void setTheme(int)" [label="AppCompatActivity(setTheme)",];
    "android.support.v7.app.AppCompatActivity: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatActivity: void setTheme(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: boolean applyDayNight()" [label="AppCompatDelegate(applyDayNight)",];
    "android.support.v7.app.AppCompatActivity: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatDelegate: boolean applyDayNight()" [label="SIMPLE",style=bold,color=black,];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder setFontAttrId(int)" [label="CalligraphyConfig$Builder(setFontAttrId)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder setFontAttrId(int)" [label="SIMPLE",style=bold,color=black,];
    "com.tleapps.simpletipcalculator.Utils.Connectivity: boolean isConnected(android.content.Context)" [label="Connectivity(isConnected)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"com.tleapps.simpletipcalculator.Utils.Connectivity: boolean isConnected(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.tleapps.simpletipcalculator.Utils.Connectivity: android.net.NetworkInfo getNetworkInfo(android.content.Context)" [label="Connectivity(getNetworkInfo)",];
    "com.tleapps.simpletipcalculator.Utils.Connectivity: boolean isConnected(android.content.Context)"->"com.tleapps.simpletipcalculator.Utils.Connectivity: android.net.NetworkInfo getNetworkInfo(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: uk.co.chrisjenx.calligraphy.CalligraphyConfig build()" [label="CalligraphyConfig$Builder(build)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: uk.co.chrisjenx.calligraphy.CalligraphyConfig build()" [label="SIMPLE",style=bold,color=black,];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig: void <init>(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="CalligraphyConfig(<init>)",];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: uk.co.chrisjenx.calligraphy.CalligraphyConfig build()"->"uk.co.chrisjenx.calligraphy.CalligraphyConfig: void <init>(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="SIMPLE",style=bold,color=black,];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: boolean access$300(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="CalligraphyConfig$Builder(access$300)",];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig: void <init>(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)"->"uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: boolean access$300(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="SIMPLE",style=bold,color=black,];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: boolean access$400(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="CalligraphyConfig$Builder(access$400)",];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig: void <init>(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)"->"uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: boolean access$400(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="SIMPLE",style=bold,color=black,];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: java.util.Map access$600(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="CalligraphyConfig$Builder(access$600)",];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig: void <init>(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)"->"uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: java.util.Map access$600(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="SIMPLE",style=bold,color=black,];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: java.util.Set access$700(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="CalligraphyConfig$Builder(access$700)",];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig: void <init>(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)"->"uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: java.util.Set access$700(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="SIMPLE",style=bold,color=black,];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: boolean access$000(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="CalligraphyConfig$Builder(access$000)",];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig: void <init>(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)"->"uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: boolean access$000(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="SIMPLE",style=bold,color=black,];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: int access$200(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="CalligraphyConfig$Builder(access$200)",];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig: void <init>(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)"->"uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: int access$200(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="SIMPLE",style=bold,color=black,];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: java.lang.String access$100(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="CalligraphyConfig$Builder(access$100)",];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig: void <init>(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)"->"uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: java.lang.String access$100(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="SIMPLE",style=bold,color=black,];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: boolean access$500(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="CalligraphyConfig$Builder(access$500)",];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig: void <init>(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)"->"uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder: boolean access$500(uk.co.chrisjenx.calligraphy.CalligraphyConfig$Builder)" [label="SIMPLE",style=bold,color=black,];
    "com.tleapps.simpletipcalculator.MainActivity: android.view.View _$_findCachedViewById(int)" [label="MainActivity(_$_findCachedViewById)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"com.tleapps.simpletipcalculator.MainActivity: android.view.View _$_findCachedViewById(int)" [label="SIMPLE",style=bold,color=black,];
    "uk.co.chrisjenx.calligraphy.CalligraphyConfig: void initDefault(uk.co.chrisjenx.calligraphy.CalligraphyConfig)" [label="CalligraphyConfig(initDefault)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"uk.co.chrisjenx.calligraphy.CalligraphyConfig: void initDefault(uk.co.chrisjenx.calligraphy.CalligraphyConfig)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdRequest$Builder: com.google.android.gms.ads.AdRequest build()" [label="AdRequest$Builder(build)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"com.google.android.gms.ads.AdRequest$Builder: com.google.android.gms.ads.AdRequest build()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdRequest: void <init>(com.google.android.gms.ads.AdRequest$Builder,com.google.android.gms.ads.zza)" [label="AdRequest(<init>)",];
    "com.google.android.gms.ads.AdRequest$Builder: com.google.android.gms.ads.AdRequest build()"->"com.google.android.gms.ads.AdRequest: void <init>(com.google.android.gms.ads.AdRequest$Builder,com.google.android.gms.ads.zza)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdRequest: void <init>(com.google.android.gms.ads.AdRequest$Builder)" [label="AdRequest(<init>)",];
    "com.google.android.gms.ads.AdRequest: void <init>(com.google.android.gms.ads.AdRequest$Builder,com.google.android.gms.ads.zza)"->"com.google.android.gms.ads.AdRequest: void <init>(com.google.android.gms.ads.AdRequest$Builder)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdRequest$Builder: com.google.android.gms.internal.ads.zzlx zza(com.google.android.gms.ads.AdRequest$Builder)" [label="AdRequest$Builder(zza)",];
    "com.google.android.gms.ads.AdRequest: void <init>(com.google.android.gms.ads.AdRequest$Builder)"->"com.google.android.gms.ads.AdRequest$Builder: com.google.android.gms.internal.ads.zzlx zza(com.google.android.gms.ads.AdRequest$Builder)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx)" [label="zzlw(<init>)",];
    "com.google.android.gms.ads.AdRequest: void <init>(com.google.android.gms.ads.AdRequest$Builder)"->"com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx,com.google.android.gms.ads.search.SearchAdRequest)" [label="zzlw(<init>)",];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx)"->"com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx,com.google.android.gms.ads.search.SearchAdRequest)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: android.os.Bundle zzm(com.google.android.gms.internal.ads.zzlx)" [label="zzlx(zzm)",];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.ads.zzlx: android.os.Bundle zzm(com.google.android.gms.internal.ads.zzlx)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: android.location.Location zze(com.google.android.gms.internal.ads.zzlx)" [label="zzlx(zze)",];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.ads.zzlx: android.location.Location zze(com.google.android.gms.internal.ads.zzlx)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: java.lang.String zzi(com.google.android.gms.internal.ads.zzlx)" [label="zzlx(zzi)",];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.ads.zzlx: java.lang.String zzi(com.google.android.gms.internal.ads.zzlx)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: android.os.Bundle zzg(com.google.android.gms.internal.ads.zzlx)" [label="zzlx(zzg)",];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.ads.zzlx: android.os.Bundle zzg(com.google.android.gms.internal.ads.zzlx)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: java.util.HashSet zzl(com.google.android.gms.internal.ads.zzlx)" [label="zzlx(zzl)",];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.ads.zzlx: java.util.HashSet zzl(com.google.android.gms.internal.ads.zzlx)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: java.lang.String zzb(com.google.android.gms.internal.ads.zzlx)" [label="zzlx(zzb)",];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.ads.zzlx: java.lang.String zzb(com.google.android.gms.internal.ads.zzlx)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: int zzk(com.google.android.gms.internal.ads.zzlx)" [label="zzlx(zzk)",];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.ads.zzlx: int zzk(com.google.android.gms.internal.ads.zzlx)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: boolean zzf(com.google.android.gms.internal.ads.zzlx)" [label="zzlx(zzf)",];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.ads.zzlx: boolean zzf(com.google.android.gms.internal.ads.zzlx)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: java.lang.String zzj(com.google.android.gms.internal.ads.zzlx)" [label="zzlx(zzj)",];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.ads.zzlx: java.lang.String zzj(com.google.android.gms.internal.ads.zzlx)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: java.util.HashSet zzd(com.google.android.gms.internal.ads.zzlx)" [label="zzlx(zzd)",];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.ads.zzlx: java.util.HashSet zzd(com.google.android.gms.internal.ads.zzlx)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: java.util.HashMap zzh(com.google.android.gms.internal.ads.zzlx)" [label="zzlx(zzh)",];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.ads.zzlx: java.util.HashMap zzh(com.google.android.gms.internal.ads.zzlx)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: int zzc(com.google.android.gms.internal.ads.zzlx)" [label="zzlx(zzc)",];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.ads.zzlx: int zzc(com.google.android.gms.internal.ads.zzlx)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: java.util.HashSet zzn(com.google.android.gms.internal.ads.zzlx)" [label="zzlx(zzn)",];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.ads.zzlx: java.util.HashSet zzn(com.google.android.gms.internal.ads.zzlx)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: boolean zzo(com.google.android.gms.internal.ads.zzlx)" [label="zzlx(zzo)",];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.ads.zzlx: boolean zzo(com.google.android.gms.internal.ads.zzlx)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.ads.zzlx: java.util.Date zza(com.google.android.gms.internal.ads.zzlx)" [label="zzlx(zza)",];
    "com.google.android.gms.internal.ads.zzlw: void <init>(com.google.android.gms.internal.ads.zzlx,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.ads.zzlx: java.util.Date zza(com.google.android.gms.internal.ads.zzlx)" [label="SIMPLE",style=bold,color=black,];
    "com.tleapps.simpletipcalculator.MainActivity$onCreate$1: void <init>(com.tleapps.simpletipcalculator.MainActivity,android.content.SharedPreferences)" [label="MainActivity$onCreate$1(<init>)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"com.tleapps.simpletipcalculator.MainActivity$onCreate$1: void <init>(com.tleapps.simpletipcalculator.MainActivity,android.content.SharedPreferences)" [label="SIMPLE",style=bold,color=black,];
    "kotlin.jvm.internal.Lambda: void <init>(int)" [label="Lambda(<init>)",];
    "com.tleapps.simpletipcalculator.MainActivity$onCreate$1: void <init>(com.tleapps.simpletipcalculator.MainActivity,android.content.SharedPreferences)"->"kotlin.jvm.internal.Lambda: void <init>(int)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdRequest$Builder: com.google.android.gms.ads.AdRequest$Builder addTestDevice(java.lang.String)" [label="AdRequest$Builder(addTestDevice)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"com.google.android.gms.ads.AdRequest$Builder: com.google.android.gms.ads.AdRequest$Builder addTestDevice(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdRequest$Builder: com.google.android.gms.ads.AdRequest$Builder addTestDevice(java.lang.String)"->"com.google.android.gms.internal.ads.zzlx: void zzad(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "kotlin.TypeCastException: void <init>(java.lang.String)" [label="TypeCastException(<init>)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"kotlin.TypeCastException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "org.jetbrains.anko.DialogsKt: org.jetbrains.anko.AlertDialogBuilder alert$default(android.content.Context,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1,int,java.lang.Object)" [label="DialogsKt(alert$default)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"org.jetbrains.anko.DialogsKt: org.jetbrains.anko.AlertDialogBuilder alert$default(android.content.Context,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1,int,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "org.jetbrains.anko.DialogsKt: org.jetbrains.anko.AlertDialogBuilder alert(android.content.Context,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1)" [label="DialogsKt(alert)",];
    "org.jetbrains.anko.DialogsKt: org.jetbrains.anko.AlertDialogBuilder alert$default(android.content.Context,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1,int,java.lang.Object)"->"org.jetbrains.anko.DialogsKt: org.jetbrains.anko.AlertDialogBuilder alert(android.content.Context,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1)" [label="SIMPLE",style=bold,color=black,];
    "org.jetbrains.anko.AlertDialogBuilder: void message(java.lang.CharSequence)" [label="AlertDialogBuilder(message)",];
    "org.jetbrains.anko.DialogsKt: org.jetbrains.anko.AlertDialogBuilder alert(android.content.Context,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1)"->"org.jetbrains.anko.AlertDialogBuilder: void message(java.lang.CharSequence)" [label="SIMPLE",style=bold,color=black,];
    "kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)" [label="Intrinsics(checkParameterIsNotNull)",];
    "org.jetbrains.anko.AlertDialogBuilder: void message(java.lang.CharSequence)"->"kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "org.jetbrains.anko.AlertDialogBuilder: void checkBuilder()" [label="AlertDialogBuilder(checkBuilder)",];
    "org.jetbrains.anko.AlertDialogBuilder: void message(java.lang.CharSequence)"->"org.jetbrains.anko.AlertDialogBuilder: void checkBuilder()" [label="SIMPLE",style=bold,color=black,];
    "org.jetbrains.anko.AlertDialogBuilder: void message(java.lang.CharSequence)"->"kotlin.jvm.internal.Intrinsics: void throwNpe()" [label="SIMPLE",style=bold,color=black,];
    "org.jetbrains.anko.AlertDialogBuilder: void title(java.lang.CharSequence)" [label="AlertDialogBuilder(title)",];
    "org.jetbrains.anko.DialogsKt: org.jetbrains.anko.AlertDialogBuilder alert(android.content.Context,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1)"->"org.jetbrains.anko.AlertDialogBuilder: void title(java.lang.CharSequence)" [label="SIMPLE",style=bold,color=black,];
    "org.jetbrains.anko.AlertDialogBuilder: void title(java.lang.CharSequence)"->"org.jetbrains.anko.AlertDialogBuilder: void checkBuilder()" [label="SIMPLE",style=bold,color=black,];
    "org.jetbrains.anko.AlertDialogBuilder: void title(java.lang.CharSequence)"->"kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "org.jetbrains.anko.AlertDialogBuilder: void title(java.lang.CharSequence)"->"kotlin.jvm.internal.Intrinsics: void throwNpe()" [label="SIMPLE",style=bold,color=black,];
    "kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)" [label="Function1(invoke)",];
    "org.jetbrains.anko.DialogsKt: org.jetbrains.anko.AlertDialogBuilder alert(android.content.Context,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1)"->"kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "org.jetbrains.anko.DialogsKt: org.jetbrains.anko.AlertDialogBuilder alert(android.content.Context,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1)"->"kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "org.jetbrains.anko.AlertDialogBuilder: void <init>(android.content.Context)" [label="AlertDialogBuilder(<init>)",];
    "org.jetbrains.anko.DialogsKt: org.jetbrains.anko.AlertDialogBuilder alert(android.content.Context,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1)"->"org.jetbrains.anko.AlertDialogBuilder: void <init>(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "org.jetbrains.anko.AlertDialogBuilder: void <init>(android.content.Context)"->"kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "org.jetbrains.anko.DialogsKt: org.jetbrains.anko.AlertDialogBuilder alert(android.content.Context,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1)"->"kotlin.jvm.internal.Intrinsics: void checkParameterIsNotNull(java.lang.Object,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: void setSupportActionBar(android.support.v7.widget.Toolbar)" [label="AppCompatActivity(setSupportActionBar)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatActivity: void setSupportActionBar(android.support.v7.widget.Toolbar)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: void setSupportActionBar(android.support.v7.widget.Toolbar)" [label="AppCompatDelegate(setSupportActionBar)",];
    "android.support.v7.app.AppCompatActivity: void setSupportActionBar(android.support.v7.widget.Toolbar)"->"android.support.v7.app.AppCompatDelegate: void setSupportActionBar(android.support.v7.widget.Toolbar)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: void setSupportActionBar(android.support.v7.widget.Toolbar)"->"android.support.v7.app.AppCompatActivity: android.support.v7.app.AppCompatDelegate getDelegate()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: void setContentView(int)" [label="AppCompatActivity(setContentView)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatActivity: void setContentView(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: void setContentView(int)" [label="AppCompatDelegate(setContentView)",];
    "android.support.v7.app.AppCompatActivity: void setContentView(int)"->"android.support.v7.app.AppCompatDelegate: void setContentView(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: void setContentView(int)"->"android.support.v7.app.AppCompatActivity: android.support.v7.app.AppCompatDelegate getDelegate()" [label="SIMPLE",style=bold,color=black,];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"kotlin.jvm.internal.Intrinsics: void throwNpe()" [label="SIMPLE",style=bold,color=black,];
    "org.jetbrains.anko.AlertDialogBuilder: org.jetbrains.anko.AlertDialogBuilder show()" [label="AlertDialogBuilder(show)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"org.jetbrains.anko.AlertDialogBuilder: org.jetbrains.anko.AlertDialogBuilder show()" [label="SIMPLE",style=bold,color=black,];
    "org.jetbrains.anko.AlertDialogBuilder: org.jetbrains.anko.AlertDialogBuilder show()"->"org.jetbrains.anko.AlertDialogBuilder: void checkBuilder()" [label="SIMPLE",style=bold,color=black,];
    "org.jetbrains.anko.AlertDialogBuilder: org.jetbrains.anko.AlertDialogBuilder show()"->"kotlin.jvm.internal.Intrinsics: void throwNpe()" [label="SIMPLE",style=bold,color=black,];
    "org.jetbrains.anko.AlertDialogBuilder: org.jetbrains.anko.AlertDialogBuilder show()"->"kotlin.jvm.internal.Intrinsics: void throwNpe()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: android.view.View findViewById(int)" [label="AppCompatActivity(findViewById)",];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatActivity: android.view.View findViewById(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: android.view.View findViewById(int)" [label="AppCompatDelegate(findViewById)",];
    "android.support.v7.app.AppCompatActivity: android.view.View findViewById(int)"->"android.support.v7.app.AppCompatDelegate: android.view.View findViewById(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: android.view.View findViewById(int)"->"android.support.v7.app.AppCompatActivity: android.support.v7.app.AppCompatDelegate getDelegate()" [label="SIMPLE",style=bold,color=black,];
    "com.tleapps.simpletipcalculator.MainActivity: void onCreate(android.os.Bundle)"->"com.tleapps.simpletipcalculator.MainActivity: android.view.View _$_findCachedViewById(int)" [label="SIMPLE",style=bold,color=black,];
    "com.tleapps.simpletipcalculator.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)" [label="MainActivity(onOptionsItemSelected)",];
    "Root"->"com.tleapps.simpletipcalculator.MainActivity: boolean onOptionsItemSelected(android.view.MenuItem)" [label="SYMBOLIC",style=bold,color=black,];
}
