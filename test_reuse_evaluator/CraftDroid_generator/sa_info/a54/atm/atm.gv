digraph "CallGraph" {
    node [style="rounded,bold,filled"];
    node [shape=box];
    "Root" [label="Root",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)" [label="Calculator(onCreate)",];
    "Root"->"com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)" [label="SYMBOLIC",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: android.view.View findViewById(int)" [label="AppCompatActivity(findViewById)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatActivity: android.view.View findViewById(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: android.support.v7.app.AppCompatDelegate getDelegate()" [label="AppCompatActivity(getDelegate)",];
    "android.support.v7.app.AppCompatActivity: android.view.View findViewById(int)"->"android.support.v7.app.AppCompatActivity: android.support.v7.app.AppCompatDelegate getDelegate()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.app.Activity,android.support.v7.app.AppCompatCallback)" [label="AppCompatDelegate(create)",];
    "android.support.v7.app.AppCompatActivity: android.support.v7.app.AppCompatDelegate getDelegate()"->"android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.app.Activity,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="AppCompatDelegate(create)",];
    "android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.app.Activity,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplN: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="AppCompatDelegateImplN(<init>)",];
    "android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplN: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplV23: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="AppCompatDelegateImplV23(<init>)",];
    "android.support.v7.app.AppCompatDelegateImplN: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplV23: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplV23: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplV14: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="AppCompatDelegateImplV14(<init>)",];
    "android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplV14: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplV11: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="AppCompatDelegateImplV11(<init>)",];
    "android.support.v7.app.AppCompatDelegateImplV14: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplV11: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplV9: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="AppCompatDelegateImplV9(<init>)",];
    "android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplV9: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplV9$1: void <init>(android.support.v7.app.AppCompatDelegateImplV9)" [label="AppCompatDelegateImplV9$1(<init>)",];
    "android.support.v7.app.AppCompatDelegateImplV9: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplV9$1: void <init>(android.support.v7.app.AppCompatDelegateImplV9)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplBase: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="AppCompatDelegateImplBase(<init>)",];
    "android.support.v7.app.AppCompatDelegateImplV9: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplBase: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintTypedArray: android.support.v7.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])" [label="TintTypedArray(obtainStyledAttributes)",];
    "android.support.v7.app.AppCompatDelegateImplBase: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.widget.TintTypedArray: android.support.v7.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintTypedArray: void <init>(android.content.Context,android.content.res.TypedArray)" [label="TintTypedArray(<init>)",];
    "android.support.v7.widget.TintTypedArray: android.support.v7.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])"->"android.support.v7.widget.TintTypedArray: void <init>(android.content.Context,android.content.res.TypedArray)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawableIfKnown(int)" [label="TintTypedArray(getDrawableIfKnown)",];
    "android.support.v7.app.AppCompatDelegateImplBase: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawableIfKnown(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.support.v7.widget.AppCompatDrawableManager get()" [label="AppCompatDrawableManager(get)",];
    "android.support.v7.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawableIfKnown(int)"->"android.support.v7.widget.AppCompatDrawableManager: android.support.v7.widget.AppCompatDrawableManager get()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: void <init>()" [label="AppCompatDrawableManager(<init>)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.support.v7.widget.AppCompatDrawableManager get()"->"android.support.v7.widget.AppCompatDrawableManager: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: void installDefaultInflateDelegates(android.support.v7.widget.AppCompatDrawableManager)" [label="AppCompatDrawableManager(installDefaultInflateDelegates)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.support.v7.widget.AppCompatDrawableManager get()"->"android.support.v7.widget.AppCompatDrawableManager: void installDefaultInflateDelegates(android.support.v7.widget.AppCompatDrawableManager)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: void addDelegate(java.lang.String,android.support.v7.widget.AppCompatDrawableManager$InflateDelegate)" [label="AppCompatDrawableManager(addDelegate)",];
    "android.support.v7.widget.AppCompatDrawableManager: void installDefaultInflateDelegates(android.support.v7.widget.AppCompatDrawableManager)"->"android.support.v7.widget.AppCompatDrawableManager: void addDelegate(java.lang.String,android.support.v7.widget.AppCompatDrawableManager$InflateDelegate)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.ArrayMap: void <init>()" [label="ArrayMap(<init>)",];
    "android.support.v7.widget.AppCompatDrawableManager: void addDelegate(java.lang.String,android.support.v7.widget.AppCompatDrawableManager$InflateDelegate)"->"android.support.v4.util.ArrayMap: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: void <init>()" [label="SimpleArrayMap(<init>)",];
    "android.support.v4.util.ArrayMap: void <init>()"->"android.support.v4.util.SimpleArrayMap: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)" [label="SimpleArrayMap(put)",];
    "android.support.v7.widget.AppCompatDrawableManager: void addDelegate(java.lang.String,android.support.v7.widget.AppCompatDrawableManager$InflateDelegate)"->"android.support.v4.util.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager$VdcInflateDelegate: void <init>()" [label="AppCompatDrawableManager$VdcInflateDelegate(<init>)",];
    "android.support.v7.widget.AppCompatDrawableManager: void installDefaultInflateDelegates(android.support.v7.widget.AppCompatDrawableManager)"->"android.support.v7.widget.AppCompatDrawableManager$VdcInflateDelegate: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager$AvdcInflateDelegate: void <init>()" [label="AppCompatDrawableManager$AvdcInflateDelegate(<init>)",];
    "android.support.v7.widget.AppCompatDrawableManager: void installDefaultInflateDelegates(android.support.v7.widget.AppCompatDrawableManager)"->"android.support.v7.widget.AppCompatDrawableManager$AvdcInflateDelegate: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: void installDefaultInflateDelegates(android.support.v7.widget.AppCompatDrawableManager)"->"android.support.v7.widget.AppCompatDrawableManager: void addDelegate(java.lang.String,android.support.v7.widget.AppCompatDrawableManager$InflateDelegate)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)" [label="AppCompatDrawableManager(getDrawable)",];
    "android.support.v7.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawableIfKnown(int)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)" [label="DrawableUtils(fixDrawable)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)"->"android.support.v7.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)" [label="AppCompatDrawableManager(tintDrawable)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)" [label="AppCompatDrawableManager(setPorterDuffColorFilter)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)" [label="AppCompatDrawableManager(getPorterDuffColorFilter)",];
    "android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)" [label="AppCompatDrawableManager$ColorFilterLruCache(get)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)"->"android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: int generateCacheKey(int,android.graphics.PorterDuff$Mode)" [label="AppCompatDrawableManager$ColorFilterLruCache(generateCacheKey)",];
    "android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)"->"android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: int generateCacheKey(int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: java.lang.Object get(java.lang.Object)" [label="LruCache(get)",];
    "android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)"->"android.support.v4.util.LruCache: java.lang.Object get(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: java.lang.Object create(java.lang.Object)" [label="LruCache(create)",];
    "android.support.v4.util.LruCache: java.lang.Object get(java.lang.Object)"->"android.support.v4.util.LruCache: java.lang.Object create(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)" [label="LruCache(safeSizeOf)",];
    "android.support.v4.util.LruCache: java.lang.Object get(java.lang.Object)"->"android.support.v4.util.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: int sizeOf(java.lang.Object,java.lang.Object)" [label="LruCache(sizeOf)",];
    "android.support.v4.util.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)"->"android.support.v4.util.LruCache: int sizeOf(java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)" [label="LruCache(entryRemoved)",];
    "android.support.v4.util.LruCache: java.lang.Object get(java.lang.Object)"->"android.support.v4.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: void trimToSize(int)" [label="LruCache(trimToSize)",];
    "android.support.v4.util.LruCache: java.lang.Object get(java.lang.Object)"->"android.support.v4.util.LruCache: void trimToSize(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: void trimToSize(int)"->"android.support.v4.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: void trimToSize(int)"->"android.support.v4.util.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)" [label="AppCompatDrawableManager$ColorFilterLruCache(put)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)"->"android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)" [label="LruCache(put)",];
    "android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)"->"android.support.v4.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)"->"android.support.v4.util.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)"->"android.support.v4.util.LruCache: void trimToSize(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)"->"android.support.v4.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)"->"android.support.v4.util.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)"->"android.support.v7.widget.AppCompatDrawableManager$ColorFilterLruCache: int generateCacheKey(int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)" [label="DrawableUtils(canSafelyMutateDrawable)",];
    "android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)"->"android.support.v7.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="ThemeUtils(getThemeAttrColor)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)"->"android.support.v7.widget.TintTypedArray: android.support.v7.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintTypedArray: void recycle()" [label="TintTypedArray(recycle)",];
    "android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)"->"android.support.v7.widget.TintTypedArray: void recycle()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)"->"android.support.v7.widget.TintTypedArray: void recycle()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintTypedArray: int getColor(int,int)" [label="TintTypedArray(getColor)",];
    "android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)"->"android.support.v7.widget.TintTypedArray: int getColor(int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)" [label="ThemeUtils(getDisabledThemeAttrColor)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)" [label="ThemeUtils(getThemeAttrColorStateList)",];
    "android.support.v7.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)"->"android.support.v7.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.ThemeUtils: android.util.TypedValue getTypedValue()" [label="ThemeUtils(getTypedValue)",];
    "android.support.v7.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)"->"android.support.v7.widget.ThemeUtils: android.util.TypedValue getTypedValue()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int,float)" [label="ThemeUtils(getThemeAttrColor)",];
    "android.support.v7.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int,float)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.ColorUtils: int setAlphaComponent(int,int)" [label="ColorUtils(setAlphaComponent)",];
    "android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int,float)"->"android.support.v4.graphics.ColorUtils: int setAlphaComponent(int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int,float)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)" [label="DrawableCompat(setTintMode)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.TintAwareDrawable: void setTintMode(android.graphics.PorterDuff$Mode)" [label="TintAwareDrawable(setTintMode)",];
    "android.support.v4.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)"->"android.support.v4.graphics.drawable.TintAwareDrawable: void setTintMode(android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)" [label="AppCompatDrawableManager(tintDrawableUsingColorFilter)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)"->"android.support.v7.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: boolean arrayContains(int[],int)" [label="AppCompatDrawableManager(arrayContains)",];
    "android.support.v7.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: boolean arrayContains(int[],int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: boolean arrayContains(int[],int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: boolean arrayContains(int[],int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableCompat: android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable)" [label="DrawableCompat(wrap)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableCompat: android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableWrapperApi19: void <init>(android.graphics.drawable.Drawable)" [label="DrawableWrapperApi19(<init>)",];
    "android.support.v4.graphics.drawable.DrawableCompat: android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableWrapperApi19: void <init>(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableWrapperApi14: void <init>(android.graphics.drawable.Drawable)" [label="DrawableWrapperApi14(<init>)",];
    "android.support.v4.graphics.drawable.DrawableWrapperApi19: void <init>(android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableWrapperApi14: void <init>(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableWrapperApi21: void <init>(android.graphics.drawable.Drawable)" [label="DrawableWrapperApi21(<init>)",];
    "android.support.v4.graphics.drawable.DrawableCompat: android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableWrapperApi21: void <init>(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableWrapperApi21: void <init>(android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableWrapperApi19: void <init>(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableWrapperApi21: void findAndCacheIsProjectedDrawableMethod()" [label="DrawableWrapperApi21(findAndCacheIsProjectedDrawableMethod)",];
    "android.support.v4.graphics.drawable.DrawableWrapperApi21: void <init>(android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableWrapperApi21: void findAndCacheIsProjectedDrawableMethod()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableCompat: android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableWrapperApi14: void <init>(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode getTintMode(int)" [label="AppCompatDrawableManager(getTintMode)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode getTintMode(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)" [label="DrawableCompat(setTintList)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v4.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.graphics.drawable.TintAwareDrawable: void setTintList(android.content.res.ColorStateList)" [label="TintAwareDrawable(setTintList)",];
    "android.support.v4.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)"->"android.support.v4.graphics.drawable.TintAwareDrawable: void setTintList(android.content.res.ColorStateList)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)" [label="AppCompatDrawableManager(getTintList)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: void checkVectorDrawableSetup(android.content.Context)" [label="AppCompatDrawableManager(checkVectorDrawableSetup)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)"->"android.support.v7.widget.AppCompatDrawableManager: void checkVectorDrawableSetup(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)" [label="AppCompatDrawableManager(getDrawable)",];
    "android.support.v7.widget.AppCompatDrawableManager: void checkVectorDrawableSetup(android.content.Context)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: boolean isVectorDrawable(android.graphics.drawable.Drawable)" [label="AppCompatDrawableManager(isVectorDrawable)",];
    "android.support.v7.widget.AppCompatDrawableManager: void checkVectorDrawableSetup(android.content.Context)"->"android.support.v7.widget.AppCompatDrawableManager: boolean isVectorDrawable(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)" [label="AppCompatDrawableManager(loadDrawableFromDelegates)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: void <init>()" [label="SparseArrayCompat(<init>)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v4.util.SparseArrayCompat: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)" [label="AppCompatDrawableManager(addDrawableToCache)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: void <init>()" [label="LongSparseArray(<init>)",];
    "android.support.v7.widget.AppCompatDrawableManager: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)"->"android.support.v4.util.LongSparseArray: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: void <init>(int)" [label="LongSparseArray(<init>)",];
    "android.support.v4.util.LongSparseArray: void <init>()"->"android.support.v4.util.LongSparseArray: void <init>(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.ContainerHelpers: int idealLongArraySize(int)" [label="ContainerHelpers(idealLongArraySize)",];
    "android.support.v4.util.LongSparseArray: void <init>(int)"->"android.support.v4.util.ContainerHelpers: int idealLongArraySize(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: void put(long,java.lang.Object)" [label="LongSparseArray(put)",];
    "android.support.v7.widget.AppCompatDrawableManager: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)"->"android.support.v4.util.LongSparseArray: void put(long,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: void gc()" [label="LongSparseArray(gc)",];
    "android.support.v4.util.LongSparseArray: void put(long,java.lang.Object)"->"android.support.v4.util.LongSparseArray: void gc()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.ContainerHelpers: int binarySearch(long[],int,long)" [label="ContainerHelpers(binarySearch)",];
    "android.support.v4.util.LongSparseArray: void put(long,java.lang.Object)"->"android.support.v4.util.ContainerHelpers: int binarySearch(long[],int,long)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: void put(long,java.lang.Object)"->"android.support.v4.util.ContainerHelpers: int binarySearch(long[],int,long)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: void put(long,java.lang.Object)"->"android.support.v4.util.ContainerHelpers: int idealLongArraySize(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object get(java.lang.Object)" [label="SimpleArrayMap(get)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v4.util.SimpleArrayMap: java.lang.Object get(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)" [label="AppCompatDrawableManager(getCachedDrawable)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: void delete(long)" [label="LongSparseArray(delete)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)"->"android.support.v4.util.LongSparseArray: void delete(long)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: void delete(long)"->"android.support.v4.util.ContainerHelpers: int binarySearch(long[],int,long)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: java.lang.Object get(long)" [label="LongSparseArray(get)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)"->"android.support.v4.util.LongSparseArray: java.lang.Object get(long)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: java.lang.Object get(long,java.lang.Object)" [label="LongSparseArray(get)",];
    "android.support.v4.util.LongSparseArray: java.lang.Object get(long)"->"android.support.v4.util.LongSparseArray: java.lang.Object get(long,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LongSparseArray: java.lang.Object get(long,java.lang.Object)"->"android.support.v4.util.ContainerHelpers: int binarySearch(long[],int,long)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: boolean isEmpty()" [label="SimpleArrayMap(isEmpty)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v4.util.SimpleArrayMap: boolean isEmpty()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: void append(int,java.lang.Object)" [label="SparseArrayCompat(append)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v4.util.SparseArrayCompat: void append(int,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: void put(int,java.lang.Object)" [label="SparseArrayCompat(put)",];
    "android.support.v4.util.SparseArrayCompat: void append(int,java.lang.Object)"->"android.support.v4.util.SparseArrayCompat: void put(int,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.ContainerHelpers: int idealIntArraySize(int)" [label="ContainerHelpers(idealIntArraySize)",];
    "android.support.v4.util.SparseArrayCompat: void append(int,java.lang.Object)"->"android.support.v4.util.ContainerHelpers: int idealIntArraySize(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: void gc()" [label="SparseArrayCompat(gc)",];
    "android.support.v4.util.SparseArrayCompat: void append(int,java.lang.Object)"->"android.support.v4.util.SparseArrayCompat: void gc()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: long createCacheKey(android.util.TypedValue)" [label="AppCompatDrawableManager(createCacheKey)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: long createCacheKey(android.util.TypedValue)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v4.util.SimpleArrayMap: java.lang.Object get(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager$InflateDelegate: android.graphics.drawable.Drawable createFromXmlInner(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)" [label="AppCompatDrawableManager$InflateDelegate(createFromXmlInner)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager$InflateDelegate: android.graphics.drawable.Drawable createFromXmlInner(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: java.lang.Object get(int)" [label="SparseArrayCompat(get)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v4.util.SparseArrayCompat: java.lang.Object get(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: java.lang.Object get(int,java.lang.Object)" [label="SparseArrayCompat(get)",];
    "android.support.v4.util.SparseArrayCompat: java.lang.Object get(int)"->"android.support.v4.util.SparseArrayCompat: java.lang.Object get(int,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.ContainerHelpers: int binarySearch(int[],int,int)" [label="ContainerHelpers(binarySearch)",];
    "android.support.v4.util.SparseArrayCompat: java.lang.Object get(int,java.lang.Object)"->"android.support.v4.util.ContainerHelpers: int binarySearch(int[],int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)"->"android.support.v4.util.SparseArrayCompat: void append(int,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)" [label="AppCompatDrawableManager(createDrawableIfNeeded)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: long createCacheKey(android.util.TypedValue)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.ContextCompat: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)" [label="ContextCompat(getDrawable)",];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)"->"android.support.v4.content.ContextCompat: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplBase: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.widget.TintTypedArray: void recycle()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplBase: android.view.Window$Callback wrapWindowCallback(android.view.Window$Callback)" [label="AppCompatDelegateImplBase(wrapWindowCallback)",];
    "android.support.v7.app.AppCompatDelegateImplBase: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplBase: android.view.Window$Callback wrapWindowCallback(android.view.Window$Callback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegateImplBase$AppCompatWindowCallbackBase: void <init>(android.support.v7.app.AppCompatDelegateImplBase,android.view.Window$Callback)" [label="AppCompatDelegateImplBase$AppCompatWindowCallbackBase(<init>)",];
    "android.support.v7.app.AppCompatDelegateImplBase: android.view.Window$Callback wrapWindowCallback(android.view.Window$Callback)"->"android.support.v7.app.AppCompatDelegateImplBase$AppCompatWindowCallbackBase: void <init>(android.support.v7.app.AppCompatDelegateImplBase,android.view.Window$Callback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.view.WindowCallbackWrapper: void <init>(android.view.Window$Callback)" [label="WindowCallbackWrapper(<init>)",];
    "android.support.v7.app.AppCompatDelegateImplBase$AppCompatWindowCallbackBase: void <init>(android.support.v7.app.AppCompatDelegateImplBase,android.view.Window$Callback)"->"android.support.v7.view.WindowCallbackWrapper: void <init>(android.view.Window$Callback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: void <init>()" [label="AppCompatDelegate(<init>)",];
    "android.support.v7.app.AppCompatDelegateImplBase: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegate: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: android.support.v7.app.AppCompatDelegate create(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)"->"android.support.v7.app.AppCompatDelegateImplV11: void <init>(android.content.Context,android.view.Window,android.support.v7.app.AppCompatCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: android.view.View findViewById(int)" [label="AppCompatDelegate(findViewById)",];
    "android.support.v7.app.AppCompatActivity: android.view.View findViewById(int)"->"android.support.v7.app.AppCompatDelegate: android.view.View findViewById(int)" [label="SIMPLE",style=bold,color=black,];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatActivity: android.view.View findViewById(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()" [label="FragmentManager(beginTransaction)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentManager: android.support.v4.app.FragmentTransaction beginTransaction()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment)" [label="FragmentTransaction(add)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentTransaction: android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.ActionBarDrawerToggle: void <init>(android.app.Activity,android.support.v4.widget.DrawerLayout,android.support.v7.widget.Toolbar,int,int)" [label="ActionBarDrawerToggle(<init>)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"android.support.v7.app.ActionBarDrawerToggle: void <init>(android.app.Activity,android.support.v4.widget.DrawerLayout,android.support.v7.widget.Toolbar,int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.ActionBarDrawerToggle: void <init>(android.app.Activity,android.support.v7.widget.Toolbar,android.support.v4.widget.DrawerLayout,android.support.v7.graphics.drawable.DrawerArrowDrawable,int,int)" [label="ActionBarDrawerToggle(<init>)",];
    "android.support.v7.app.ActionBarDrawerToggle: void <init>(android.app.Activity,android.support.v4.widget.DrawerLayout,android.support.v7.widget.Toolbar,int,int)"->"android.support.v7.app.ActionBarDrawerToggle: void <init>(android.app.Activity,android.support.v7.widget.Toolbar,android.support.v4.widget.DrawerLayout,android.support.v7.graphics.drawable.DrawerArrowDrawable,int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.graphics.drawable.DrawerArrowDrawable: void <init>(android.content.Context)" [label="DrawerArrowDrawable(<init>)",];
    "android.support.v7.app.ActionBarDrawerToggle: void <init>(android.app.Activity,android.support.v7.widget.Toolbar,android.support.v4.widget.DrawerLayout,android.support.v7.graphics.drawable.DrawerArrowDrawable,int,int)"->"android.support.v7.graphics.drawable.DrawerArrowDrawable: void <init>(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.graphics.drawable.DrawerArrowDrawable: void setColor(int)" [label="DrawerArrowDrawable(setColor)",];
    "android.support.v7.graphics.drawable.DrawerArrowDrawable: void <init>(android.content.Context)"->"android.support.v7.graphics.drawable.DrawerArrowDrawable: void setColor(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.graphics.drawable.DrawerArrowDrawable: void setBarThickness(float)" [label="DrawerArrowDrawable(setBarThickness)",];
    "android.support.v7.graphics.drawable.DrawerArrowDrawable: void <init>(android.content.Context)"->"android.support.v7.graphics.drawable.DrawerArrowDrawable: void setBarThickness(float)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.graphics.drawable.DrawerArrowDrawable: void setSpinEnabled(boolean)" [label="DrawerArrowDrawable(setSpinEnabled)",];
    "android.support.v7.graphics.drawable.DrawerArrowDrawable: void <init>(android.content.Context)"->"android.support.v7.graphics.drawable.DrawerArrowDrawable: void setSpinEnabled(boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.graphics.drawable.DrawerArrowDrawable: void setGapSize(float)" [label="DrawerArrowDrawable(setGapSize)",];
    "android.support.v7.graphics.drawable.DrawerArrowDrawable: void <init>(android.content.Context)"->"android.support.v7.graphics.drawable.DrawerArrowDrawable: void setGapSize(float)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.ActionBarDrawerToggle$IcsDelegate: void <init>(android.app.Activity)" [label="ActionBarDrawerToggle$IcsDelegate(<init>)",];
    "android.support.v7.app.ActionBarDrawerToggle: void <init>(android.app.Activity,android.support.v7.widget.Toolbar,android.support.v4.widget.DrawerLayout,android.support.v7.graphics.drawable.DrawerArrowDrawable,int,int)"->"android.support.v7.app.ActionBarDrawerToggle$IcsDelegate: void <init>(android.app.Activity)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.Toolbar: void setNavigationOnClickListener(android.view.View$OnClickListener)" [label="Toolbar(setNavigationOnClickListener)",];
    "android.support.v7.app.ActionBarDrawerToggle: void <init>(android.app.Activity,android.support.v7.widget.Toolbar,android.support.v4.widget.DrawerLayout,android.support.v7.graphics.drawable.DrawerArrowDrawable,int,int)"->"android.support.v7.widget.Toolbar: void setNavigationOnClickListener(android.view.View$OnClickListener)" [label="SIMPLE",style=bold,color=black,];
    "android.view.View$OnClickListener: void onClick(android.view.View)" [label="View$OnClickListener(onClick)",];
    "android.support.v7.widget.Toolbar: void setNavigationOnClickListener(android.view.View$OnClickListener)"->"android.view.View$OnClickListener: void onClick(android.view.View)" [label="GUI (NULL)",style=bold,color=firebrick,];
    "android.support.v7.widget.Toolbar: void ensureNavButtonView()" [label="Toolbar(ensureNavButtonView)",];
    "android.support.v7.widget.Toolbar: void setNavigationOnClickListener(android.view.View$OnClickListener)"->"android.support.v7.widget.Toolbar: void ensureNavButtonView()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.Toolbar: android.support.v7.widget.Toolbar$LayoutParams generateDefaultLayoutParams()" [label="Toolbar(generateDefaultLayoutParams)",];
    "android.support.v7.widget.Toolbar: void ensureNavButtonView()"->"android.support.v7.widget.Toolbar: android.support.v7.widget.Toolbar$LayoutParams generateDefaultLayoutParams()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.Toolbar$LayoutParams: void <init>(int,int)" [label="Toolbar$LayoutParams(<init>)",];
    "android.support.v7.widget.Toolbar: android.support.v7.widget.Toolbar$LayoutParams generateDefaultLayoutParams()"->"android.support.v7.widget.Toolbar$LayoutParams: void <init>(int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.ActionBar$LayoutParams: void <init>(int,int)" [label="ActionBar$LayoutParams(<init>)",];
    "android.support.v7.widget.Toolbar$LayoutParams: void <init>(int,int)"->"android.support.v7.app.ActionBar$LayoutParams: void <init>(int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatImageButton: void <init>(android.content.Context,android.util.AttributeSet,int)" [label="AppCompatImageButton(<init>)",];
    "android.support.v7.widget.Toolbar: void ensureNavButtonView()"->"android.support.v7.widget.AppCompatImageButton: void <init>(android.content.Context,android.util.AttributeSet,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)" [label="AppCompatImageHelper(loadFromAttributes)",];
    "android.support.v7.widget.AppCompatImageButton: void <init>(android.content.Context,android.util.AttributeSet,int)"->"android.support.v7.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.widget.ImageViewCompat: void setImageTintList(android.widget.ImageView,android.content.res.ColorStateList)" [label="ImageViewCompat(setImageTintList)",];
    "android.support.v7.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v4.widget.ImageViewCompat: void setImageTintList(android.widget.ImageView,android.content.res.ColorStateList)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.widget.ImageViewCompat$ImageViewCompatImpl: void setImageTintList(android.widget.ImageView,android.content.res.ColorStateList)" [label="ImageViewCompat$ImageViewCompatImpl(setImageTintList)",];
    "android.support.v4.widget.ImageViewCompat: void setImageTintList(android.widget.ImageView,android.content.res.ColorStateList)"->"android.support.v4.widget.ImageViewCompat$ImageViewCompatImpl: void setImageTintList(android.widget.ImageView,android.content.res.ColorStateList)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintTypedArray: boolean hasValue(int)" [label="TintTypedArray(hasValue)",];
    "android.support.v7.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.TintTypedArray: boolean hasValue(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.widget.ImageViewCompat: void setImageTintMode(android.widget.ImageView,android.graphics.PorterDuff$Mode)" [label="ImageViewCompat(setImageTintMode)",];
    "android.support.v7.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v4.widget.ImageViewCompat: void setImageTintMode(android.widget.ImageView,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.widget.ImageViewCompat$ImageViewCompatImpl: void setImageTintMode(android.widget.ImageView,android.graphics.PorterDuff$Mode)" [label="ImageViewCompat$ImageViewCompatImpl(setImageTintMode)",];
    "android.support.v4.widget.ImageViewCompat: void setImageTintMode(android.widget.ImageView,android.graphics.PorterDuff$Mode)"->"android.support.v4.widget.ImageViewCompat$ImageViewCompatImpl: void setImageTintMode(android.widget.ImageView,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.TintTypedArray: void recycle()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintTypedArray: int getInt(int,int)" [label="TintTypedArray(getInt)",];
    "android.support.v7.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.TintTypedArray: int getInt(int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.TintTypedArray: void recycle()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintTypedArray: int getResourceId(int,int)" [label="TintTypedArray(getResourceId)",];
    "android.support.v7.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.TintTypedArray: int getResourceId(int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintTypedArray: android.support.v7.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int)" [label="TintTypedArray(obtainStyledAttributes)",];
    "android.support.v7.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.TintTypedArray: android.support.v7.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintTypedArray: android.support.v7.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int)"->"android.support.v7.widget.TintTypedArray: void <init>(android.content.Context,android.content.res.TypedArray)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintTypedArray: android.content.res.ColorStateList getColorStateList(int)" [label="TintTypedArray(getColorStateList)",];
    "android.support.v7.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.TintTypedArray: android.content.res.ColorStateList getColorStateList(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)" [label="AppCompatResources(getColorStateList)",];
    "android.support.v7.widget.TintTypedArray: android.content.res.ColorStateList getColorStateList(int)"->"android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList inflateColorStateList(android.content.Context,int)" [label="AppCompatResources(inflateColorStateList)",];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)"->"android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList inflateColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)" [label="AppCompatColorStateListInflater(createFromXml)",];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList inflateColorStateList(android.content.Context,int)"->"android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)" [label="AppCompatColorStateListInflater(createFromXmlInner)",];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)"->"android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)" [label="AppCompatColorStateListInflater(inflate)",];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)"->"android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatColorStateListInflater: int modulateColorAlpha(int,float)" [label="AppCompatColorStateListInflater(modulateColorAlpha)",];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)"->"android.support.v7.content.res.AppCompatColorStateListInflater: int modulateColorAlpha(int,float)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatColorStateListInflater: int modulateColorAlpha(int,float)"->"android.support.v4.graphics.ColorUtils: int setAlphaComponent(int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.GrowingArrayUtils: int[] append(int[],int,int)" [label="GrowingArrayUtils(append)",];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)"->"android.support.v7.content.res.GrowingArrayUtils: int[] append(int[],int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.GrowingArrayUtils: int growSize(int)" [label="GrowingArrayUtils(growSize)",];
    "android.support.v7.content.res.GrowingArrayUtils: int[] append(int[],int,int)"->"android.support.v7.content.res.GrowingArrayUtils: int growSize(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])" [label="AppCompatColorStateListInflater(obtainAttributes)",];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)"->"android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.GrowingArrayUtils: java.lang.Object[] append(java.lang.Object[],int,java.lang.Object)" [label="GrowingArrayUtils(append)",];
    "android.support.v7.content.res.AppCompatColorStateListInflater: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)"->"android.support.v7.content.res.GrowingArrayUtils: java.lang.Object[] append(java.lang.Object[],int,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.GrowingArrayUtils: java.lang.Object[] append(java.lang.Object[],int,java.lang.Object)"->"android.support.v7.content.res.GrowingArrayUtils: int growSize(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatResources: boolean isColorInt(android.content.Context,int)" [label="AppCompatResources(isColorInt)",];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList inflateColorStateList(android.content.Context,int)"->"android.support.v7.content.res.AppCompatResources: boolean isColorInt(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatResources: android.util.TypedValue getTypedValue()" [label="AppCompatResources(getTypedValue)",];
    "android.support.v7.content.res.AppCompatResources: boolean isColorInt(android.content.Context,int)"->"android.support.v7.content.res.AppCompatResources: android.util.TypedValue getTypedValue()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatResources: void addColorStateListToCache(android.content.Context,int,android.content.res.ColorStateList)" [label="AppCompatResources(addColorStateListToCache)",];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)"->"android.support.v7.content.res.AppCompatResources: void addColorStateListToCache(android.content.Context,int,android.content.res.ColorStateList)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatResources$ColorStateListCacheEntry: void <init>(android.content.res.ColorStateList,android.content.res.Configuration)" [label="AppCompatResources$ColorStateListCacheEntry(<init>)",];
    "android.support.v7.content.res.AppCompatResources: void addColorStateListToCache(android.content.Context,int,android.content.res.ColorStateList)"->"android.support.v7.content.res.AppCompatResources$ColorStateListCacheEntry: void <init>(android.content.res.ColorStateList,android.content.res.Configuration)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.ContextCompat: android.content.res.ColorStateList getColorStateList(android.content.Context,int)" [label="ContextCompat(getColorStateList)",];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)"->"android.support.v4.content.ContextCompat: android.content.res.ColorStateList getColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getCachedColorStateList(android.content.Context,int)" [label="AppCompatResources(getCachedColorStateList)",];
    "android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)"->"android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getCachedColorStateList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)" [label="AppCompatResources(getDrawable)",];
    "android.support.v7.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: android.support.v7.widget.AppCompatDrawableManager get()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.TintTypedArray: boolean hasValue(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.DrawableUtils: android.graphics.PorterDuff$Mode parseTintMode(int,android.graphics.PorterDuff$Mode)" [label="DrawableUtils(parseTintMode)",];
    "android.support.v7.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.DrawableUtils: android.graphics.PorterDuff$Mode parseTintMode(int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintContextWrapper: android.content.Context wrap(android.content.Context)" [label="TintContextWrapper(wrap)",];
    "android.support.v7.widget.AppCompatImageButton: void <init>(android.content.Context,android.util.AttributeSet,int)"->"android.support.v7.widget.TintContextWrapper: android.content.Context wrap(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintContextWrapper: void <init>(android.content.Context)" [label="TintContextWrapper(<init>)",];
    "android.support.v7.widget.TintContextWrapper: android.content.Context wrap(android.content.Context)"->"android.support.v7.widget.TintContextWrapper: void <init>(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.VectorEnabledTintResources: boolean shouldBeUsed()" [label="VectorEnabledTintResources(shouldBeUsed)",];
    "android.support.v7.widget.TintContextWrapper: void <init>(android.content.Context)"->"android.support.v7.widget.VectorEnabledTintResources: boolean shouldBeUsed()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: boolean isCompatVectorFromResourcesEnabled()" [label="AppCompatDelegate(isCompatVectorFromResourcesEnabled)",];
    "android.support.v7.widget.VectorEnabledTintResources: boolean shouldBeUsed()"->"android.support.v7.app.AppCompatDelegate: boolean isCompatVectorFromResourcesEnabled()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.VectorEnabledTintResources: void <init>(android.content.Context,android.content.res.Resources)" [label="VectorEnabledTintResources(<init>)",];
    "android.support.v7.widget.TintContextWrapper: void <init>(android.content.Context)"->"android.support.v7.widget.VectorEnabledTintResources: void <init>(android.content.Context,android.content.res.Resources)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintResources: void <init>(android.content.Context,android.content.res.Resources)" [label="TintResources(<init>)",];
    "android.support.v7.widget.TintContextWrapper: void <init>(android.content.Context)"->"android.support.v7.widget.TintResources: void <init>(android.content.Context,android.content.res.Resources)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.ResourcesWrapper: void <init>(android.content.res.Resources)" [label="ResourcesWrapper(<init>)",];
    "android.support.v7.widget.TintResources: void <init>(android.content.Context,android.content.res.Resources)"->"android.support.v7.widget.ResourcesWrapper: void <init>(android.content.res.Resources)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintContextWrapper: boolean shouldWrap(android.content.Context)" [label="TintContextWrapper(shouldWrap)",];
    "android.support.v7.widget.TintContextWrapper: android.content.Context wrap(android.content.Context)"->"android.support.v7.widget.TintContextWrapper: boolean shouldWrap(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintContextWrapper: boolean shouldWrap(android.content.Context)"->"android.support.v7.widget.VectorEnabledTintResources: boolean shouldBeUsed()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)" [label="AppCompatBackgroundHelper(loadFromAttributes)",];
    "android.support.v7.widget.AppCompatImageButton: void <init>(android.content.Context,android.util.AttributeSet,int)"->"android.support.v7.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.TintTypedArray: boolean hasValue(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.DrawableUtils: android.graphics.PorterDuff$Mode parseTintMode(int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.TintTypedArray: android.content.res.ColorStateList getColorStateList(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.TintTypedArray: void recycle()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.TintTypedArray: int getInt(int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.ViewCompat: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)" [label="ViewCompat(setBackgroundTintList)",];
    "android.support.v7.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v4.view.ViewCompat: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.ViewCompat$ViewCompatBaseImpl: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)" [label="ViewCompat$ViewCompatBaseImpl(setBackgroundTintList)",];
    "android.support.v4.view.ViewCompat: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)"->"android.support.v4.view.ViewCompat$ViewCompatBaseImpl: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.TintableBackgroundView: void setSupportBackgroundTintList(android.content.res.ColorStateList)" [label="TintableBackgroundView(setSupportBackgroundTintList)",];
    "android.support.v4.view.ViewCompat$ViewCompatBaseImpl: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)"->"android.support.v4.view.TintableBackgroundView: void setSupportBackgroundTintList(android.content.res.ColorStateList)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.TintTypedArray: android.support.v7.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.TintTypedArray: int getResourceId(int,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.ViewCompat: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)" [label="ViewCompat(setBackgroundTintMode)",];
    "android.support.v7.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v4.view.ViewCompat: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.ViewCompat$ViewCompatBaseImpl: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)" [label="ViewCompat$ViewCompatBaseImpl(setBackgroundTintMode)",];
    "android.support.v4.view.ViewCompat: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)"->"android.support.v4.view.ViewCompat$ViewCompatBaseImpl: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.TintableBackgroundView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)" [label="TintableBackgroundView(setSupportBackgroundTintMode)",];
    "android.support.v4.view.ViewCompat$ViewCompatBaseImpl: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)"->"android.support.v4.view.TintableBackgroundView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.TintTypedArray: boolean hasValue(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.TintTypedArray: void recycle()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.TintTypedArray: boolean hasValue(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void setInternalBackgroundTint(android.content.res.ColorStateList)" [label="AppCompatBackgroundHelper(setInternalBackgroundTint)",];
    "android.support.v7.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)"->"android.support.v7.widget.AppCompatBackgroundHelper: void setInternalBackgroundTint(android.content.res.ColorStateList)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void applySupportBackgroundTint()" [label="AppCompatBackgroundHelper(applySupportBackgroundTint)",];
    "android.support.v7.widget.AppCompatBackgroundHelper: void setInternalBackgroundTint(android.content.res.ColorStateList)"->"android.support.v7.widget.AppCompatBackgroundHelper: void applySupportBackgroundTint()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,android.support.v7.widget.TintInfo,int[])" [label="AppCompatDrawableManager(tintDrawable)",];
    "android.support.v7.widget.AppCompatBackgroundHelper: void applySupportBackgroundTint()"->"android.support.v7.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,android.support.v7.widget.TintInfo,int[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter createTintFilter(android.content.res.ColorStateList,android.graphics.PorterDuff$Mode,int[])" [label="AppCompatDrawableManager(createTintFilter)",];
    "android.support.v7.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,android.support.v7.widget.TintInfo,int[])"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter createTintFilter(android.content.res.ColorStateList,android.graphics.PorterDuff$Mode,int[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter createTintFilter(android.content.res.ColorStateList,android.graphics.PorterDuff$Mode,int[])"->"android.support.v7.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,android.support.v7.widget.TintInfo,int[])"->"android.support.v7.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void applySupportBackgroundTint()"->"android.support.v7.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,android.support.v7.widget.TintInfo,int[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)" [label="AppCompatBackgroundHelper(applyFrameworkTintUsingColorFilter)",];
    "android.support.v7.widget.AppCompatBackgroundHelper: void applySupportBackgroundTint()"->"android.support.v7.widget.AppCompatBackgroundHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.ViewCompat: android.content.res.ColorStateList getBackgroundTintList(android.view.View)" [label="ViewCompat(getBackgroundTintList)",];
    "android.support.v7.widget.AppCompatBackgroundHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)"->"android.support.v4.view.ViewCompat: android.content.res.ColorStateList getBackgroundTintList(android.view.View)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.ViewCompat$ViewCompatBaseImpl: android.content.res.ColorStateList getBackgroundTintList(android.view.View)" [label="ViewCompat$ViewCompatBaseImpl(getBackgroundTintList)",];
    "android.support.v4.view.ViewCompat: android.content.res.ColorStateList getBackgroundTintList(android.view.View)"->"android.support.v4.view.ViewCompat$ViewCompatBaseImpl: android.content.res.ColorStateList getBackgroundTintList(android.view.View)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.TintableBackgroundView: android.content.res.ColorStateList getSupportBackgroundTintList()" [label="TintableBackgroundView(getSupportBackgroundTintList)",];
    "android.support.v4.view.ViewCompat$ViewCompatBaseImpl: android.content.res.ColorStateList getBackgroundTintList(android.view.View)"->"android.support.v4.view.TintableBackgroundView: android.content.res.ColorStateList getSupportBackgroundTintList()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintInfo: void clear()" [label="TintInfo(clear)",];
    "android.support.v7.widget.AppCompatBackgroundHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)"->"android.support.v7.widget.TintInfo: void clear()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.ViewCompat: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)" [label="ViewCompat(getBackgroundTintMode)",];
    "android.support.v7.widget.AppCompatBackgroundHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)"->"android.support.v4.view.ViewCompat: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.ViewCompat$ViewCompatBaseImpl: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)" [label="ViewCompat$ViewCompatBaseImpl(getBackgroundTintMode)",];
    "android.support.v4.view.ViewCompat: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)"->"android.support.v4.view.ViewCompat$ViewCompatBaseImpl: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.TintableBackgroundView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()" [label="TintableBackgroundView(getSupportBackgroundTintMode)",];
    "android.support.v4.view.ViewCompat$ViewCompatBaseImpl: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)"->"android.support.v4.view.TintableBackgroundView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)"->"android.support.v7.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,android.support.v7.widget.TintInfo,int[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.TintInfo: void <init>()" [label="TintInfo(<init>)",];
    "android.support.v7.widget.AppCompatBackgroundHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)"->"android.support.v7.widget.TintInfo: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: boolean shouldApplyFrameworkTintUsingColorFilter()" [label="AppCompatBackgroundHelper(shouldApplyFrameworkTintUsingColorFilter)",];
    "android.support.v7.widget.AppCompatBackgroundHelper: void applySupportBackgroundTint()"->"android.support.v7.widget.AppCompatBackgroundHelper: boolean shouldApplyFrameworkTintUsingColorFilter()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void setInternalBackgroundTint(android.content.res.ColorStateList)"->"android.support.v7.widget.TintInfo: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void <init>(android.view.View)" [label="AppCompatBackgroundHelper(<init>)",];
    "android.support.v7.widget.AppCompatImageButton: void <init>(android.content.Context,android.util.AttributeSet,int)"->"android.support.v7.widget.AppCompatBackgroundHelper: void <init>(android.view.View)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatBackgroundHelper: void <init>(android.view.View)"->"android.support.v7.widget.AppCompatDrawableManager: android.support.v7.widget.AppCompatDrawableManager get()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.AppCompatImageHelper: void <init>(android.widget.ImageView)" [label="AppCompatImageHelper(<init>)",];
    "android.support.v7.widget.AppCompatImageButton: void <init>(android.content.Context,android.util.AttributeSet,int)"->"android.support.v7.widget.AppCompatImageHelper: void <init>(android.widget.ImageView)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.ActionBarDrawerToggle$JellybeanMr2Delegate: void <init>(android.app.Activity)" [label="ActionBarDrawerToggle$JellybeanMr2Delegate(<init>)",];
    "android.support.v7.app.ActionBarDrawerToggle: void <init>(android.app.Activity,android.support.v7.widget.Toolbar,android.support.v4.widget.DrawerLayout,android.support.v7.graphics.drawable.DrawerArrowDrawable,int,int)"->"android.support.v7.app.ActionBarDrawerToggle$JellybeanMr2Delegate: void <init>(android.app.Activity)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.ActionBarDrawerToggle: android.graphics.drawable.Drawable getThemeUpIndicator()" [label="ActionBarDrawerToggle(getThemeUpIndicator)",];
    "android.support.v7.app.ActionBarDrawerToggle: void <init>(android.app.Activity,android.support.v7.widget.Toolbar,android.support.v4.widget.DrawerLayout,android.support.v7.graphics.drawable.DrawerArrowDrawable,int,int)"->"android.support.v7.app.ActionBarDrawerToggle: android.graphics.drawable.Drawable getThemeUpIndicator()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.ActionBarDrawerToggle$Delegate: android.graphics.drawable.Drawable getThemeUpIndicator()" [label="ActionBarDrawerToggle$Delegate(getThemeUpIndicator)",];
    "android.support.v7.app.ActionBarDrawerToggle: android.graphics.drawable.Drawable getThemeUpIndicator()"->"android.support.v7.app.ActionBarDrawerToggle$Delegate: android.graphics.drawable.Drawable getThemeUpIndicator()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.ActionBarDrawerToggle$ToolbarCompatDelegate: void <init>(android.support.v7.widget.Toolbar)" [label="ActionBarDrawerToggle$ToolbarCompatDelegate(<init>)",];
    "android.support.v7.app.ActionBarDrawerToggle: void <init>(android.app.Activity,android.support.v7.widget.Toolbar,android.support.v4.widget.DrawerLayout,android.support.v7.graphics.drawable.DrawerArrowDrawable,int,int)"->"android.support.v7.app.ActionBarDrawerToggle$ToolbarCompatDelegate: void <init>(android.support.v7.widget.Toolbar)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.Toolbar: android.graphics.drawable.Drawable getNavigationIcon()" [label="Toolbar(getNavigationIcon)",];
    "android.support.v7.app.ActionBarDrawerToggle$ToolbarCompatDelegate: void <init>(android.support.v7.widget.Toolbar)"->"android.support.v7.widget.Toolbar: android.graphics.drawable.Drawable getNavigationIcon()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.widget.Toolbar: java.lang.CharSequence getNavigationContentDescription()" [label="Toolbar(getNavigationContentDescription)",];
    "android.support.v7.app.ActionBarDrawerToggle$ToolbarCompatDelegate: void <init>(android.support.v7.widget.Toolbar)"->"android.support.v7.widget.Toolbar: java.lang.CharSequence getNavigationContentDescription()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.ActionBarDrawerToggle$Delegate: android.content.Context getActionBarThemedContext()" [label="ActionBarDrawerToggle$Delegate(getActionBarThemedContext)",];
    "android.support.v7.app.ActionBarDrawerToggle: void <init>(android.app.Activity,android.support.v7.widget.Toolbar,android.support.v4.widget.DrawerLayout,android.support.v7.graphics.drawable.DrawerArrowDrawable,int,int)"->"android.support.v7.app.ActionBarDrawerToggle$Delegate: android.content.Context getActionBarThemedContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.ActionBarDrawerToggle$1: void <init>(android.support.v7.app.ActionBarDrawerToggle)" [label="ActionBarDrawerToggle$1(<init>)",];
    "android.support.v7.app.ActionBarDrawerToggle: void <init>(android.app.Activity,android.support.v7.widget.Toolbar,android.support.v4.widget.DrawerLayout,android.support.v7.graphics.drawable.DrawerArrowDrawable,int,int)"->"android.support.v7.app.ActionBarDrawerToggle$1: void <init>(android.support.v7.app.ActionBarDrawerToggle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.ActionBarDrawerToggle$DelegateProvider: android.support.v7.app.ActionBarDrawerToggle$Delegate getDrawerToggleDelegate()" [label="ActionBarDrawerToggle$DelegateProvider(getDrawerToggleDelegate)",];
    "android.support.v7.app.ActionBarDrawerToggle: void <init>(android.app.Activity,android.support.v7.widget.Toolbar,android.support.v4.widget.DrawerLayout,android.support.v7.graphics.drawable.DrawerArrowDrawable,int,int)"->"android.support.v7.app.ActionBarDrawerToggle$DelegateProvider: android.support.v7.app.ActionBarDrawerToggle$Delegate getDrawerToggleDelegate()" [label="SIMPLE",style=bold,color=black,];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatActivity: android.view.View findViewById(int)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdRequest$Builder: void <init>()" [label="AdRequest$Builder(<init>)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"com.google.android.gms.ads.AdRequest$Builder: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlu: void <init>()" [label="zzlu(<init>)",];
    "com.google.android.gms.ads.AdRequest$Builder: void <init>()"->"com.google.android.gms.internal.zzlu: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlu: void zzae(java.lang.String)" [label="zzlu(zzae)",];
    "com.google.android.gms.ads.AdRequest$Builder: void <init>()"->"com.google.android.gms.internal.zzlu: void zzae(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: android.support.v7.app.ActionBar getSupportActionBar()" [label="AppCompatActivity(getSupportActionBar)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatActivity: android.support.v7.app.ActionBar getSupportActionBar()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: android.support.v7.app.ActionBar getSupportActionBar()" [label="AppCompatDelegate(getSupportActionBar)",];
    "android.support.v7.app.AppCompatActivity: android.support.v7.app.ActionBar getSupportActionBar()"->"android.support.v7.app.AppCompatDelegate: android.support.v7.app.ActionBar getSupportActionBar()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: android.support.v7.app.ActionBar getSupportActionBar()"->"android.support.v7.app.AppCompatActivity: android.support.v7.app.AppCompatDelegate getDelegate()" [label="SIMPLE",style=bold,color=black,];
    "android.support.design.widget.NavigationView: void setNavigationItemSelectedListener(android.support.design.widget.NavigationView$OnNavigationItemSelectedListener)" [label="NavigationView(setNavigationItemSelectedListener)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"android.support.design.widget.NavigationView: void setNavigationItemSelectedListener(android.support.design.widget.NavigationView$OnNavigationItemSelectedListener)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdRequest$Builder: com.google.android.gms.ads.AdRequest build()" [label="AdRequest$Builder(build)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"com.google.android.gms.ads.AdRequest$Builder: com.google.android.gms.ads.AdRequest build()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdRequest: void <init>(com.google.android.gms.ads.AdRequest$Builder,com.google.android.gms.ads.zza)" [label="AdRequest(<init>)",];
    "com.google.android.gms.ads.AdRequest$Builder: com.google.android.gms.ads.AdRequest build()"->"com.google.android.gms.ads.AdRequest: void <init>(com.google.android.gms.ads.AdRequest$Builder,com.google.android.gms.ads.zza)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdRequest: void <init>(com.google.android.gms.ads.AdRequest$Builder)" [label="AdRequest(<init>)",];
    "com.google.android.gms.ads.AdRequest: void <init>(com.google.android.gms.ads.AdRequest$Builder,com.google.android.gms.ads.zza)"->"com.google.android.gms.ads.AdRequest: void <init>(com.google.android.gms.ads.AdRequest$Builder)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu)" [label="zzlt(<init>)",];
    "com.google.android.gms.ads.AdRequest: void <init>(com.google.android.gms.ads.AdRequest$Builder)"->"com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu,com.google.android.gms.ads.search.SearchAdRequest)" [label="zzlt(<init>)",];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu)"->"com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu,com.google.android.gms.ads.search.SearchAdRequest)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlu: java.util.HashSet zzd(com.google.android.gms.internal.zzlu)" [label="zzlu(zzd)",];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.zzlu: java.util.HashSet zzd(com.google.android.gms.internal.zzlu)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlu: int zzc(com.google.android.gms.internal.zzlu)" [label="zzlu(zzc)",];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.zzlu: int zzc(com.google.android.gms.internal.zzlu)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlu: java.util.HashSet zzn(com.google.android.gms.internal.zzlu)" [label="zzlu(zzn)",];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.zzlu: java.util.HashSet zzn(com.google.android.gms.internal.zzlu)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlu: java.lang.String zzb(com.google.android.gms.internal.zzlu)" [label="zzlu(zzb)",];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.zzlu: java.lang.String zzb(com.google.android.gms.internal.zzlu)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlu: android.os.Bundle zzm(com.google.android.gms.internal.zzlu)" [label="zzlu(zzm)",];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.zzlu: android.os.Bundle zzm(com.google.android.gms.internal.zzlu)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlu: java.lang.String zzi(com.google.android.gms.internal.zzlu)" [label="zzlu(zzi)",];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.zzlu: java.lang.String zzi(com.google.android.gms.internal.zzlu)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlu: android.location.Location zze(com.google.android.gms.internal.zzlu)" [label="zzlu(zze)",];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.zzlu: android.location.Location zze(com.google.android.gms.internal.zzlu)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlu: java.lang.String zzj(com.google.android.gms.internal.zzlu)" [label="zzlu(zzj)",];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.zzlu: java.lang.String zzj(com.google.android.gms.internal.zzlu)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlu: boolean zzo(com.google.android.gms.internal.zzlu)" [label="zzlu(zzo)",];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.zzlu: boolean zzo(com.google.android.gms.internal.zzlu)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlu: boolean zzf(com.google.android.gms.internal.zzlu)" [label="zzlu(zzf)",];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.zzlu: boolean zzf(com.google.android.gms.internal.zzlu)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlu: java.util.HashMap zzh(com.google.android.gms.internal.zzlu)" [label="zzlu(zzh)",];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.zzlu: java.util.HashMap zzh(com.google.android.gms.internal.zzlu)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlu: java.util.HashSet zzl(com.google.android.gms.internal.zzlu)" [label="zzlu(zzl)",];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.zzlu: java.util.HashSet zzl(com.google.android.gms.internal.zzlu)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlu: int zzk(com.google.android.gms.internal.zzlu)" [label="zzlu(zzk)",];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.zzlu: int zzk(com.google.android.gms.internal.zzlu)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlu: android.os.Bundle zzg(com.google.android.gms.internal.zzlu)" [label="zzlu(zzg)",];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.zzlu: android.os.Bundle zzg(com.google.android.gms.internal.zzlu)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlu: java.util.Date zza(com.google.android.gms.internal.zzlu)" [label="zzlu(zza)",];
    "com.google.android.gms.internal.zzlt: void <init>(com.google.android.gms.internal.zzlu,com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.zzlu: java.util.Date zza(com.google.android.gms.internal.zzlu)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdRequest$Builder: com.google.android.gms.internal.zzlu zza(com.google.android.gms.ads.AdRequest$Builder)" [label="AdRequest$Builder(zza)",];
    "com.google.android.gms.ads.AdRequest: void <init>(com.google.android.gms.ads.AdRequest$Builder)"->"com.google.android.gms.ads.AdRequest$Builder: com.google.android.gms.internal.zzlu zza(com.google.android.gms.ads.AdRequest$Builder)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()" [label="FragmentActivity(getSupportFragmentManager)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentController: android.support.v4.app.FragmentManager getSupportFragmentManager()" [label="FragmentController(getSupportFragmentManager)",];
    "android.support.v4.app.FragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()"->"android.support.v4.app.FragmentController: android.support.v4.app.FragmentManager getSupportFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: android.support.v4.app.FragmentManagerImpl getFragmentManagerImpl()" [label="FragmentHostCallback(getFragmentManagerImpl)",];
    "android.support.v4.app.FragmentController: android.support.v4.app.FragmentManager getSupportFragmentManager()"->"android.support.v4.app.FragmentHostCallback: android.support.v4.app.FragmentManagerImpl getFragmentManagerImpl()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.ActionBar: void setTitle(int)" [label="ActionBar(setTitle)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"android.support.v7.app.ActionBar: void setTitle(int)" [label="SIMPLE",style=bold,color=black,];
    "com.zaidisoft.teninone.TipCalculator: void <init>()" [label="TipCalculator(<init>)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"com.zaidisoft.teninone.TipCalculator: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void <init>()" [label="Fragment(<init>)",];
    "com.zaidisoft.teninone.TipCalculator: void <init>()"->"android.support.v4.app.Fragment: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void <init>(android.arch.lifecycle.LifecycleOwner)" [label="LifecycleRegistry(<init>)",];
    "android.support.v4.app.Fragment: void <init>()"->"android.arch.lifecycle.LifecycleRegistry: void <init>(android.arch.lifecycle.LifecycleOwner)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.Lifecycle: void <init>()" [label="Lifecycle(<init>)",];
    "android.arch.lifecycle.LifecycleRegistry: void <init>(android.arch.lifecycle.LifecycleOwner)"->"android.arch.lifecycle.Lifecycle: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.FastSafeIterableMap: void <init>()" [label="FastSafeIterableMap(<init>)",];
    "android.arch.lifecycle.LifecycleRegistry: void <init>(android.arch.lifecycle.LifecycleOwner)"->"android.arch.core.internal.FastSafeIterableMap: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap: void <init>()" [label="SafeIterableMap(<init>)",];
    "android.arch.core.internal.FastSafeIterableMap: void <init>()"->"android.arch.core.internal.SafeIterableMap: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatActivity: android.support.v7.app.ActionBar getSupportActionBar()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: void onCreate(android.os.Bundle)" [label="AppCompatActivity(onCreate)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatActivity: void onCreate(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatActivity: android.support.v7.app.AppCompatDelegate getDelegate()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)" [label="FragmentActivity(onCreate)",];
    "android.support.v7.app.AppCompatActivity: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: void <init>(int)" [label="SparseArrayCompat(<init>)",];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)"->"android.support.v4.util.SparseArrayCompat: void <init>(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: void <init>(int)"->"android.support.v4.util.ContainerHelpers: int idealIntArraySize(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)"->"android.support.v4.util.SparseArrayCompat: void put(int,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentController: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)" [label="FragmentController(restoreAllState)",];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentController: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)" [label="FragmentManagerImpl(restoreAllState)",];
    "android.support.v4.app.FragmentController: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)"->"android.support.v4.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentState: android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentHostCallback,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerNonConfig)" [label="FragmentState(instantiate)",];
    "android.support.v4.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)"->"android.support.v4.app.FragmentState: android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentHostCallback,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerNonConfig)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentContainer: android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)" [label="FragmentContainer(instantiate)",];
    "android.support.v4.app.FragmentState: android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentHostCallback,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerNonConfig)"->"android.support.v4.app.FragmentContainer: android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)" [label="Fragment(instantiate)",];
    "android.support.v4.app.FragmentContainer: android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)"->"android.support.v4.app.Fragment: android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)" [label="Fragment$InstantiationException(<init>)",];
    "android.support.v4.app.Fragment: android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)"->"android.support.v4.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)"->"android.support.v4.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)"->"android.support.v4.util.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void setArguments(android.os.Bundle)" [label="Fragment(setArguments)",];
    "android.support.v4.app.Fragment: android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)"->"android.support.v4.app.Fragment: void setArguments(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: boolean isStateSaved()" [label="Fragment(isStateSaved)",];
    "android.support.v4.app.Fragment: void setArguments(android.os.Bundle)"->"android.support.v4.app.Fragment: boolean isStateSaved()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: boolean isStateSaved()" [label="FragmentManagerImpl(isStateSaved)",];
    "android.support.v4.app.Fragment: boolean isStateSaved()"->"android.support.v4.app.FragmentManagerImpl: boolean isStateSaved()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)"->"android.support.v4.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)"->"android.support.v4.util.SimpleArrayMap: java.lang.Object get(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)"->"android.support.v4.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)"->"android.support.v4.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void setIndex(int,android.support.v4.app.Fragment)" [label="Fragment(setIndex)",];
    "android.support.v4.app.FragmentState: android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentHostCallback,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerNonConfig)"->"android.support.v4.app.Fragment: void setIndex(int,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="FragmentHostCallback(getContext)",];
    "android.support.v4.app.FragmentState: android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentHostCallback,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerNonConfig)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentState: android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentHostCallback,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerNonConfig)"->"android.support.v4.app.Fragment: android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerNonConfig: java.util.List getFragments()" [label="FragmentManagerNonConfig(getFragments)",];
    "android.support.v4.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)"->"android.support.v4.app.FragmentManagerNonConfig: java.util.List getFragments()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.BackStackState: android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl)" [label="BackStackState(instantiate)",];
    "android.support.v4.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)"->"android.support.v4.app.BackStackState: android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.BackStackRecord: void bumpBackStackNesting(int)" [label="BackStackRecord(bumpBackStackNesting)",];
    "android.support.v4.app.BackStackState: android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl)"->"android.support.v4.app.BackStackRecord: void bumpBackStackNesting(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.BackStackRecord: void addOp(android.support.v4.app.BackStackRecord$Op)" [label="BackStackRecord(addOp)",];
    "android.support.v4.app.BackStackState: android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl)"->"android.support.v4.app.BackStackRecord: void addOp(android.support.v4.app.BackStackRecord$Op)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.BackStackRecord: void <init>(android.support.v4.app.FragmentManagerImpl)" [label="BackStackRecord(<init>)",];
    "android.support.v4.app.BackStackState: android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl)"->"android.support.v4.app.BackStackRecord: void <init>(android.support.v4.app.FragmentManagerImpl)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentTransaction: void <init>()" [label="FragmentTransaction(<init>)",];
    "android.support.v4.app.BackStackRecord: void <init>(android.support.v4.app.FragmentManagerImpl)"->"android.support.v4.app.FragmentTransaction: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.BackStackRecord$Op: void <init>()" [label="BackStackRecord$Op(<init>)",];
    "android.support.v4.app.BackStackState: android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl)"->"android.support.v4.app.BackStackRecord$Op: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)" [label="FragmentManagerImpl(throwException)",];
    "android.support.v4.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)"->"android.support.v4.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])" [label="FragmentManagerImpl(dump)",];
    "android.support.v4.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)"->"android.support.v4.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])" [label="Fragment(dump)",];
    "android.support.v4.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])" [label="LoaderManagerImpl(dump)",];
    "android.support.v4.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SparseArrayCompat(valueAt)",];
    "android.support.v4.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)"->"android.support.v4.util.SparseArrayCompat: void gc()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])" [label="LoaderManagerImpl$LoaderInfo(dump)",];
    "android.support.v4.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])" [label="Loader(dump)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: int keyAt(int)" [label="SparseArrayCompat(keyAt)",];
    "android.support.v4.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.util.SparseArrayCompat: int keyAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: int keyAt(int)"->"android.support.v4.util.SparseArrayCompat: void gc()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: int size()" [label="SparseArrayCompat(size)",];
    "android.support.v4.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: int size()"->"android.support.v4.util.SparseArrayCompat: void gc()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: java.lang.String toString()" [label="LoaderManagerImpl$LoaderInfo(toString)",];
    "android.support.v4.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: java.lang.String toString()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.DebugUtils: void buildShortClassTag(java.lang.Object,java.lang.StringBuilder)" [label="DebugUtils(buildShortClassTag)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: java.lang.String toString()"->"android.support.v4.util.DebugUtils: void buildShortClassTag(java.lang.Object,java.lang.StringBuilder)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.util.SparseArrayCompat: int keyAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: java.lang.String toString()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.view.View getAnimatingAway()" [label="Fragment(getAnimatingAway)",];
    "android.support.v4.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.Fragment: android.view.View getAnimatingAway()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: int getNextAnim()" [label="Fragment(getNextAnim)",];
    "android.support.v4.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.Fragment: int getNextAnim()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.Fragment: android.view.View getAnimatingAway()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.Fragment: int getNextAnim()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: int getStateAfterAnimating()" [label="Fragment(getStateAfterAnimating)",];
    "android.support.v4.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.Fragment: int getStateAfterAnimating()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: java.lang.String toString()" [label="Fragment(toString)",];
    "android.support.v4.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.Fragment: java.lang.String toString()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: java.lang.String toString()"->"android.support.v4.util.DebugUtils: void buildShortClassTag(java.lang.Object,java.lang.StringBuilder)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.Fragment: java.lang.String toString()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.BackStackRecord: java.lang.String toString()" [label="BackStackRecord(toString)",];
    "android.support.v4.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.BackStackRecord: java.lang.String toString()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])" [label="BackStackRecord(dump)",];
    "android.support.v4.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.BackStackRecord: void dump(java.lang.String,java.io.PrintWriter,boolean)" [label="BackStackRecord(dump)",];
    "android.support.v4.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])"->"android.support.v4.app.BackStackRecord: void dump(java.lang.String,java.io.PrintWriter,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])" [label="FragmentHostCallback(onDump)",];
    "android.support.v4.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)"->"android.support.v4.app.FragmentHostCallback: void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.LogWriter: void <init>(java.lang.String)" [label="LogWriter(<init>)",];
    "android.support.v4.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)"->"android.support.v4.util.LogWriter: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)"->"android.support.v4.app.BackStackRecord: void dump(java.lang.String,java.io.PrintWriter,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerNonConfig: java.util.List getChildNonConfigs()" [label="FragmentManagerNonConfig(getChildNonConfigs)",];
    "android.support.v4.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)"->"android.support.v4.app.FragmentManagerNonConfig: java.util.List getChildNonConfigs()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void setBackStackIndex(int,android.support.v4.app.BackStackRecord)" [label="FragmentManagerImpl(setBackStackIndex)",];
    "android.support.v4.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)"->"android.support.v4.app.FragmentManagerImpl: void setBackStackIndex(int,android.support.v4.app.BackStackRecord)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)"->"android.support.v4.app.FragmentManagerNonConfig: java.util.List getFragments()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)"->"android.support.v4.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.support.v4.app.FragmentManagerNonConfig)"->"android.support.v4.util.LogWriter: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)"->"android.support.v4.util.SparseArrayCompat: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.SupportActivity: void onCreate(android.os.Bundle)" [label="SupportActivity(onCreate)",];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)"->"android.support.v4.app.SupportActivity: void onCreate(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)" [label="ReportFragment(injectIfNeededIn)",];
    "android.support.v4.app.SupportActivity: void onCreate(android.os.Bundle)"->"android.arch.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.ReportFragment: void <init>()" [label="ReportFragment(<init>)",];
    "android.arch.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)"->"android.arch.lifecycle.ReportFragment: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentController: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)" [label="FragmentController(restoreLoaderNonConfig)",];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentController: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)" [label="FragmentHostCallback(restoreLoaderNonConfig)",];
    "android.support.v4.app.FragmentController: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)"->"android.support.v4.app.FragmentHostCallback: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void updateHostController(android.support.v4.app.FragmentHostCallback)" [label="LoaderManagerImpl(updateHostController)",];
    "android.support.v4.app.FragmentHostCallback: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)"->"android.support.v4.app.LoaderManagerImpl: void updateHostController(android.support.v4.app.FragmentHostCallback)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object valueAt(int)" [label="SimpleArrayMap(valueAt)",];
    "android.support.v4.app.FragmentHostCallback: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)"->"android.support.v4.util.SimpleArrayMap: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: int size()" [label="SimpleArrayMap(size)",];
    "android.support.v4.app.FragmentHostCallback: void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap)"->"android.support.v4.util.SimpleArrayMap: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentController: void attachHost(android.support.v4.app.Fragment)" [label="FragmentController(attachHost)",];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentController: void attachHost(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void attachController(android.support.v4.app.FragmentHostCallback,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment)" [label="FragmentManagerImpl(attachController)",];
    "android.support.v4.app.FragmentController: void attachHost(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: void attachController(android.support.v4.app.FragmentHostCallback,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentController: void dispatchCreate()" [label="FragmentController(dispatchCreate)",];
    "android.support.v4.app.FragmentActivity: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentController: void dispatchCreate()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchCreate()" [label="FragmentManagerImpl(dispatchCreate)",];
    "android.support.v4.app.FragmentController: void dispatchCreate()"->"android.support.v4.app.FragmentManagerImpl: void dispatchCreate()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)" [label="FragmentManagerImpl(dispatchStateChange)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchCreate()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(int,boolean)" [label="FragmentManagerImpl(moveToState)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)"->"android.support.v4.app.FragmentManagerImpl: void moveToState(int,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: boolean hasRunningLoaders()" [label="LoaderManagerImpl(hasRunningLoaders)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(int,boolean)"->"android.support.v4.app.LoaderManagerImpl: boolean hasRunningLoaders()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: boolean hasRunningLoaders()"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: boolean hasRunningLoaders()"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: void onSupportInvalidateOptionsMenu()" [label="FragmentHostCallback(onSupportInvalidateOptionsMenu)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(int,boolean)"->"android.support.v4.app.FragmentHostCallback: void onSupportInvalidateOptionsMenu()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)" [label="FragmentManagerImpl(moveFragmentToExpectedState)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)" [label="FragmentManagerImpl(moveToState)",];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onAttachFragment(android.support.v4.app.Fragment)" [label="Fragment(onAttachFragment)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void onAttachFragment(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void saveFragmentViewState(android.support.v4.app.Fragment)" [label="FragmentManagerImpl(saveFragmentViewState)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void saveFragmentViewState(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDetached(android.support.v4.app.Fragment,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentDetached)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDetached(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDetached(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentDetached)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDetached(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDetached(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDetached(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDetached(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="Fragment(getFragmentManager)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDetached(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentPreCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreCreated(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.os.Bundle)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentPreCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreCreated(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)" [label="Fragment(performCreateView)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)" [label="Fragment(onCreateView)",];
    "android.support.v4.app.Fragment: android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)"->"android.support.v4.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void noteStateNotSaved()" [label="FragmentManagerImpl(noteStateNotSaved)",];
    "android.support.v4.app.Fragment: android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)"->"android.support.v4.app.FragmentManagerImpl: void noteStateNotSaved()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void noteStateNotSaved()" [label="Fragment(noteStateNotSaved)",];
    "android.support.v4.app.FragmentManagerImpl: void noteStateNotSaved()"->"android.support.v4.app.Fragment: void noteStateNotSaved()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void noteStateNotSaved()"->"android.support.v4.app.FragmentManagerImpl: void noteStateNotSaved()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewDestroyed(android.support.v4.app.Fragment,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentViewDestroyed)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewDestroyed(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewDestroyed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewDestroyed(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewDestroyed(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentViewDestroyed)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewDestroyed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewDestroyed(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewDestroyed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: void onAttachFragment(android.support.v4.app.Fragment)" [label="FragmentHostCallback(onAttachFragment)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentHostCallback: void onAttachFragment(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentCreated(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.os.Bundle)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentCreated(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performDestroy()" [label="Fragment(performDestroy)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performDestroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SuperNotCalledException(<init>)",];
    "android.support.v4.app.Fragment: void performDestroy()"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchDestroy()" [label="FragmentManagerImpl(dispatchDestroy)",];
    "android.support.v4.app.Fragment: void performDestroy()"->"android.support.v4.app.FragmentManagerImpl: void dispatchDestroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchDestroy()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: boolean execPendingActions()" [label="FragmentManagerImpl(execPendingActions)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchDestroy()"->"android.support.v4.app.FragmentManagerImpl: boolean execPendingActions()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onDestroy()" [label="Fragment(onDestroy)",];
    "android.support.v4.app.Fragment: void performDestroy()"->"android.support.v4.app.Fragment: void onDestroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()" [label="LoaderManagerImpl(doDestroy)",];
    "android.support.v4.app.Fragment: void onDestroy()"->"android.support.v4.app.LoaderManagerImpl: void doDestroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SparseArrayCompat: void clear()" [label="SparseArrayCompat(clear)",];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()"->"android.support.v4.util.SparseArrayCompat: void clear()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()"->"android.support.v4.util.SparseArrayCompat: void clear()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()" [label="LoaderManagerImpl$LoaderInfo(destroy)",];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void reset()" [label="Loader(reset)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()"->"android.support.v4.content.Loader: void reset()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void onReset()" [label="Loader(onReset)",];
    "android.support.v4.content.Loader: void reset()"->"android.support.v4.content.Loader: void onReset()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManager$LoaderCallbacks: void onLoaderReset(android.support.v4.content.Loader)" [label="LoaderManager$LoaderCallbacks(onLoaderReset)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()"->"android.support.v4.app.LoaderManager$LoaderCallbacks: void onLoaderReset(android.support.v4.content.Loader)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener)" [label="Loader(unregisterListener)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()"->"android.support.v4.content.Loader: void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void unregisterOnLoadCanceledListener(android.support.v4.content.Loader$OnLoadCanceledListener)" [label="Loader(unregisterOnLoadCanceledListener)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()"->"android.support.v4.content.Loader: void unregisterOnLoadCanceledListener(android.support.v4.content.Loader$OnLoadCanceledListener)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void destroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doDestroy()"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean)" [label="FragmentHostCallback(getLoaderManager)",];
    "android.support.v4.app.Fragment: void onDestroy()"->"android.support.v4.app.FragmentHostCallback: android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)" [label="LifecycleRegistry(handleLifecycleEvent)",];
    "android.support.v4.app.Fragment: void performDestroy()"->"android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State getStateAfter(android.arch.lifecycle.Lifecycle$Event)" [label="LifecycleRegistry(getStateAfter)",];
    "android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)"->"android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State getStateAfter(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void moveToState(android.arch.lifecycle.Lifecycle$State)" [label="LifecycleRegistry(moveToState)",];
    "android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)"->"android.arch.lifecycle.LifecycleRegistry: void moveToState(android.arch.lifecycle.Lifecycle$State)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void sync()" [label="LifecycleRegistry(sync)",];
    "android.arch.lifecycle.LifecycleRegistry: void moveToState(android.arch.lifecycle.Lifecycle$State)"->"android.arch.lifecycle.LifecycleRegistry: void sync()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void forwardPass(android.arch.lifecycle.LifecycleOwner)" [label="LifecycleRegistry(forwardPass)",];
    "android.arch.lifecycle.LifecycleRegistry: void sync()"->"android.arch.lifecycle.LifecycleRegistry: void forwardPass(android.arch.lifecycle.LifecycleOwner)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$Event upEvent(android.arch.lifecycle.Lifecycle$State)" [label="LifecycleRegistry(upEvent)",];
    "android.arch.lifecycle.LifecycleRegistry: void forwardPass(android.arch.lifecycle.LifecycleOwner)"->"android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$Event upEvent(android.arch.lifecycle.Lifecycle$State)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)" [label="LifecycleRegistry$ObserverWithState(dispatchEvent)",];
    "android.arch.lifecycle.LifecycleRegistry: void forwardPass(android.arch.lifecycle.LifecycleOwner)"->"android.arch.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)"->"android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State getStateAfter(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.GenericLifecycleObserver: void onStateChanged(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)" [label="GenericLifecycleObserver(onStateChanged)",];
    "android.arch.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)"->"android.arch.lifecycle.GenericLifecycleObserver: void onStateChanged(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State min(android.arch.lifecycle.Lifecycle$State,android.arch.lifecycle.Lifecycle$State)" [label="LifecycleRegistry(min)",];
    "android.arch.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)"->"android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State min(android.arch.lifecycle.Lifecycle$State,android.arch.lifecycle.Lifecycle$State)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void pushParentState(android.arch.lifecycle.Lifecycle$State)" [label="LifecycleRegistry(pushParentState)",];
    "android.arch.lifecycle.LifecycleRegistry: void forwardPass(android.arch.lifecycle.LifecycleOwner)"->"android.arch.lifecycle.LifecycleRegistry: void pushParentState(android.arch.lifecycle.Lifecycle$State)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap: android.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()" [label="SafeIterableMap(iteratorWithAdditions)",];
    "android.arch.lifecycle.LifecycleRegistry: void forwardPass(android.arch.lifecycle.LifecycleOwner)"->"android.arch.core.internal.SafeIterableMap: android.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap$IteratorWithAdditions: void <init>(android.arch.core.internal.SafeIterableMap,android.arch.core.internal.SafeIterableMap$1)" [label="SafeIterableMap$IteratorWithAdditions(<init>)",];
    "android.arch.core.internal.SafeIterableMap: android.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()"->"android.arch.core.internal.SafeIterableMap$IteratorWithAdditions: void <init>(android.arch.core.internal.SafeIterableMap,android.arch.core.internal.SafeIterableMap$1)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap$IteratorWithAdditions: void <init>(android.arch.core.internal.SafeIterableMap)" [label="SafeIterableMap$IteratorWithAdditions(<init>)",];
    "android.arch.core.internal.SafeIterableMap$IteratorWithAdditions: void <init>(android.arch.core.internal.SafeIterableMap,android.arch.core.internal.SafeIterableMap$1)"->"android.arch.core.internal.SafeIterableMap$IteratorWithAdditions: void <init>(android.arch.core.internal.SafeIterableMap)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void popParentState()" [label="LifecycleRegistry(popParentState)",];
    "android.arch.lifecycle.LifecycleRegistry: void forwardPass(android.arch.lifecycle.LifecycleOwner)"->"android.arch.lifecycle.LifecycleRegistry: void popParentState()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)" [label="FastSafeIterableMap(contains)",];
    "android.arch.lifecycle.LifecycleRegistry: void forwardPass(android.arch.lifecycle.LifecycleOwner)"->"android.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap: java.util.Map$Entry newest()" [label="SafeIterableMap(newest)",];
    "android.arch.lifecycle.LifecycleRegistry: void sync()"->"android.arch.core.internal.SafeIterableMap: java.util.Map$Entry newest()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void backwardPass(android.arch.lifecycle.LifecycleOwner)" [label="LifecycleRegistry(backwardPass)",];
    "android.arch.lifecycle.LifecycleRegistry: void sync()"->"android.arch.lifecycle.LifecycleRegistry: void backwardPass(android.arch.lifecycle.LifecycleOwner)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$Event downEvent(android.arch.lifecycle.Lifecycle$State)" [label="LifecycleRegistry(downEvent)",];
    "android.arch.lifecycle.LifecycleRegistry: void backwardPass(android.arch.lifecycle.LifecycleOwner)"->"android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$Event downEvent(android.arch.lifecycle.Lifecycle$State)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap: java.util.Iterator descendingIterator()" [label="SafeIterableMap(descendingIterator)",];
    "android.arch.lifecycle.LifecycleRegistry: void backwardPass(android.arch.lifecycle.LifecycleOwner)"->"android.arch.core.internal.SafeIterableMap: java.util.Iterator descendingIterator()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap$DescendingIterator: void <init>(android.arch.core.internal.SafeIterableMap$Entry,android.arch.core.internal.SafeIterableMap$Entry)" [label="SafeIterableMap$DescendingIterator(<init>)",];
    "android.arch.core.internal.SafeIterableMap: java.util.Iterator descendingIterator()"->"android.arch.core.internal.SafeIterableMap$DescendingIterator: void <init>(android.arch.core.internal.SafeIterableMap$Entry,android.arch.core.internal.SafeIterableMap$Entry)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap$ListIterator: void <init>(android.arch.core.internal.SafeIterableMap$Entry,android.arch.core.internal.SafeIterableMap$Entry)" [label="SafeIterableMap$ListIterator(<init>)",];
    "android.arch.core.internal.SafeIterableMap$DescendingIterator: void <init>(android.arch.core.internal.SafeIterableMap$Entry,android.arch.core.internal.SafeIterableMap$Entry)"->"android.arch.core.internal.SafeIterableMap$ListIterator: void <init>(android.arch.core.internal.SafeIterableMap$Entry,android.arch.core.internal.SafeIterableMap$Entry)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void backwardPass(android.arch.lifecycle.LifecycleOwner)"->"android.arch.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(android.arch.lifecycle.LifecycleOwner,android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void backwardPass(android.arch.lifecycle.LifecycleOwner)"->"android.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void backwardPass(android.arch.lifecycle.LifecycleOwner)"->"android.arch.lifecycle.LifecycleRegistry: void pushParentState(android.arch.lifecycle.Lifecycle$State)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void backwardPass(android.arch.lifecycle.LifecycleOwner)"->"android.arch.lifecycle.LifecycleRegistry: android.arch.lifecycle.Lifecycle$State getStateAfter(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: void backwardPass(android.arch.lifecycle.LifecycleOwner)"->"android.arch.lifecycle.LifecycleRegistry: void popParentState()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap: java.util.Map$Entry eldest()" [label="SafeIterableMap(eldest)",];
    "android.arch.lifecycle.LifecycleRegistry: void sync()"->"android.arch.core.internal.SafeIterableMap: java.util.Map$Entry eldest()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: boolean isSynced()" [label="LifecycleRegistry(isSynced)",];
    "android.arch.lifecycle.LifecycleRegistry: void sync()"->"android.arch.lifecycle.LifecycleRegistry: boolean isSynced()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.core.internal.SafeIterableMap: int size()" [label="SafeIterableMap(size)",];
    "android.arch.lifecycle.LifecycleRegistry: boolean isSynced()"->"android.arch.core.internal.SafeIterableMap: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: boolean isSynced()"->"android.arch.core.internal.SafeIterableMap: java.util.Map$Entry newest()" [label="SIMPLE",style=bold,color=black,];
    "android.arch.lifecycle.LifecycleRegistry: boolean isSynced()"->"android.arch.core.internal.SafeIterableMap: java.util.Map$Entry eldest()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: boolean onShouldSaveFragmentState(android.support.v4.app.Fragment)" [label="FragmentHostCallback(onShouldSaveFragmentState)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentHostCallback: boolean onShouldSaveFragmentState(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performReallyStop()" [label="Fragment(performReallyStop)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performReallyStop()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchReallyStop()" [label="FragmentManagerImpl(dispatchReallyStop)",];
    "android.support.v4.app.Fragment: void performReallyStop()"->"android.support.v4.app.FragmentManagerImpl: void dispatchReallyStop()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchReallyStop()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: boolean getRetainLoaders()" [label="FragmentHostCallback(getRetainLoaders)",];
    "android.support.v4.app.Fragment: void performReallyStop()"->"android.support.v4.app.FragmentHostCallback: boolean getRetainLoaders()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doStop()" [label="LoaderManagerImpl(doStop)",];
    "android.support.v4.app.Fragment: void performReallyStop()"->"android.support.v4.app.LoaderManagerImpl: void doStop()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doStop()"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doStop()"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void stop()" [label="LoaderManagerImpl$LoaderInfo(stop)",];
    "android.support.v4.app.LoaderManagerImpl: void doStop()"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void stop()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void stop()"->"android.support.v4.content.Loader: void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void stop()"->"android.support.v4.content.Loader: void unregisterOnLoadCanceledListener(android.support.v4.content.Loader$OnLoadCanceledListener)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void stopLoading()" [label="Loader(stopLoading)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void stop()"->"android.support.v4.content.Loader: void stopLoading()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void onStopLoading()" [label="Loader(onStopLoading)",];
    "android.support.v4.content.Loader: void stopLoading()"->"android.support.v4.content.Loader: void onStopLoading()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performReallyStop()"->"android.support.v4.app.FragmentHostCallback: android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doRetain()" [label="LoaderManagerImpl(doRetain)",];
    "android.support.v4.app.Fragment: void performReallyStop()"->"android.support.v4.app.LoaderManagerImpl: void doRetain()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doRetain()"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doRetain()"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void retain()" [label="LoaderManagerImpl$LoaderInfo(retain)",];
    "android.support.v4.app.LoaderManagerImpl: void doRetain()"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void retain()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void restoreViewState(android.os.Bundle)" [label="Fragment(restoreViewState)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void restoreViewState(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void restoreViewState(android.os.Bundle)"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onViewStateRestored(android.os.Bundle)" [label="Fragment(onViewStateRestored)",];
    "android.support.v4.app.Fragment: void restoreViewState(android.os.Bundle)"->"android.support.v4.app.Fragment: void onViewStateRestored(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void ensureInflatedFragmentView(android.support.v4.app.Fragment)" [label="FragmentManagerImpl(ensureInflatedFragmentView)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void ensureInflatedFragmentView(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void ensureInflatedFragmentView(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle)" [label="Fragment(performGetLayoutInflater)",];
    "android.support.v4.app.FragmentManagerImpl: void ensureInflatedFragmentView(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)" [label="Fragment(onGetLayoutInflater)",];
    "android.support.v4.app.Fragment: android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle)"->"android.support.v4.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)" [label="Fragment(getLayoutInflater)",];
    "android.support.v4.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)"->"android.support.v4.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.LayoutInflaterCompat: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)" [label="LayoutInflaterCompat(setFactory2)",];
    "android.support.v4.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)"->"android.support.v4.view.LayoutInflaterCompat: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatBaseImpl: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)" [label="LayoutInflaterCompat$LayoutInflaterCompatBaseImpl(setFactory2)",];
    "android.support.v4.view.LayoutInflaterCompat: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)"->"android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatBaseImpl: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.LayoutInflaterCompat: void forceSetFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)" [label="LayoutInflaterCompat(forceSetFactory2)",];
    "android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatBaseImpl: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)"->"android.support.v4.view.LayoutInflaterCompat: void forceSetFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatBaseImpl: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)"->"android.support.v4.view.LayoutInflaterCompat: void forceSetFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: android.view.LayoutInflater onGetLayoutInflater()" [label="FragmentHostCallback(onGetLayoutInflater)",];
    "android.support.v4.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)"->"android.support.v4.app.FragmentHostCallback: android.view.LayoutInflater onGetLayoutInflater()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getChildFragmentManager()" [label="Fragment(getChildFragmentManager)",];
    "android.support.v4.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getChildFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchStart()" [label="FragmentManagerImpl(dispatchStart)",];
    "android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getChildFragmentManager()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStart()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getChildFragmentManager()"->"android.support.v4.app.FragmentManagerImpl: void dispatchCreate()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void instantiateChildFragmentManager()" [label="Fragment(instantiateChildFragmentManager)",];
    "android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getChildFragmentManager()"->"android.support.v4.app.Fragment: void instantiateChildFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchResume()" [label="FragmentManagerImpl(dispatchResume)",];
    "android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getChildFragmentManager()"->"android.support.v4.app.FragmentManagerImpl: void dispatchResume()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchActivityCreated()" [label="FragmentManagerImpl(dispatchActivityCreated)",];
    "android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getChildFragmentManager()"->"android.support.v4.app.FragmentManagerImpl: void dispatchActivityCreated()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.view.LayoutInflater$Factory2 getLayoutInflaterFactory()" [label="FragmentManagerImpl(getLayoutInflaterFactory)",];
    "android.support.v4.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)"->"android.support.v4.app.FragmentManagerImpl: android.view.LayoutInflater$Factory2 getLayoutInflaterFactory()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)" [label="Fragment(onViewCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void ensureInflatedFragmentView(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(android.support.v4.app.Fragment,android.view.View,android.os.Bundle,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentViewCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void ensureInflatedFragmentView(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(android.support.v4.app.Fragment,android.view.View,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(android.support.v4.app.Fragment,android.view.View,android.os.Bundle,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewCreated(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.view.View,android.os.Bundle)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentViewCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(android.support.v4.app.Fragment,android.view.View,android.os.Bundle,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewCreated(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.view.View,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(android.support.v4.app.Fragment,android.view.View,android.os.Bundle,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(android.support.v4.app.Fragment,android.view.View,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performCreate(android.os.Bundle)" [label="Fragment(performCreate)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performCreate(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onCreate(android.os.Bundle)" [label="Fragment(onCreate)",];
    "android.support.v4.app.Fragment: void performCreate(android.os.Bundle)"->"android.support.v4.app.Fragment: void onCreate(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void restoreChildFragmentState(android.os.Bundle)" [label="Fragment(restoreChildFragmentState)",];
    "android.support.v4.app.Fragment: void onCreate(android.os.Bundle)"->"android.support.v4.app.Fragment: void restoreChildFragmentState(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: boolean isStateAtLeast(int)" [label="FragmentManagerImpl(isStateAtLeast)",];
    "android.support.v4.app.Fragment: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentManagerImpl: boolean isStateAtLeast(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentManagerImpl: void dispatchCreate()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performCreate(android.os.Bundle)"->"android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performCreate(android.os.Bundle)"->"android.support.v4.app.FragmentManagerImpl: void noteStateNotSaved()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performCreate(android.os.Bundle)"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.animation.Animator getAnimator()" [label="Fragment(getAnimator)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.animation.Animator getAnimator()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(android.support.v4.app.Fragment,android.view.View,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDestroyed(android.support.v4.app.Fragment,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentDestroyed)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDestroyed(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDestroyed(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentDestroyed)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDestroyed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDestroyed(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDestroyed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDestroyed(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentDestroyed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performStop()" [label="Fragment(performStop)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performStop()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performStop()"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onStop()" [label="Fragment(onStop)",];
    "android.support.v4.app.Fragment: void performStop()"->"android.support.v4.app.Fragment: void onStop()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performStop()"->"android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchStop()" [label="FragmentManagerImpl(dispatchStop)",];
    "android.support.v4.app.Fragment: void performStop()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStop()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchStop()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)" [label="FragmentManagerImpl(loadAnimation)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)" [label="Fragment(onCreateAnimator)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: int transitToStyleIndex(int,boolean)" [label="FragmentManagerImpl(transitToStyleIndex)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl: int transitToStyleIndex(int,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeFadeAnimation(android.content.Context,float,float)" [label="FragmentManagerImpl(makeFadeAnimation)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeFadeAnimation(android.content.Context,float,float)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.view.animation.Animation,android.support.v4.app.FragmentManagerImpl$1)" [label="FragmentManagerImpl$AnimationOrAnimator(<init>)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeFadeAnimation(android.content.Context,float,float)"->"android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.view.animation.Animation,android.support.v4.app.FragmentManagerImpl$1)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.animation.Animator,android.support.v4.app.FragmentManagerImpl$1)" [label="FragmentManagerImpl$AnimationOrAnimator(<init>)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.animation.Animator,android.support.v4.app.FragmentManagerImpl$1)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.animation.Animator)" [label="FragmentManagerImpl$AnimationOrAnimator(<init>)",];
    "android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.animation.Animator,android.support.v4.app.FragmentManagerImpl$1)"->"android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.animation.Animator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.view.animation.Animation onCreateAnimation(int,boolean,int)" [label="Fragment(onCreateAnimation)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.Fragment: android.view.animation.Animation onCreateAnimation(int,boolean,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(android.content.Context,float,float,float,float)" [label="FragmentManagerImpl(makeOpenCloseAnimation)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(android.content.Context,float,float,float,float)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(android.content.Context,float,float,float,float)"->"android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.view.animation.Animation,android.support.v4.app.FragmentManagerImpl$1)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.view.animation.Animation,android.support.v4.app.FragmentManagerImpl$1)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.view.animation.Animation,android.support.v4.app.FragmentManagerImpl$1)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: int onGetWindowAnimations()" [label="FragmentHostCallback(onGetWindowAnimations)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: int onGetWindowAnimations()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.view.animation.Animation,android.support.v4.app.FragmentManagerImpl$1)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.Fragment: int getNextAnim()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(android.content.Context,float,float,float,float)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator: void <init>(android.animation.Animator,android.support.v4.app.FragmentManagerImpl$1)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeFadeAnimation(android.content.Context,float,float)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(android.content.Context,float,float,float,float)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: boolean onHasWindowAnimations()" [label="FragmentHostCallback(onHasWindowAnimations)",];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentHostCallback: boolean onHasWindowAnimations()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(android.content.Context,float,float,float,float)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)" [label="FragmentManagerImpl(animateRemoveFragment)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl$3: void <init>(android.support.v4.app.FragmentManagerImpl,android.view.ViewGroup,android.view.View,android.support.v4.app.Fragment)" [label="FragmentManagerImpl$3(<init>)",];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)"->"android.support.v4.app.FragmentManagerImpl$3: void <init>(android.support.v4.app.FragmentManagerImpl,android.view.ViewGroup,android.view.View,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void setHWLayerAnimListenerIfAlpha(android.view.View,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator)" [label="FragmentManagerImpl(setHWLayerAnimListenerIfAlpha)",];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)"->"android.support.v4.app.FragmentManagerImpl: void setHWLayerAnimListenerIfAlpha(android.view.View,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void setStateAfterAnimating(int)" [label="Fragment(setStateAfterAnimating)",];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)"->"android.support.v4.app.Fragment: void setStateAfterAnimating(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl$2: void <init>(android.support.v4.app.FragmentManagerImpl,android.view.animation.Animation$AnimationListener,android.view.ViewGroup,android.view.View,android.support.v4.app.Fragment)" [label="FragmentManagerImpl$2(<init>)",];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)"->"android.support.v4.app.FragmentManagerImpl$2: void <init>(android.support.v4.app.FragmentManagerImpl,android.view.animation.Animation$AnimationListener,android.view.ViewGroup,android.view.View,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl$AnimationListenerWrapper: void <init>(android.view.animation.Animation$AnimationListener,android.support.v4.app.FragmentManagerImpl$1)" [label="FragmentManagerImpl$AnimationListenerWrapper(<init>)",];
    "android.support.v4.app.FragmentManagerImpl$2: void <init>(android.support.v4.app.FragmentManagerImpl,android.view.animation.Animation$AnimationListener,android.view.ViewGroup,android.view.View,android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl$AnimationListenerWrapper: void <init>(android.view.animation.Animation$AnimationListener,android.support.v4.app.FragmentManagerImpl$1)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl$AnimationListenerWrapper: void <init>(android.view.animation.Animation$AnimationListener)" [label="FragmentManagerImpl$AnimationListenerWrapper(<init>)",];
    "android.support.v4.app.FragmentManagerImpl$AnimationListenerWrapper: void <init>(android.view.animation.Animation$AnimationListener,android.support.v4.app.FragmentManagerImpl$1)"->"android.support.v4.app.FragmentManagerImpl$AnimationListenerWrapper: void <init>(android.view.animation.Animation$AnimationListener)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)"->"android.support.v4.app.FragmentManagerImpl: void setHWLayerAnimListenerIfAlpha(android.view.View,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void setAnimatingAway(android.view.View)" [label="Fragment(setAnimatingAway)",];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)"->"android.support.v4.app.Fragment: void setAnimatingAway(android.view.View)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void setAnimator(android.animation.Animator)" [label="Fragment(setAnimator)",];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)"->"android.support.v4.app.Fragment: void setAnimator(android.animation.Animator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.view.animation.Animation$AnimationListener getAnimationListener(android.view.animation.Animation)" [label="FragmentManagerImpl(getAnimationListener)",];
    "android.support.v4.app.FragmentManagerImpl: void animateRemoveFragment(android.support.v4.app.Fragment,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator,int)"->"android.support.v4.app.FragmentManagerImpl: android.view.animation.Animation$AnimationListener getAnimationListener(android.view.animation.Animation)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.animation.Animator getAnimator()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentContainer: android.view.View onFindViewById(int)" [label="FragmentContainer(onFindViewById)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentContainer: android.view.View onFindViewById(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentAttached(android.support.v4.app.Fragment,android.content.Context,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentAttached)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentAttached(android.support.v4.app.Fragment,android.content.Context,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentAttached(android.support.v4.app.Fragment,android.content.Context,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentAttached(android.support.v4.app.Fragment,android.content.Context,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentAttached(android.support.v4.app.Fragment,android.content.Context,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentAttached(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.content.Context)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentAttached)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentAttached(android.support.v4.app.Fragment,android.content.Context,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentAttached(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.animation.Animator getAnimator()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.view.View getAnimatingAway()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: boolean isInBackStack()" [label="Fragment(isInBackStack)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: boolean isInBackStack()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performActivityCreated(android.os.Bundle)" [label="Fragment(performActivityCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performActivityCreated(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onActivityCreated(android.os.Bundle)" [label="Fragment(onActivityCreated)",];
    "android.support.v4.app.Fragment: void performActivityCreated(android.os.Bundle)"->"android.support.v4.app.Fragment: void onActivityCreated(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performActivityCreated(android.os.Bundle)"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performActivityCreated(android.os.Bundle)"->"android.support.v4.app.FragmentManagerImpl: void noteStateNotSaved()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performActivityCreated(android.os.Bundle)"->"android.support.v4.app.FragmentManagerImpl: void dispatchActivityCreated()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: int getStateAfterAnimating()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onAttach(android.content.Context)" [label="Fragment(onAttach)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void onAttach(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: android.app.Activity getActivity()" [label="FragmentHostCallback(getActivity)",];
    "android.support.v4.app.Fragment: void onAttach(android.content.Context)"->"android.support.v4.app.FragmentHostCallback: android.app.Activity getActivity()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onAttach(android.app.Activity)" [label="Fragment(onAttach)",];
    "android.support.v4.app.Fragment: void onAttach(android.content.Context)"->"android.support.v4.app.Fragment: void onAttach(android.app.Activity)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void makeInactive(android.support.v4.app.Fragment)" [label="FragmentManagerImpl(makeInactive)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void makeInactive(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: void inactivateFragment(java.lang.String)" [label="FragmentHostCallback(inactivateFragment)",];
    "android.support.v4.app.FragmentManagerImpl: void makeInactive(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentHostCallback: void inactivateFragment(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: void inactivateFragment(java.lang.String)"->"android.support.v4.util.SimpleArrayMap: java.lang.Object get(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object remove(java.lang.Object)" [label="SimpleArrayMap(remove)",];
    "android.support.v4.app.FragmentHostCallback: void inactivateFragment(java.lang.String)"->"android.support.v4.util.SimpleArrayMap: java.lang.Object remove(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object removeAt(int)" [label="SimpleArrayMap(removeAt)",];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object remove(java.lang.Object)"->"android.support.v4.util.SimpleArrayMap: java.lang.Object removeAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: void allocArrays(int)" [label="SimpleArrayMap(allocArrays)",];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object removeAt(int)"->"android.support.v4.util.SimpleArrayMap: void allocArrays(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: void freeArrays(int[],java.lang.Object[],int)" [label="SimpleArrayMap(freeArrays)",];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object removeAt(int)"->"android.support.v4.util.SimpleArrayMap: void freeArrays(int[],java.lang.Object[],int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.util.SimpleArrayMap: int indexOfKey(java.lang.Object)" [label="SimpleArrayMap(indexOfKey)",];
    "android.support.v4.util.SimpleArrayMap: java.lang.Object remove(java.lang.Object)"->"android.support.v4.util.SimpleArrayMap: int indexOfKey(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentHostCallback: void inactivateFragment(java.lang.String)"->"android.support.v4.app.LoaderManagerImpl: void doDestroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void initState()" [label="Fragment(initState)",];
    "android.support.v4.app.FragmentManagerImpl: void makeInactive(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: void initState()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void setStateAfterAnimating(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(android.support.v4.app.Fragment,android.content.Context,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentPreAttached)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(android.support.v4.app.Fragment,android.content.Context,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(android.support.v4.app.Fragment,android.content.Context,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreAttached(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.content.Context)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentPreAttached)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(android.support.v4.app.Fragment,android.content.Context,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreAttached(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(android.support.v4.app.Fragment,android.content.Context,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(android.support.v4.app.Fragment,android.content.Context,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void restoreChildFragmentState(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.animation.Animator getAnimator()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentHostCallback: android.support.v4.app.FragmentManagerImpl getFragmentManagerImpl()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPaused(android.support.v4.app.Fragment,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentPaused)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPaused(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPaused(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentPaused)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPaused(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPaused(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPaused(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPaused(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentPaused(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void setAnimator(android.animation.Animator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.view.View getAnimatingAway()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performDestroyView()" [label="Fragment(performDestroyView)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performDestroyView()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doReportNextStart()" [label="LoaderManagerImpl(doReportNextStart)",];
    "android.support.v4.app.Fragment: void performDestroyView()"->"android.support.v4.app.LoaderManagerImpl: void doReportNextStart()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doReportNextStart()"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doReportNextStart()"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onDestroyView()" [label="Fragment(onDestroyView)",];
    "android.support.v4.app.Fragment: void performDestroyView()"->"android.support.v4.app.Fragment: void onDestroyView()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performDestroyView()"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchDestroyView()" [label="FragmentManagerImpl(dispatchDestroyView)",];
    "android.support.v4.app.Fragment: void performDestroyView()"->"android.support.v4.app.FragmentManagerImpl: void dispatchDestroyView()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchDestroyView()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void setAnimatingAway(android.view.View)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStopped(android.support.v4.app.Fragment,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentStopped)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStopped(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStopped(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStopped(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStopped(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStopped(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentStopped)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStopped(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStopped(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.view.View getAnimatingAway()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performDetach()" [label="Fragment(performDetach)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performDetach()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performDetach()"->"android.support.v4.app.FragmentManagerImpl: void dispatchDestroy()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onDetach()" [label="Fragment(onDetach)",];
    "android.support.v4.app.Fragment: void performDetach()"->"android.support.v4.app.Fragment: void onDetach()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performDetach()"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performStart()" [label="Fragment(performStart)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performStart()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performStart()"->"android.support.v4.app.FragmentManagerImpl: void noteStateNotSaved()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doReportStart()" [label="LoaderManagerImpl(doReportStart)",];
    "android.support.v4.app.Fragment: void performStart()"->"android.support.v4.app.LoaderManagerImpl: void doReportStart()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doReportStart()"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doReportStart()"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void reportStart()" [label="LoaderManagerImpl$LoaderInfo(reportStart)",];
    "android.support.v4.app.LoaderManagerImpl: void doReportStart()"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void reportStart()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object)" [label="LoaderManagerImpl$LoaderInfo(callOnLoadFinished)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void reportStart()"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManager$LoaderCallbacks: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)" [label="LoaderManager$LoaderCallbacks(onLoadFinished)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object)"->"android.support.v4.app.LoaderManager$LoaderCallbacks: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: java.lang.String dataToString(java.lang.Object)" [label="Loader(dataToString)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object)"->"android.support.v4.content.Loader: java.lang.String dataToString(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: java.lang.String dataToString(java.lang.Object)"->"android.support.v4.util.DebugUtils: void buildShortClassTag(java.lang.Object,java.lang.StringBuilder)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performStart()"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performStart()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStart()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performStart()"->"android.support.v4.app.FragmentManagerImpl: boolean execPendingActions()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onStart()" [label="Fragment(onStart)",];
    "android.support.v4.app.Fragment: void performStart()"->"android.support.v4.app.Fragment: void onStart()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onStart()"->"android.support.v4.app.FragmentHostCallback: android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doStart()" [label="LoaderManagerImpl(doStart)",];
    "android.support.v4.app.Fragment: void onStart()"->"android.support.v4.app.LoaderManagerImpl: void doStart()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void start()" [label="LoaderManagerImpl$LoaderInfo(start)",];
    "android.support.v4.app.LoaderManagerImpl: void doStart()"->"android.support.v4.app.LoaderManagerImpl$LoaderInfo: void start()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener)" [label="Loader(registerListener)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void start()"->"android.support.v4.content.Loader: void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManager$LoaderCallbacks: android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle)" [label="LoaderManager$LoaderCallbacks(onCreateLoader)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void start()"->"android.support.v4.app.LoaderManager$LoaderCallbacks: android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void startLoading()" [label="Loader(startLoading)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void start()"->"android.support.v4.content.Loader: void startLoading()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void onStartLoading()" [label="Loader(onStartLoading)",];
    "android.support.v4.content.Loader: void startLoading()"->"android.support.v4.content.Loader: void onStartLoading()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.content.Loader: void registerOnLoadCanceledListener(android.support.v4.content.Loader$OnLoadCanceledListener)" [label="Loader(registerOnLoadCanceledListener)",];
    "android.support.v4.app.LoaderManagerImpl$LoaderInfo: void start()"->"android.support.v4.content.Loader: void registerOnLoadCanceledListener(android.support.v4.content.Loader$OnLoadCanceledListener)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doStart()"->"android.support.v4.util.SparseArrayCompat: int size()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.LoaderManagerImpl: void doStart()"->"android.support.v4.util.SparseArrayCompat: java.lang.Object valueAt(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performStart()"->"android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String)" [label="FragmentManagerImpl(getFragment)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String)"->"android.support.v4.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentActivityCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentActivityCreated(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.os.Bundle)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentActivityCreated)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(android.support.v4.app.Fragment,android.os.Bundle,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentActivityCreated(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment,android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.view.View getAnimatingAway()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performResume()" [label="Fragment(performResume)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performResume()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performResume()"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performResume()"->"android.support.v4.app.FragmentManagerImpl: void dispatchResume()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performResume()"->"android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onResume()" [label="Fragment(onResume)",];
    "android.support.v4.app.Fragment: void performResume()"->"android.support.v4.app.Fragment: void onResume()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performResume()"->"android.support.v4.app.FragmentManagerImpl: boolean execPendingActions()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performResume()"->"android.support.v4.app.FragmentManagerImpl: boolean execPendingActions()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performResume()"->"android.support.v4.app.FragmentManagerImpl: void noteStateNotSaved()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void setAnimator(android.animation.Animator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void setAnimatingAway(android.view.View)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStarted(android.support.v4.app.Fragment,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentStarted)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStarted(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStarted(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStarted(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStarted(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentStarted)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStarted(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStarted(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentStarted(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performPause()" [label="Fragment(performPause)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: void performPause()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onPause()" [label="Fragment(onPause)",];
    "android.support.v4.app.Fragment: void performPause()"->"android.support.v4.app.Fragment: void onPause()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performPause()"->"android.arch.lifecycle.LifecycleRegistry: void handleLifecycleEvent(android.arch.lifecycle.Lifecycle$Event)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void performPause()"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchPause()" [label="FragmentManagerImpl(dispatchPause)",];
    "android.support.v4.app.Fragment: void performPause()"->"android.support.v4.app.FragmentManagerImpl: void dispatchPause()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchPause()"->"android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.SuperNotCalledException: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentResumed(android.support.v4.app.Fragment,boolean)" [label="FragmentManagerImpl(dispatchOnFragmentResumed)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentResumed(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentResumed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentResumed(android.support.v4.app.Fragment,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentResumed(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="FragmentManager$FragmentLifecycleCallbacks(onFragmentResumed)",];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentResumed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentResumed(android.support.v4.app.FragmentManager,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchOnFragmentResumed(android.support.v4.app.Fragment,boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.FragmentManager getFragmentManager()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.content.res.Resources getResources()" [label="Fragment(getResources)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)"->"android.support.v4.app.Fragment: android.content.res.Resources getResources()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.content.res.Resources getResources()"->"android.support.v4.app.FragmentHostCallback: android.content.Context getContext()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: void setHWLayerAnimListenerIfAlpha(android.view.View,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: int getNextTransition()" [label="Fragment(getNextTransition)",];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: int getNextTransition()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)" [label="FragmentManagerImpl(completeShowHideFragment)",];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl$4: void <init>(android.support.v4.app.FragmentManagerImpl,android.view.ViewGroup,android.view.View,android.support.v4.app.Fragment)" [label="FragmentManagerImpl$4(<init>)",];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl$4: void <init>(android.support.v4.app.FragmentManagerImpl,android.view.ViewGroup,android.view.View,android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: boolean isHideReplaced()" [label="Fragment(isHideReplaced)",];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: boolean isHideReplaced()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: boolean isHideReplaced()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: int getNextTransitionStyle()" [label="Fragment(getNextTransitionStyle)",];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: int getNextTransitionStyle()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void setHideReplaced(boolean)" [label="Fragment(setHideReplaced)",];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: void setHideReplaced(boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: android.support.v4.app.Fragment$AnimationInfo ensureAnimationInfo()" [label="Fragment(ensureAnimationInfo)",];
    "android.support.v4.app.Fragment: void setHideReplaced(boolean)"->"android.support.v4.app.Fragment: android.support.v4.app.Fragment$AnimationInfo ensureAnimationInfo()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment$AnimationInfo: void <init>()" [label="Fragment$AnimationInfo(<init>)",];
    "android.support.v4.app.Fragment: android.support.v4.app.Fragment$AnimationInfo ensureAnimationInfo()"->"android.support.v4.app.Fragment$AnimationInfo: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: void setHWLayerAnimListenerIfAlpha(android.view.View,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.Fragment: void onHiddenChanged(boolean)" [label="Fragment(onHiddenChanged)",];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: void onHiddenChanged(boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: int getNextTransition()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: boolean isHideReplaced()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: void setHideReplaced(boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void completeShowHideFragment(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: void setHWLayerAnimListenerIfAlpha(android.view.View,android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: android.support.v4.app.Fragment findFragmentUnder(android.support.v4.app.Fragment)" [label="FragmentManagerImpl(findFragmentUnder)",];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.Fragment findFragmentUnder(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: int getNextTransition()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: int getNextTransitionStyle()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: int getNextTransitionStyle()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: android.support.v4.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(android.support.v4.app.Fragment,int,boolean,int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)"->"android.support.v4.app.Fragment: boolean isInBackStack()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void moveFragmentToExpectedState(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void startPendingDeferredFragments()" [label="FragmentManagerImpl(startPendingDeferredFragments)",];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(int,boolean)"->"android.support.v4.app.FragmentManagerImpl: void startPendingDeferredFragments()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void performPendingDeferredStart(android.support.v4.app.Fragment)" [label="FragmentManagerImpl(performPendingDeferredStart)",];
    "android.support.v4.app.FragmentManagerImpl: void startPendingDeferredFragments()"->"android.support.v4.app.FragmentManagerImpl: void performPendingDeferredStart(android.support.v4.app.Fragment)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void performPendingDeferredStart(android.support.v4.app.Fragment)"->"android.support.v4.app.FragmentManagerImpl: void moveToState(android.support.v4.app.Fragment,int,int,int,boolean)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void moveToState(int,boolean)"->"android.support.v4.app.LoaderManagerImpl: boolean hasRunningLoaders()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentManagerImpl: void dispatchStateChange(int)"->"android.support.v4.app.FragmentManagerImpl: boolean execPendingActions()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: void setTheme(int)" [label="AppCompatActivity(setTheme)",];
    "android.support.v7.app.AppCompatActivity: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatActivity: void setTheme(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: boolean applyDayNight()" [label="AppCompatDelegate(applyDayNight)",];
    "android.support.v7.app.AppCompatActivity: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatDelegate: boolean applyDayNight()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: void onCreate(android.os.Bundle)" [label="AppCompatDelegate(onCreate)",];
    "android.support.v7.app.AppCompatActivity: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatDelegate: void onCreate(android.os.Bundle)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: void installViewFactory()" [label="AppCompatDelegate(installViewFactory)",];
    "android.support.v7.app.AppCompatActivity: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatDelegate: void installViewFactory()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: void setSupportActionBar(android.support.v7.widget.Toolbar)" [label="AppCompatActivity(setSupportActionBar)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatActivity: void setSupportActionBar(android.support.v7.widget.Toolbar)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: void setSupportActionBar(android.support.v7.widget.Toolbar)" [label="AppCompatDelegate(setSupportActionBar)",];
    "android.support.v7.app.AppCompatActivity: void setSupportActionBar(android.support.v7.widget.Toolbar)"->"android.support.v7.app.AppCompatDelegate: void setSupportActionBar(android.support.v7.widget.Toolbar)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: void setSupportActionBar(android.support.v7.widget.Toolbar)"->"android.support.v7.app.AppCompatActivity: android.support.v7.app.AppCompatDelegate getDelegate()" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.widget.DrawerLayout: void addDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener)" [label="DrawerLayout(addDrawerListener)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"android.support.v4.widget.DrawerLayout: void addDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener)" [label="SIMPLE",style=bold,color=black,];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatActivity: android.view.View findViewById(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: void setContentView(int)" [label="AppCompatActivity(setContentView)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"android.support.v7.app.AppCompatActivity: void setContentView(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatDelegate: void setContentView(int)" [label="AppCompatDelegate(setContentView)",];
    "android.support.v7.app.AppCompatActivity: void setContentView(int)"->"android.support.v7.app.AppCompatDelegate: void setContentView(int)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v7.app.AppCompatActivity: void setContentView(int)"->"android.support.v7.app.AppCompatActivity: android.support.v7.app.AppCompatDelegate getDelegate()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdView: void loadAd(com.google.android.gms.ads.AdRequest)" [label="AdView(loadAd)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"com.google.android.gms.ads.AdView: void loadAd(com.google.android.gms.ads.AdRequest)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.BaseAdView: void loadAd(com.google.android.gms.ads.AdRequest)" [label="BaseAdView(loadAd)",];
    "com.google.android.gms.ads.AdView: void loadAd(com.google.android.gms.ads.AdRequest)"->"com.google.android.gms.ads.BaseAdView: void loadAd(com.google.android.gms.ads.AdRequest)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdRequest: com.google.android.gms.internal.zzlt zzbg()" [label="AdRequest(zzbg)",];
    "com.google.android.gms.ads.BaseAdView: void loadAd(com.google.android.gms.ads.AdRequest)"->"com.google.android.gms.ads.AdRequest: com.google.android.gms.internal.zzlt zzbg()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)" [label="zzlv(zza)",];
    "com.google.android.gms.ads.BaseAdView: void loadAd(com.google.android.gms.ads.AdRequest)"->"com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzks: void zza(com.google.android.gms.internal.zzkx)" [label="zzks(zza)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzks: void zza(com.google.android.gms.internal.zzkx)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzks: void zza(com.google.android.gms.internal.zzkh)" [label="zzks(zza)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzks: void zza(com.google.android.gms.internal.zzkh)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzks: void zza(com.google.android.gms.internal.zzld)" [label="zzks(zza)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzks: void zza(com.google.android.gms.internal.zzld)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzakb: void zzc(java.lang.String,java.lang.Throwable)" [label="zzakb(zzc)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzakb: void zzc(java.lang.String,java.lang.Throwable)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzakb: boolean zzae(int)" [label="zzakb(zzae)",];
    "com.google.android.gms.internal.zzakb: void zzc(java.lang.String,java.lang.Throwable)"->"com.google.android.gms.internal.zzakb: boolean zzae(int)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzks: void zza(com.google.android.gms.internal.zzoa)" [label="zzks(zza)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzks: void zza(com.google.android.gms.internal.zzoa)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzks: void setManualImpressionsEnabled(boolean)" [label="zzks(setManualImpressionsEnabled)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzks: void setManualImpressionsEnabled(boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzks: com.google.android.gms.dynamic.IObjectWrapper zzbr()" [label="zzks(zzbr)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzks: com.google.android.gms.dynamic.IObjectWrapper zzbr()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzuw: void zzn(java.util.Map)" [label="zzuw(zzn)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzuw: void zzn(java.util.Map)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjp: void <init>(com.google.android.gms.ads.doubleclick.AppEventListener)" [label="zzjp(<init>)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzjp: void <init>(com.google.android.gms.ads.doubleclick.AppEventListener)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzky: void <init>()" [label="zzky(<init>)",];
    "com.google.android.gms.internal.zzjp: void <init>(com.google.android.gms.ads.doubleclick.AppEventListener)"->"com.google.android.gms.internal.zzky: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzev: void <init>()" [label="zzev(<init>)",];
    "com.google.android.gms.internal.zzky: void <init>()"->"com.google.android.gms.internal.zzev: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzks: boolean zzb(com.google.android.gms.internal.zzjj)" [label="zzks(zzb)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzks: boolean zzb(com.google.android.gms.internal.zzjj)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzakb: void zzc(java.lang.String,java.lang.Throwable)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzks: void zza(com.google.android.gms.internal.zzke)" [label="zzks(zza)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzks: void zza(com.google.android.gms.internal.zzke)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzod: void <init>(com.google.android.gms.ads.doubleclick.OnCustomRenderedAdLoadedListener)" [label="zzod(<init>)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzod: void <init>(com.google.android.gms.ads.doubleclick.OnCustomRenderedAdLoadedListener)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzob: void <init>()" [label="zzob(<init>)",];
    "com.google.android.gms.internal.zzod: void <init>(com.google.android.gms.ads.doubleclick.OnCustomRenderedAdLoadedListener)"->"com.google.android.gms.internal.zzob: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzob: void <init>()"->"com.google.android.gms.internal.zzev: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.zzjr$zza)" [label="zzjr(zza)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.zzjr$zza)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzajr zzia()" [label="zzkb(zzia)",];
    "com.google.android.gms.internal.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.zzjr$zza)"->"com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzajr zzia()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzkb zzhz()" [label="zzkb(zzhz)",];
    "com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzajr zzia()"->"com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzkb zzhz()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.zzjr$zza)"->"com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzajr zzia()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzajr: int zzav(android.content.Context)" [label="zzajr(zzav)",];
    "com.google.android.gms.internal.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.zzjr$zza)"->"com.google.android.gms.internal.zzajr: int zzav(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: int zzac(android.content.Context,java.lang.String)" [label="DynamiteModule(zzac)",];
    "com.google.android.gms.internal.zzajr: int zzav(android.content.Context)"->"com.google.android.gms.dynamite.DynamiteModule: int zzac(android.content.Context,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: int zzc(android.content.Context,java.lang.String,boolean)" [label="DynamiteModule(zzc)",];
    "com.google.android.gms.dynamite.DynamiteModule: int zzac(android.content.Context,java.lang.String)"->"com.google.android.gms.dynamite.DynamiteModule: int zzc(android.content.Context,java.lang.String,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.zzh: void <init>(java.lang.String,java.lang.ClassLoader)" [label="zzh(<init>)",];
    "com.google.android.gms.dynamite.DynamiteModule: int zzc(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.zzh: void <init>(java.lang.String,java.lang.ClassLoader)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: int zze(android.content.Context,java.lang.String,boolean)" [label="DynamiteModule(zze)",];
    "com.google.android.gms.dynamite.DynamiteModule: int zzc(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule: int zze(android.content.Context,java.lang.String,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule$zzc: void <init>(java.lang.String,java.lang.Throwable,com.google.android.gms.dynamite.zza)" [label="DynamiteModule$zzc(<init>)",];
    "com.google.android.gms.dynamite.DynamiteModule: int zze(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule$zzc: void <init>(java.lang.String,java.lang.Throwable,com.google.android.gms.dynamite.zza)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule$zzc: void <init>(java.lang.String,java.lang.Throwable)" [label="DynamiteModule$zzc(<init>)",];
    "com.google.android.gms.dynamite.DynamiteModule$zzc: void <init>(java.lang.String,java.lang.Throwable,com.google.android.gms.dynamite.zza)"->"com.google.android.gms.dynamite.DynamiteModule$zzc: void <init>(java.lang.String,java.lang.Throwable)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule$zzc: void <init>(java.lang.String,com.google.android.gms.dynamite.zza)" [label="DynamiteModule$zzc(<init>)",];
    "com.google.android.gms.dynamite.DynamiteModule: int zze(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule$zzc: void <init>(java.lang.String,com.google.android.gms.dynamite.zza)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule$zzc: void <init>(java.lang.String)" [label="DynamiteModule$zzc(<init>)",];
    "com.google.android.gms.dynamite.DynamiteModule$zzc: void <init>(java.lang.String,com.google.android.gms.dynamite.zza)"->"com.google.android.gms.dynamite.DynamiteModule$zzc: void <init>(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: int zzd(android.content.Context,java.lang.String,boolean)" [label="DynamiteModule(zzd)",];
    "com.google.android.gms.dynamite.DynamiteModule: int zzc(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule: int zzd(android.content.Context,java.lang.String,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.zzk zzdf(android.content.Context)" [label="DynamiteModule(zzdf)",];
    "com.google.android.gms.dynamite.DynamiteModule: int zzd(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.zzk zzdf(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.zzl: void <init>(android.os.IBinder)" [label="zzl(<init>)",];
    "com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.zzk zzdf(android.content.Context)"->"com.google.android.gms.dynamite.zzl: void <init>(android.os.IBinder)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzeu: void <init>(android.os.IBinder,java.lang.String)" [label="zzeu(<init>)",];
    "com.google.android.gms.dynamite.zzl: void <init>(android.os.IBinder)"->"com.google.android.gms.internal.zzeu: void <init>(android.os.IBinder,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.common.zzf: com.google.android.gms.common.zzf zzafy()" [label="zzf(zzafy)",];
    "com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.zzk zzdf(android.content.Context)"->"com.google.android.gms.common.zzf: com.google.android.gms.common.zzf zzafy()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.common.zzf: int isGooglePlayServicesAvailable(android.content.Context)" [label="zzf(isGooglePlayServicesAvailable)",];
    "com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.zzk zzdf(android.content.Context)"->"com.google.android.gms.common.zzf: int isGooglePlayServicesAvailable(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.zzk: int zza(com.google.android.gms.dynamic.IObjectWrapper,java.lang.String,boolean)" [label="zzk(zza)",];
    "com.google.android.gms.dynamite.DynamiteModule: int zzd(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.zzk: int zza(com.google.android.gms.dynamic.IObjectWrapper,java.lang.String,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamic.zzn: com.google.android.gms.dynamic.IObjectWrapper zzz(java.lang.Object)" [label="zzn(zzz)",];
    "com.google.android.gms.dynamite.DynamiteModule: int zzd(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamic.zzn: com.google.android.gms.dynamic.IObjectWrapper zzz(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamic.zzn: void <init>(java.lang.Object)" [label="zzn(<init>)",];
    "com.google.android.gms.dynamic.zzn: com.google.android.gms.dynamic.IObjectWrapper zzz(java.lang.Object)"->"com.google.android.gms.dynamic.zzn: void <init>(java.lang.Object)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamic.IObjectWrapper$zza: void <init>()" [label="IObjectWrapper$zza(<init>)",];
    "com.google.android.gms.dynamic.zzn: void <init>(java.lang.Object)"->"com.google.android.gms.dynamic.IObjectWrapper$zza: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamic.IObjectWrapper$zza: void <init>()"->"com.google.android.gms.internal.zzev: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: void zza(java.lang.ClassLoader)" [label="DynamiteModule(zza)",];
    "com.google.android.gms.dynamite.DynamiteModule: int zzc(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule: void zza(java.lang.ClassLoader)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.zzn: void <init>(android.os.IBinder)" [label="zzn(<init>)",];
    "com.google.android.gms.dynamite.DynamiteModule: void zza(java.lang.ClassLoader)"->"com.google.android.gms.dynamite.zzn: void <init>(android.os.IBinder)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.zzn: void <init>(android.os.IBinder)"->"com.google.android.gms.internal.zzeu: void <init>(android.os.IBinder,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: void zza(java.lang.ClassLoader)"->"com.google.android.gms.dynamite.DynamiteModule$zzc: void <init>(java.lang.String,java.lang.Throwable,com.google.android.gms.dynamite.zza)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: int zzc(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule: int zze(android.content.Context,java.lang.String,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: int zzc(android.content.Context,java.lang.String,boolean)"->"com.google.android.gms.dynamite.DynamiteModule: void zza(java.lang.ClassLoader)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzakb: void zzbx(java.lang.String)" [label="zzakb(zzbx)",];
    "com.google.android.gms.internal.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.zzjr$zza)"->"com.google.android.gms.internal.zzakb: void zzbx(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzakb: void zzbx(java.lang.String)"->"com.google.android.gms.internal.zzakb: boolean zzae(int)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.zzjr$zza)"->"com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzajr zzia()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjr$zza: java.lang.Object zzhy()" [label="zzjr$zza(zzhy)",];
    "com.google.android.gms.internal.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.zzjr$zza)"->"com.google.android.gms.internal.zzjr$zza: java.lang.Object zzhy()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjr$zza: java.lang.Object zzhw()" [label="zzjr$zza(zzhw)",];
    "com.google.android.gms.internal.zzjr$zza: java.lang.Object zzhy()"->"com.google.android.gms.internal.zzjr$zza: java.lang.Object zzhw()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjr$zza: java.lang.Object zzhy()"->"com.google.android.gms.internal.zzakb: void zzc(java.lang.String,java.lang.Throwable)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzajr: int zzaw(android.content.Context)" [label="zzajr(zzaw)",];
    "com.google.android.gms.internal.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.zzjr$zza)"->"com.google.android.gms.internal.zzajr: int zzaw(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamite.DynamiteModule: int zzab(android.content.Context,java.lang.String)" [label="DynamiteModule(zzab)",];
    "com.google.android.gms.internal.zzajr: int zzaw(android.content.Context)"->"com.google.android.gms.dynamite.DynamiteModule: int zzab(android.content.Context,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjr$zza: java.lang.Object zzhx()" [label="zzjr$zza(zzhx)",];
    "com.google.android.gms.internal.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.zzjr$zza)"->"com.google.android.gms.internal.zzjr$zza: java.lang.Object zzhx()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjr: com.google.android.gms.internal.zzla zza(com.google.android.gms.internal.zzjr)" [label="zzjr(zza)",];
    "com.google.android.gms.internal.zzjr$zza: java.lang.Object zzhx()"->"com.google.android.gms.internal.zzjr: com.google.android.gms.internal.zzla zza(com.google.android.gms.internal.zzjr)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjr: com.google.android.gms.internal.zzla zzhv()" [label="zzjr(zzhv)",];
    "com.google.android.gms.internal.zzjr: com.google.android.gms.internal.zzla zza(com.google.android.gms.internal.zzjr)"->"com.google.android.gms.internal.zzjr: com.google.android.gms.internal.zzla zzhv()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjr: com.google.android.gms.internal.zzla zzhu()" [label="zzjr(zzhu)",];
    "com.google.android.gms.internal.zzjr: com.google.android.gms.internal.zzla zzhv()"->"com.google.android.gms.internal.zzjr: com.google.android.gms.internal.zzla zzhu()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlb: com.google.android.gms.internal.zzla asInterface(android.os.IBinder)" [label="zzlb(asInterface)",];
    "com.google.android.gms.internal.zzjr: com.google.android.gms.internal.zzla zzhu()"->"com.google.android.gms.internal.zzlb: com.google.android.gms.internal.zzla asInterface(android.os.IBinder)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlc: void <init>(android.os.IBinder)" [label="zzlc(<init>)",];
    "com.google.android.gms.internal.zzlb: com.google.android.gms.internal.zzla asInterface(android.os.IBinder)"->"com.google.android.gms.internal.zzlc: void <init>(android.os.IBinder)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlc: void <init>(android.os.IBinder)"->"com.google.android.gms.internal.zzeu: void <init>(android.os.IBinder,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzakb: void zzcu(java.lang.String)" [label="zzakb(zzcu)",];
    "com.google.android.gms.internal.zzjr: com.google.android.gms.internal.zzla zzhu()"->"com.google.android.gms.internal.zzakb: void zzcu(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjr: com.google.android.gms.internal.zzla zzhu()"->"com.google.android.gms.internal.zzakb: void zzc(java.lang.String,java.lang.Throwable)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjr$zza: java.lang.Object zza(com.google.android.gms.internal.zzla)" [label="zzjr$zza(zza)",];
    "com.google.android.gms.internal.zzjr$zza: java.lang.Object zzhx()"->"com.google.android.gms.internal.zzjr$zza: java.lang.Object zza(com.google.android.gms.internal.zzla)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjr$zza: java.lang.Object zzhx()"->"com.google.android.gms.internal.zzakb: void zzcu(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjr$zza: java.lang.Object zzhx()"->"com.google.android.gms.internal.zzakb: void zzc(java.lang.String,java.lang.Throwable)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.zzjr$zza)"->"com.google.android.gms.internal.zzjr$zza: java.lang.Object zzhx()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzajr: boolean zzbe(android.content.Context)" [label="zzajr(zzbe)",];
    "com.google.android.gms.internal.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.zzjr$zza)"->"com.google.android.gms.internal.zzajr: boolean zzbe(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzajr: boolean zzbe(android.content.Context)"->"com.google.android.gms.common.zzf: com.google.android.gms.common.zzf zzafy()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzajr: boolean zzbe(android.content.Context)"->"com.google.android.gms.common.zzf: int isGooglePlayServicesAvailable(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.zzjr$zza)"->"com.google.android.gms.internal.zzjr$zza: java.lang.Object zzhy()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjg: void <init>(com.google.android.gms.ads.AdListener)" [label="zzjg(<init>)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzjg: void <init>(com.google.android.gms.ads.AdListener)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzki: void <init>()" [label="zzki(<init>)",];
    "com.google.android.gms.internal.zzjg: void <init>(com.google.android.gms.ads.AdListener)"->"com.google.android.gms.internal.zzki: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzki: void <init>()"->"com.google.android.gms.internal.zzev: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzks: void zza(com.google.android.gms.internal.zzmr)" [label="zzks(zza)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzks: void zza(com.google.android.gms.internal.zzmr)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjf: void <init>(com.google.android.gms.internal.zzje)" [label="zzjf(<init>)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzjf: void <init>(com.google.android.gms.internal.zzje)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzkf: void <init>()" [label="zzkf(<init>)",];
    "com.google.android.gms.internal.zzjf: void <init>(com.google.android.gms.internal.zzje)"->"com.google.android.gms.internal.zzkf: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzkf: void <init>()"->"com.google.android.gms.internal.zzev: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzmr: void <init>(com.google.android.gms.ads.VideoOptions)" [label="zzmr(<init>)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzmr: void <init>(com.google.android.gms.ads.VideoOptions)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.VideoOptions: boolean getStartMuted()" [label="VideoOptions(getStartMuted)",];
    "com.google.android.gms.internal.zzmr: void <init>(com.google.android.gms.ads.VideoOptions)"->"com.google.android.gms.ads.VideoOptions: boolean getStartMuted()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.VideoOptions: boolean getClickToExpandRequested()" [label="VideoOptions(getClickToExpandRequested)",];
    "com.google.android.gms.internal.zzmr: void <init>(com.google.android.gms.ads.VideoOptions)"->"com.google.android.gms.ads.VideoOptions: boolean getClickToExpandRequested()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzmr: void <init>(boolean,boolean,boolean)" [label="zzmr(<init>)",];
    "com.google.android.gms.internal.zzmr: void <init>(com.google.android.gms.ads.VideoOptions)"->"com.google.android.gms.internal.zzmr: void <init>(boolean,boolean,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzbfm: void <init>()" [label="zzbfm(<init>)",];
    "com.google.android.gms.internal.zzmr: void <init>(boolean,boolean,boolean)"->"com.google.android.gms.internal.zzbfm: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.VideoOptions: boolean getCustomControlsRequested()" [label="VideoOptions(getCustomControlsRequested)",];
    "com.google.android.gms.internal.zzmr: void <init>(com.google.android.gms.ads.VideoOptions)"->"com.google.android.gms.ads.VideoOptions: boolean getCustomControlsRequested()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjt: void <init>(com.google.android.gms.internal.zzjr,android.content.Context,com.google.android.gms.internal.zzjn,java.lang.String)" [label="zzjt(<init>)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzjt: void <init>(com.google.android.gms.internal.zzjr,android.content.Context,com.google.android.gms.internal.zzjn,java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjr$zza: void <init>(com.google.android.gms.internal.zzjr)" [label="zzjr$zza(<init>)",];
    "com.google.android.gms.internal.zzjt: void <init>(com.google.android.gms.internal.zzjr,android.content.Context,com.google.android.gms.internal.zzjn,java.lang.String)"->"com.google.android.gms.internal.zzjr$zza: void <init>(com.google.android.gms.internal.zzjr)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzjr: java.lang.Object zza(android.content.Context,boolean,com.google.android.gms.internal.zzjr$zza)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjs: void <init>(com.google.android.gms.internal.zzjr,android.content.Context,com.google.android.gms.internal.zzjn,java.lang.String,com.google.android.gms.internal.zzux)" [label="zzjs(<init>)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzjs: void <init>(com.google.android.gms.internal.zzjr,android.content.Context,com.google.android.gms.internal.zzjn,java.lang.String,com.google.android.gms.internal.zzux)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjs: void <init>(com.google.android.gms.internal.zzjr,android.content.Context,com.google.android.gms.internal.zzjn,java.lang.String,com.google.android.gms.internal.zzux)"->"com.google.android.gms.internal.zzjr$zza: void <init>(com.google.android.gms.internal.zzjr)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)" [label="zzjm(zza)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: boolean isDesignedForFamilies()" [label="zzlt(isDesignedForFamilies)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlt: boolean isDesignedForFamilies()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzmn: void <init>(com.google.android.gms.ads.search.SearchAdRequest)" [label="zzmn(<init>)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzmn: void <init>(com.google.android.gms.ads.search.SearchAdRequest)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzmn: void <init>(com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.internal.zzbfm: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.search.SearchAdRequest: java.lang.String getQuery()" [label="SearchAdRequest(getQuery)",];
    "com.google.android.gms.internal.zzmn: void <init>(com.google.android.gms.ads.search.SearchAdRequest)"->"com.google.android.gms.ads.search.SearchAdRequest: java.lang.String getQuery()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: java.util.Date getBirthday()" [label="zzlt(getBirthday)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlt: java.util.Date getBirthday()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: java.util.Set getKeywords()" [label="zzlt(getKeywords)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlt: java.util.Set getKeywords()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: int zzio()" [label="zzlt(zzio)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlt: int zzio()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: boolean getManualImpressionsEnabled()" [label="zzlt(getManualImpressionsEnabled)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlt: boolean getManualImpressionsEnabled()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: android.os.Bundle getNetworkExtrasBundle(java.lang.Class)" [label="zzlt(getNetworkExtrasBundle)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlt: android.os.Bundle getNetworkExtrasBundle(java.lang.Class)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: boolean isTestDevice(android.content.Context)" [label="zzlt(isTestDevice)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlt: boolean isTestDevice(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: boolean isTestDevice(android.content.Context)"->"com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzajr zzia()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzajr: java.lang.String zzbc(android.content.Context)" [label="zzajr(zzbc)",];
    "com.google.android.gms.internal.zzlt: boolean isTestDevice(android.content.Context)"->"com.google.android.gms.internal.zzajr: java.lang.String zzbc(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzajr: java.lang.String zzcp(java.lang.String)" [label="zzajr(zzcp)",];
    "com.google.android.gms.internal.zzajr: java.lang.String zzbc(android.content.Context)"->"com.google.android.gms.internal.zzajr: java.lang.String zzcp(java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzajr: boolean zzqy()" [label="zzajr(zzqy)",];
    "com.google.android.gms.internal.zzajr: java.lang.String zzbc(android.content.Context)"->"com.google.android.gms.internal.zzajr: boolean zzqy()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: java.lang.String getContentUrl()" [label="zzlt(getContentUrl)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlt: java.lang.String getContentUrl()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: com.google.android.gms.ads.search.SearchAdRequest zzil()" [label="zzlt(zzil)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlt: com.google.android.gms.ads.search.SearchAdRequest zzil()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: android.os.Bundle zzin()" [label="zzlt(zzin)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlt: android.os.Bundle zzin()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: int getGender()" [label="zzlt(getGender)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlt: int getGender()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzajr zzia()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzajr: java.lang.String zza(java.lang.StackTraceElement[],java.lang.String)" [label="zzajr(zza)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzajr: java.lang.String zza(java.lang.StackTraceElement[],java.lang.String)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjj: void <init>(int,long,android.os.Bundle,int,java.util.List,boolean,int,boolean,java.lang.String,com.google.android.gms.internal.zzmn,android.location.Location,java.lang.String,android.os.Bundle,android.os.Bundle,java.util.List,java.lang.String,java.lang.String,boolean)" [label="zzjj(<init>)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzjj: void <init>(int,long,android.os.Bundle,int,java.util.List,boolean,int,boolean,java.lang.String,com.google.android.gms.internal.zzmn,android.location.Location,java.lang.String,android.os.Bundle,android.os.Bundle,java.util.List,java.lang.String,java.lang.String,boolean)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjj: void <init>(int,long,android.os.Bundle,int,java.util.List,boolean,int,boolean,java.lang.String,com.google.android.gms.internal.zzmn,android.location.Location,java.lang.String,android.os.Bundle,android.os.Bundle,java.util.List,java.lang.String,java.lang.String,boolean)"->"com.google.android.gms.internal.zzbfm: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: android.location.Location getLocation()" [label="zzlt(getLocation)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlt: android.location.Location getLocation()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: java.lang.String getPublisherProvidedId()" [label="zzlt(getPublisherProvidedId)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlt: java.lang.String getPublisherProvidedId()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: java.util.Set zzip()" [label="zzlt(zzip)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlt: java.util.Set zzip()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: android.os.Bundle getCustomTargeting()" [label="zzlt(getCustomTargeting)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlt: android.os.Bundle getCustomTargeting()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: java.lang.String zzik()" [label="zzlt(zzik)",];
    "com.google.android.gms.internal.zzjm: com.google.android.gms.internal.zzjj zza(android.content.Context,com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlt: java.lang.String zzik()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzjr zzib()" [label="zzkb(zzib)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzjr zzib()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzjr zzib()"->"com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzkb zzhz()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlv: com.google.android.gms.internal.zzjn zza(android.content.Context,com.google.android.gms.ads.AdSize[],int)" [label="zzlv(zza)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlv: com.google.android.gms.internal.zzjn zza(android.content.Context,com.google.android.gms.ads.AdSize[],int)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlv: boolean zzs(int)" [label="zzlv(zzs)",];
    "com.google.android.gms.internal.zzlv: com.google.android.gms.internal.zzjn zza(android.content.Context,com.google.android.gms.ads.AdSize[],int)"->"com.google.android.gms.internal.zzlv: boolean zzs(int)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])" [label="zzjn(<init>)",];
    "com.google.android.gms.internal.zzlv: com.google.android.gms.internal.zzjn zza(android.content.Context,com.google.android.gms.ads.AdSize[],int)"->"com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzajr: int zza(android.util.DisplayMetrics,int)" [label="zzajr(zza)",];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.zzajr: int zza(android.util.DisplayMetrics,int)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdSize: int getWidth()" [label="AdSize(getWidth)",];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.ads.AdSize: int getWidth()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzajr zzia()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzajr zzia()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzajr: int zzbi(android.content.Context)" [label="zzajr(zzbi)",];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.zzajr: int zzbi(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzajr: boolean zzbg(android.content.Context)" [label="zzajr(zzbg)",];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.zzajr: boolean zzbg(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzajr: boolean zzbh(android.content.Context)" [label="zzajr(zzbh)",];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.zzajr: boolean zzbh(android.content.Context)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.common.util.zzq: boolean zzamj()" [label="zzq(zzamj)",];
    "com.google.android.gms.internal.zzajr: boolean zzbh(android.content.Context)"->"com.google.android.gms.common.util.zzq: boolean zzamj()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdSize: int getHeight()" [label="AdSize(getHeight)",];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.ads.AdSize: int getHeight()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjn: int zzd(android.util.DisplayMetrics)" [label="zzjn(zzd)",];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.zzjn: int zzd(android.util.DisplayMetrics)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdSize: boolean isFluid()" [label="AdSize(isFluid)",];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.ads.AdSize: boolean isFluid()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.ads.AdSize: int getWidth()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzajr zzia()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.ads.AdSize: int getHeight()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzajr zzia()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.zzajr: int zza(android.util.DisplayMetrics,int)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize)" [label="zzjn(<init>)",];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize)"->"com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzajr zzia()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.internal.zzbfm: void <init>()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.AdSize: java.lang.String toString()" [label="AdSize(toString)",];
    "com.google.android.gms.internal.zzjn: void <init>(android.content.Context,com.google.android.gms.ads.AdSize[])"->"com.google.android.gms.ads.AdSize: java.lang.String toString()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.dynamic.zzn: java.lang.Object zzx(com.google.android.gms.dynamic.IObjectWrapper)" [label="zzn(zzx)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.dynamic.zzn: java.lang.Object zzx(com.google.android.gms.dynamic.IObjectWrapper)" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlt: java.util.Map zzim()" [label="zzlt(zzim)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzlt: java.util.Map zzim()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.internal.zzkb: com.google.android.gms.internal.zzjr zzib()" [label="SIMPLE",style=bold,color=black,];
    "com.google.android.gms.ads.Correlator: com.google.android.gms.internal.zzkc zzbh()" [label="Correlator(zzbh)",];
    "com.google.android.gms.internal.zzlv: void zza(com.google.android.gms.internal.zzlt)"->"com.google.android.gms.ads.Correlator: com.google.android.gms.internal.zzkc zzbh()" [label="SIMPLE",style=bold,color=black,];
    "com.zaidisoft.teninone.Calculator$1: void <init>(com.zaidisoft.teninone.Calculator)" [label="Calculator$1(<init>)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"com.zaidisoft.teninone.Calculator$1: void <init>(com.zaidisoft.teninone.Calculator)" [label="SIMPLE",style=bold,color=black,];
    "android.support.v4.app.FragmentTransaction: int commit()" [label="FragmentTransaction(commit)",];
    "com.zaidisoft.teninone.Calculator: void onCreate(android.os.Bundle)"->"android.support.v4.app.FragmentTransaction: int commit()" [label="SIMPLE",style=bold,color=black,];
}
